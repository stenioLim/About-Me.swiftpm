<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Terms</key>
	<dict>
		<key>Alpha</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Alpha oder *Alphakanal* bezieht sich auf die Deckkraft einer Farbe, von `0` (komplett durchsichtig) bis `1` (komplett deckend). Die Alphadaten sind ein Double-Wert (Dezimalzahl) aus dem Bereich von 0 bis 1.</string>
				<key>Title</key>
				<string>Alpha</string>
			</dict>
		</dict>
		<key>Boolean</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Typ, der entweder den Wert `true` oder `false` hat. So ergibt z. B. `9 &lt; 7` den booleschen Wert `false`, da `9` nicht kleiner ist als `7`.</string>
				<key>Title</key>
				<string>Boolescher Wert</string>
			</dict>
		</dict>
		<key>Double</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Typ, der Zahlen mit Dezimalstellen speichert, z. B. 3.14. Beachte, dass beim Programmieren ein Punkt anstelle eines Kommas als Dezimaltrennzeichen verwendet werden muss.</string>
				<key>Title</key>
				<string>Double</string>
			</dict>
		</dict>
		<key>Int</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Typ, der Ganzzahlen speichert. Also eine Zahl ohne Kommastelle, wie z. B. `10` oder `-42`.</string>
				<key>Title</key>
				<string>Int</string>
			</dict>
		</dict>
		<key>String</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Typ, der eine Reihe von Zeichen speichert, wie z. B. `"hello, world"` oder `"tanzende Katzen"`.</string>
				<key>Title</key>
				<string>String</string>
			</dict>
		</dict>
		<key>Swift</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Programmiersprache von Apple, die zum Schreiben von Apps für iPhone, iPad, Mac, Apple Watch und Apple TV verwendet wird.</string>
				<key>Title</key>
				<string>Swift</string>
			</dict>
		</dict>
		<key>SwiftUI</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>SwiftUI ist eine moderne Möglichkeit, um Benutzeroberflächen für jede Apple-Plattform festzulegen. Dafür werden Ansichten, Steuerungen und Layoutstrukturen für deine App bereitgestellt. Das Framework bietet Ereignishandler für Eingaben wie Tippen oder Gesten und andere Eingabetypen in der App sowie Werkzeuge, um den Datenfluss von den App-Modellen bis hin zu den Ansichten und Steuerungen zu verwalten, die den Benutzer:innen angezeigt werden und mit denen sie interagieren.</string>
				<key>Title</key>
				<string>SwiftUI</string>
			</dict>
		</dict>
		<key>absolute value</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Der vorzeichenlose Wert einer Zahl. Zum Beispiel ist „12“ der absolute Wert von „-12“ und der absolute Wert von „23.4“ ist „23.4“.</string>
				<key>Title</key>
				<string>Absoluter Wert</string>
			</dict>
		</dict>
		<key>abstraction</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine vereinfachte Version einer komplexen Sache.   Eine Abstraktion verbirgt Details, damit du einfacher über Abschnitte deines Codes nachdenken und sie besser kombinieren kannst.   Beispielsweise ist ein [Typ](glossary://type) eine Abstraktion, die die Konfiguration, Eigenschaften und Methoden einer Instanz dieses Typs verbirgt.</string>
				<key>Title</key>
				<string>Abstraktion</string>
			</dict>
		</dict>
		<key>accelerometer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Sensor, der die Beschleunigung des Geräts in drei Dimensionen misst: hoch und runter, vor und zurück, links und rechts.</string>
				<key>Title</key>
				<string>Beschleunigungsmesser</string>
			</dict>
		</dict>
		<key>adopt</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Zum Übernehmen eines Protokolls bietet ein Typ eine Reihe von eigenen Implementierungen für die Protokollanforderungen, z. B. seine aufgeführten Methoden und Eigenschaften.</string>
				<key>Title</key>
				<string>Übernehmen</string>
			</dict>
		</dict>
		<key>algorithm</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine Reihe von Schritt-für-Schritt-Anleitungen oder Regeln zur Lösung eines Problems. Eine schrittweise Anleitung zum Zubereiten von Tee kann z. B. als Algorithmus angesehen werden.</string>
				<key>Title</key>
				<string>Algorithmus</string>
			</dict>
		</dict>
		<key>append</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Etwas zum Ende hinzufügen. Zum Beispiel kannst du einen String an das Ende eines anderen Strings anfügen, oder ein Objekt an einem Objektarray anfügen.
</string>
				<key>Title</key>
				<string>Anfügen</string>
			</dict>
		</dict>
		<key>application</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Software, die aus Code besteht und es erlaubt, bestimmte Aufgaben auszuführen. Zum Beispiel verwendest du die App „Nachrichten“, um Nachrichten zu senden und zu empfangen.</string>
				<key>Title</key>
				<string>App</string>
			</dict>
		</dict>
		<key>argument</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Eingabewert, der einer Funktion übergeben wird, um ihr Verhalten anzupassen. Im Funktionsaufruf `move(distance: 3)` ist zum Beispiel die Zahl `3` ein Argument, das angibt, wie viele Felder sich der Charakter bewegen soll.</string>
				<key>Title</key>
				<string>Argument</string>
			</dict>
		</dict>
		<key>arithmetic operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Symbol, wie z. B. `+`, `-`, `*` oder `/`, das einen grundlegenden mathematischen Vorgang für eine oder mehrere Zahlen ausführt. So verwenden `42 / 7` und `17 - 5` mathematische Operatoren.</string>
				<key>Title</key>
				<string>Arithmetischer Operator</string>
			</dict>
		</dict>
		<key>array</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine Sammlung, die eine sortierte Liste von Objekten des gleichen Typs speichert. Das gleiche Objekt kann an verschiedenen Stellen mehrfach erscheinen, so ist z. B. `highScores = [37, 34, 29, 29, 26]` ein Array von [Ganzzahlen](glossary://Int).</string>
				<key>Title</key>
				<string>Array</string>
			</dict>
		</dict>
		<key>asset</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Assets sind Bilder, Sounds und andere Objekte, die von der App verwendet werden. Du kannst Assets von anderen Apps wie „Dateien“ und „Fotos“ in Swift Playgrounds importieren.</string>
				<key>Title</key>
				<string>Asset</string>
			</dict>
		</dict>
		<key>assignment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine Aktion, die den Wert einer Variablen oder Konstanten setzt.</string>
				<key>Title</key>
				<string>Zuweisung</string>
			</dict>
		</dict>
		<key>assignment operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Das Symbol `=` wird verwendet, um den Wert einer Variablen zu setzen. So wird z. B. bei `greeting = "hello"` der Wert von `greeting` auf `"hello"` gesetzt.</string>
				<key>Title</key>
				<string>Zuweisender Operator</string>
			</dict>
		</dict>
		<key>asynchronous process</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Codeblock, der ausgeführt werden kann, während der Rest der App oder des Programms weiterhin ausgeführt wird. Im Gegensatz zu synchronen Prozessen, die eine Programmausführung bis zum Abschluss blockieren, lassen sich asynchrone Prozesse gleichzeitig mit dem Rest des App-Codes ausführen.</string>
				<key>Title</key>
				<string>Asynchroner Prozess</string>
			</dict>
		</dict>
		<key>binding</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Füge den [Eigenschaftswrapper](glossary://property%20wrapper) `@Binding` hinzu, um eine wechselseitige Verbindung zwischen einer Eigenschaft, die Daten speichert, und einer Ansicht herzustellen, die die Daten anzeigt und ändert. Die Bindung verbindet die Eigenschaft mit einer Wahrheitsquelle, die an einer anderen Stelle gespeichert wird, anstatt Daten direkt zu speichern. 

Eine Taste, die zwischen Wiedergabe und Pause umschaltet, kann beispielsweise mit dem Eigenschaftswrapper `@Binding` eine Bindung mit einer Eigenschaft der übergeordneten Ansicht herstellen.
</string>
				<key>Title</key>
				<string>Bindung</string>
			</dict>
		</dict>
		<key>body</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Im Text einer [Ansicht](glossary://view) stellst du den Inhalt der Ansicht bereit. Dieser muss aus mindestens einer [Primitivansicht](glossary://primitive%20view), die von SwiftUI bereitgestellt wird, oder einer beliebigen [zusammengesetzten Ansicht](glossary://composed%20view) bestehen, die du erstellt hast.</string>
				<key>Title</key>
				<string>Hauptteil</string>
			</dict>
		</dict>
		<key>bounds</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Der Bereich von Werten, den ein Index in einem Array haben kann. Das Array `[17, 42, 95]` kann zum Beispiel Indexwerte von 0 bis 2 haben. Beim Prüfen der Grenzen wird überprüft, ob sich der Indexwert innerhalb der Grenzen des Arrays befindet.</string>
				<key>Title</key>
				<string>Grenzen</string>
			</dict>
		</dict>
		<key>brightness</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Die Menge des Lichts, das in die Kamera eindringt, aus dem Bereich von `0` (kein Licht) bis `1` (alles Licht). Die Helligkeit ist ein [Double](glossary://Double)-Wert (Dezimalzahl) von `0` bis `1`.</string>
				<key>Title</key>
				<string>Helligkeit</string>
			</dict>
		</dict>
		<key>bug</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Fehler im Code, der verhindert, dass ein Programm wie erwartet ausgeführt wird. 
</string>
				<key>Title</key>
				<string>Bug</string>
			</dict>
		</dict>
		<key>bundle</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine Repräsentation des Codes und der Ressourcen, die in einem Bundle-Verzeichnis auf einer Festplatte gespeichert sind. Bundles organisieren die darin enthaltenen Ressourcen in genau definierte Unterverzeichnisse. Die Bundle-Strukturen variieren je nach Plattform und Typ des Bundles. Durch Verwenden eines Bundle-Objekts hast du Zugriff auf die Ressourcen im Bundle, ohne die Bundle-Struktur zu kennen.</string>
				<key>Title</key>
				<string>Bundle</string>
			</dict>
		</dict>
		<key>call</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine Funktion im Code aufzurufen, heißt, diese Funktion anzuweisen, dass sie ausgeführt wird und die in ihr definierten Aktionen ausführt.</string>
				<key>Title</key>
				<string>Aufruf</string>
			</dict>
		</dict>
		<key>child view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine Ansicht, die in einer [übergeordneten Ansicht](glossary://parent%20view) enthalten ist. Eine übergeordnete Ansicht kann eine beliebige Anzahl an untergeordneten Ansichten enthalten, von denen wiederum jede ihre eigenen untergeordneten Ansichten enthalten kann usw. Eine Ansicht und alle ihre nachfolgenden Ansichten bilden eine [Ansichtenhierarchie](glossary://view%20hierarchy).</string>
				<key>Title</key>
				<string>Untergeordnete Ansicht</string>
			</dict>
		</dict>
		<key>class</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine Klasse ist ein Container für Code, der als Entwurf (Vorlage) zum Erstellen mehrerer Kopien von Objekten des gleichen Typs dient. Ähnlich wie ein Entwurf die Funktionen und Verhaltensweisen eines Objekts (wie beispielsweise eines Fahrrads) definieren kann, definiert eine Klasse diese als [Eigenschaften](glossary://property) und [Methoden](glossary://method).

Wenn du eine neue Kopie, auch [Instanz](glossary://instance) genannt, einer Klasse erstellst, enthält diese Instanz alle Eigenschaften und Methoden deines Entwurfs. Allerdings können die Werte der einzelnen Instanzen unabhängig voneinander geändert werden, sodass du anpassen kannst, wie sich die einzelnen Kopien verhalten sollen. Eine der Eigenschaften der Klasse der Fahrräder ist beispielsweise die Farbe, sodass du sowohl rote als auch blaue Fahrräder erstellen kannst.</string>
				<key>Title</key>
				<string>Klasse</string>
			</dict>
		</dict>
		<key>closure</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Funktionsabschlüsse sind [Funktionen](glossary://function), die direkt ausgeführt werden und keinen Namen benötigen.
					
```
scene.setOnStartHandler {
    // Hauptteil des Funktionsabschlusses
}
```
                    
Funktionsabschlüsse können Referenzen auf beliebige Konstanten und Variablen aus dem Kontext, in dem sie definiert sind, erfassen und speichern. Dies wird als Abschließen dieser Konstanten und Variablen bezeichnet.</string>
				<key>Title</key>
				<string>Funktionsabschluss</string>
			</dict>
		</dict>
		<key>code comment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Codekommentar gibt Programmierer:innen die Möglichkeit, ihren Code zu dokumentieren und zu erläutern.   Du kannst einen einzeiligen Kommentar erstellen, indem du zwei Schrägstriche gefolgt von einem Leerzeichen eingibst (z. B.: „// Dies ist mein Kommentar.“).   Wenn du deinen Code ausführst, werden Codekommentare nicht ausgeführt.</string>
				<key>Title</key>
				<string>Codekommentar</string>
			</dict>
		</dict>
		<key>code expression</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Stück Code, das ausgewertet wird und einen Wert ausgibt. Wenn `monate` zum Beispiel ein Array mit 12 Objekten ist, gibt `monate.count - 1` den Wert `11` aus.</string>
				<key>Title</key>
				<string>Codeausdruck</string>
			</dict>
		</dict>
		<key>coding</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Das Zusammensetzen von Befehlen, Codestrukturen und Algorithmen, um ein Programm zu erstellen.</string>
				<key>Title</key>
				<string>Programmieren</string>
			</dict>
		</dict>
		<key>collection</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine Datenstruktur, wie ein Array oder ein Wörterbuch, in dem mehrere Daten gespeichert werden.</string>
				<key>Title</key>
				<string>Sammlung</string>
			</dict>
		</dict>
		<key>command</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Code, der eine App anweist, eine bestimmte Aktion auszuführen. </string>
				<key>Title</key>
				<string>Befehl</string>
			</dict>
		</dict>
		<key>comment out</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Du kannst das Ausführen einer Codezeile verhindern, indem du sie in einen [Codekommentar](glossary://code%20comment) umwandelst. Füge zu diesem Zweck `//` am Beginn der betreffenden Codezeile ein. Beispiel:
                
`// level.run()`</string>
				<key>Title</key>
				<string>auskommentieren</string>
			</dict>
		</dict>
		<key>comparison operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Symbol, z. B. `==`, `!=`, `&lt;`, `&gt;`, `&lt;=` oder `&gt;=`, um zwei Werte zu vergleichen. Ein Vergleichsoperator kann in einer Bedingung einer `if`-Anweisung oder `while`-Schleife verwendet werden, um einen booleschen Wert zu erhalten, der angibt, ob ein Vergleich `true` ist. So wird z. B. bei `6 &gt; 8` der Wert `6` mit `8` verglichen und ergibt `false`.</string>
				<key>Title</key>
				<string>Vergleichender Operator</string>
			</dict>
		</dict>
		<key>compiler error</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Fehler treten beim Kompilieren durch Ungenauigkeiten im Code auf. Sie werden als roter Punkt am linken Rand oder in der Symbolleiste angezeigt.</string>
				<key>Title</key>
				<string>Fehler beim Kompilieren</string>
			</dict>
		</dict>
		<key>composed view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine [Ansicht](glossary://view), die durch Kombinieren von einer oder mehreren [Primitiv-](glossary://primitive%20view) oder zusammengesetzten Ansichten erstellt wurde.
</string>
				<key>Title</key>
				<string>Zusammengesetzte Ansicht</string>
			</dict>
		</dict>
		<key>composition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Der Vorgang, kleinere Teile eines Programms zu kombinieren, um größere Teile zu erstellen, die sich besser bearbeiten und nachvollziehen lassen.</string>
				<key>Title</key>
				<string>Komposition</string>
			</dict>
		</dict>
		<key>compound assignment operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Operator, der Zuweisungen (den Wert einer Variable festlegen) mit einer anderen Operation, z. B. Addition oder Subtraktion, verbindet. Wenn zum Beispiel `1` der aktuelle Wert von `a` ist, wird mit „`a += 3`“ `3` zu `1` addiert und das Ergebnis `a` zugewiesen, sodass der Wert von `a` jetzt `4` ist.</string>
				<key>Title</key>
				<string>Zuweisender zusammengesetzter Operator</string>
			</dict>
		</dict>
		<key>computed property</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine errechnete Eigenschaft speichert einen Wert nicht direkt. Sie kalkuliert stattdessen auf Grundlage des aktuellen Status von anderen relevanten Werten einen Wert, wenn sie abgerufen wird.

Im Beispiel unten ist „area“ eine solche errechnete Eigenschaft, während `width` und `height` gespeicherte Eigenschaften sind:

```
struct RectangleCalculator { 
    var width = 10.0
    var height = 10.0
    
    var area : Double { 
        return width * height
    }
} 
```</string>
				<key>Title</key>
				<string>Errechnete Eigenschaft</string>
			</dict>
		</dict>
		<key>conditional code</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Code, der nur ausgeführt wird, wenn bestimmte Bedingungen zutreffen. So enthalten z. B. `if`-Anweisungen und `while`-Schleifen bedingte Anweisungen, die nur ausgeführt werden, wenn oder solange die Bedingung `true` ist.</string>
				<key>Title</key>
				<string>Bedingte Anweisungen</string>
			</dict>
		</dict>
		<key>conform</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Typ geht dann mit einem Protokoll konform, wenn er eigene Implementierungen für die Anforderungen dieses Protokolls bereitstellt.</string>
				<key>Title</key>
				<string>Konform</string>
			</dict>
		</dict>
		<key>constant</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein benannter Container, der einen nicht veränderbaren Wert enthält.</string>
				<key>Title</key>
				<string>Konstante</string>
			</dict>
		</dict>
		<key>container</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Container, der auch als [übergeordnete Ansicht](glossary://parent%20view) bezeichnet wird, ist eine Ansicht, die andere Ansichten enthält.</string>
				<key>Title</key>
				<string>Container</string>
			</dict>
		</dict>
		<key>coordinates</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Reihe von Zahlen, die eine Position eindeutig definieren. Zum Beispiel sind (100, -200) die Koordinaten für einen Punkt in einer zweidimensionalen Fläche mit der X-Koordinate 100 und der Y-Koordinate -200.</string>
				<key>Title</key>
				<string>Koordinaten</string>
			</dict>
		</dict>
		<key>data</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Informationen, die von einem Computer verarbeitet oder gespeichert werden und nicht mit dem Code identisch sind, der auf sie einwirkt.</string>
				<key>Title</key>
				<string>Daten</string>
			</dict>
		</dict>
		<key>debug</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Das Finden und Beheben von Fehlern im Code, die verhindern, dass ein Programm korrekt ausgeführt wird. </string>
				<key>Title</key>
				<string>Debug</string>
			</dict>
		</dict>
		<key>declaration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Stück Code, der etwas Neues in deinem Programm erstellt, z. B. eine Funktion, Variable oder einen eigenen Typ. So gibt z. B. `let planet = "Earth"` eine neue Konstante `planet` an und gibt ihr den Wert `"Earth"`.</string>
				<key>Title</key>
				<string>Deklaration</string>
			</dict>
		</dict>
		<key>decomposition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Der Vorgang, eine komplexe Problemstellung in kleinere, einfacher zu lösende Probleme aufzuteilen.</string>
				<key>Title</key>
				<string>Dekomposition</string>
			</dict>
		</dict>
		<key>decrement</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Verringert eine Zahl um einen Ganzzahlwert, häufig um 1.</string>
				<key>Title</key>
				<string>Verringern</string>
			</dict>
		</dict>
		<key>define</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Das Angeben expliziter Werte oder Verhaltensweisen von neu erstelltem Code, z. B. einer Funktion, Variable oder eines eigenen Typs. Du definierst beispielsweise eine Funktion, indem du eine Reihe von Befehlen in der Funktion angibst, die angeben, was sie machen soll.</string>
				<key>Title</key>
				<string>Definieren</string>
			</dict>
		</dict>
		<key>dot notation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine Syntaxform, die verwendet wird, um auf die Eigenschaften einer Instanz zuzugreifen oder deren Methoden aufzurufen. So ruft z. B. `expert.toggleSwitch()` die Methode `toggleSwitch()` der Instanz `expert` auf.</string>
				<key>Title</key>
				<string>Punktnotation</string>
			</dict>
		</dict>
		<key>efficiency</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Maßstab, wie gut Code darin ist, seinen Zweck schnell zu erfüllen und dabei so wenig Ressourcen (z. B. Speicher oder Rechenleistung) wie möglich zu verwenden.</string>
				<key>Title</key>
				<string>Effizienz</string>
			</dict>
		</dict>
		<key>else block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Der letzte Codeblock in einer `if`-Anweisung. Der `else`-Block wird ausgeführt, wenn alle Bedingungen in der `if`-Anweisung `false` sind.</string>
				<key>Title</key>
				<string>else-Block</string>
			</dict>
		</dict>
		<key>else if block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Codeblock in einer `if`-Anweisung, der zum Überprüfen einer Bedingung verwendet wird, die nicht vom `if`-Block oder anderen `else if`-Blöcken geprüft wird.</string>
				<key>Title</key>
				<string>else-if-Block</string>
			</dict>
		</dict>
		<key>enumeration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Typ, der eine Reihe verschiedener aber verwandter Werte definiert, die *Aufzählungsfälle* genannt werden. Zum Beispiel definiert eine Aufzählung `Direction` Fälle für alle Himmelsrichtungen: `north`, `south`, `east` und `west`. Wenn du eine Aufzählung einer Variable oder Konstante zuweist, wählst du immer zuerst einen der Fälle aus, zum Beispiel `let compassDirection: Direction = .north`.</string>
				<key>Title</key>
				<string>Aufzählung</string>
			</dict>
		</dict>
		<key>environment object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Füge den [Eigenschaftswrapper](glossary://property%20wrapper) `@EnvironmentObject` hinzu, um eine Eigenschaft für ein beobachtbares Objekt durch eine übergeordnete („parent“ oder „ancestor“) Ansicht zu deklarieren. Wenn du eine Eigenschaft als Environment-Objekt deklarierst, stelle sicher, dass du eine zugehörige Modellinstanz in einer übergeordneten („ancestor“) Ansicht setzt, indem du ihren Modifikator `environmentObject(_:)` aufrufst.</string>
				<key>Title</key>
				<string>Environment-Objekt</string>
			</dict>
		</dict>
		<key>event</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Dies ist eine Aktion, die von einem Computerprogramm erkannt werden kann. Ereignisse werden durch Eingaben ausgelöst, z. B. durch das Drücken einer Taste oder das Drehen des Bildschirms.</string>
				<key>Title</key>
				<string>Ereignis</string>
			</dict>
		</dict>
		<key>event handler</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine Funktion, die nach einem Ereignis aufgerufen wird, um das Ereignis zu verarbeiten.</string>
				<key>Title</key>
				<string>Ereignishandler</string>
			</dict>
		</dict>
		<key>filtering</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Verarbeiten von Daten in einer Sammlung oder Datenstruktur, um einen neuen Datensatz zu erzeugen.</string>
				<key>Title</key>
				<string>Filtern</string>
			</dict>
		</dict>
		<key>font</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine Gruppe von Textzeichen mit genau definiertem Stil, Schriftschnitt und Schriftgröße. Der Stil einer Schrift wird als *Schriftart* bezeichnet. HelveticaNeue ist zum Beispiel eine Schriftart und HelveticaNeue-Bold 10 Punkt eine Schrift.</string>
				<key>Title</key>
				<string>Schrift</string>
			</dict>
		</dict>
		<key>for loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Block mit sich wiederholendem Code, der eine bestimmte Anzahl von Malen ausgeführt wird.</string>
				<key>Title</key>
				<string>for-Schleife</string>
			</dict>
		</dict>
		<key>full function name</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Der vollständige Name einer Funktion einschließlich der Namen ihrer Parameter, die durch Doppelpunkte (`:`) abgetrennt sind, z. B. `move(to:duration:)`.</string>
				<key>Title</key>
				<string>Vollständiger Funktionsname</string>
			</dict>
		</dict>
		<key>function</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine benannte Reihe von [Befehlen](glossary://command), die bei Bedarf jederzeit ausgeführt werden können.</string>
				<key>Title</key>
				<string>Funktion</string>
			</dict>
		</dict>
		<key>function definition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine Funktionsdefinition beschreibt, was eine Funktion tut, welche Daten sie erwartet und welche Daten sie ausgibt, nachdem sie ausgeführt wurde.</string>
				<key>Title</key>
				<string>Funktionsdefinition</string>
			</dict>
		</dict>
		<key>global function</key>
		<dict>
			<key>FirstUse</key>
			<dict>
				<key>PageReference</key>
				<string></string>
				<key>_LOCALIZABLE_</key>
				<dict>
					<key>Title</key>
					<string></string>
				</dict>
			</dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine Funktion, auf die von jeder Datei in deinem Projekt zugegriffen werden kann.</string>
				<key>Title</key>
				<string>Globale Funktion</string>
			</dict>
		</dict>
		<key>global variable</key>
		<dict>
			<key>FirstUse</key>
			<dict>
				<key>PageReference</key>
				<string></string>
				<key>_LOCALIZABLE_</key>
				<dict>
					<key>Title</key>
					<string></string>
				</dict>
			</dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine Variable, auf die von jeder Datei in deinem Projekt zugegriffen werden kann.</string>
				<key>Title</key>
				<string>Globale Variable</string>
			</dict>
		</dict>
		<key>grayscale</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Bereich von Grautönen zwischen Weiß und Schwarz.</string>
				<key>Title</key>
				<string>Graustufen</string>
			</dict>
		</dict>
		<key>gyroscope</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Sensor, der die Ausrichtung des Geräts in drei Dimensionen misst: die Neigung von vorne nach hinten, die Neigung von links nach rechts und die Rotation um den eigenen Mittelpunkt.</string>
				<key>Title</key>
				<string>Gyroskop</string>
			</dict>
		</dict>
		<key>hertz</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Hertz (Hz) ist die Maßeinheit für 1 Schwingung pro Sekunde. Bei Tonvibrationen entspricht 1 Hz einer Schallwelle pro Sekunde. Das menschliche Gehör kann Töne zwischen 20 Hz und 16.000 Hz wahrnehmen.</string>
				<key>Title</key>
				<string>Hertz</string>
			</dict>
		</dict>
		<key>hue</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Der Ton zu einer Farbe im Farbrad. Dies ist ein Double-Wert (Dezimalzahl) aus dem Bereich von `0` bis `1`.</string>
				<key>Title</key>
				<string>Farbton</string>
			</dict>
		</dict>
		<key>if block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Der erste Codeblock in einer `if`-Anweisung. Der `if`-Block wird ausgeführt, wenn die Bedingung in der `if`-Anweisung `true` ist.</string>
				<key>Title</key>
				<string>if-Block</string>
			</dict>
		</dict>
		<key>if statement</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine Codestruktur, die verwendet wird, um Code auszuführen, der auf dem Wert von einer oder mehreren Bedingungen basiert. Der erste Codeblock in einer `if`-Anweisung ist ein `if`-Block. Eine `if`-Anweisung kann unter Umständen auch andere Blöcke mit zusätzlichen Überprüfungen enthalten, z. B. einen `else`-Block und einen `else if`-Block.</string>
				<key>Title</key>
				<string>if-Anweisung</string>
			</dict>
		</dict>
		<key>increment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Erhöht eine Zahl um einen Ganzzahlwert, häufig um 1.</string>
				<key>Title</key>
				<string>Erhöhen</string>
			</dict>
		</dict>
		<key>index</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine Zahl, die die Position eines Objekts in einem [Array](glossary://array) darstellt.</string>
				<key>Title</key>
				<string>Index</string>
			</dict>
		</dict>
		<key>index out of range error</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Dieser Fehler passiert, wenn versucht wird, mit einem Index der außerhalb des Bereichs des Arrays liegt, auf das Array zuzugreifen. So ist z. B. der Index `2` außerhalb des Bereichs des folgenden Arrays: `[17, 42]`.</string>
				<key>Title</key>
				<string>Indexbereichsfehler</string>
			</dict>
		</dict>
		<key>initialization</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Das Erstellen einer neuen Instanz eines Typs, einschließlich des Festlegens der Startwerte aller Eigenschaften des Typs.</string>
				<key>Title</key>
				<string>Initialisierung</string>
			</dict>
		</dict>
		<key>initializer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine Initialisierung wird aufgerufen, um eine neue [Instanz](glossary://instance) eines Typs zu erstellen. Die Initialisierung muss alle Anfangswerte der Eigenschaften des Typs festlegen und sie enthält oft auch weiteren Konfigurationscode.</string>
				<key>Title</key>
				<string>Initialisierung</string>
			</dict>
		</dict>
		<key>inner loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Block mit sich wiederholendem Code (eine Schleife), der innerhalb einer weiteren (äußeren) Schleife verschachtelt ist.</string>
				<key>Title</key>
				<string>Innere Schleife</string>
			</dict>
		</dict>
		<key>instance</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Wert eines bestimmten [Typs](glossary://type). Zum Beispiel ist `motion` in `let motion = MotionSensor()` eine Instanz des Typs `MotionSensor`.</string>
				<key>Title</key>
				<string>Instanz</string>
			</dict>
		</dict>
		<key>iteration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Der Vorgang einen Prozess zu wiederholen, z. B. die gleiche Aktion auf jedes Objekt in einem Array auszuführen.</string>
				<key>Title</key>
				<string>Iteration</string>
			</dict>
		</dict>
		<key>lag</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine Abnahme der Geschwindigkeit oder Reaktionsfähigkeit einer App, die durch Verarbeitungsanforderungen, Leistungsbedarf oder beidem verursacht wird.</string>
				<key>Title</key>
				<string>Lag</string>
			</dict>
		</dict>
		<key>leading edge</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Die Leitkante beschreibt, wenn sie im Zusammenhang mit Inhalten in einer Ansicht verwendet wird, die horizontale Startposition des Inhalts. Die Position der Leitkante ist von deinen Einstellungen abhängig und basiert in der Regel auf den Regions- und Spracheinstellungen.
                    Bei Sprachen wie zum Beispiel Englisch oder Deutsch, die von links nach rechts gelesen werden, befindet sich die Leitkante auf der linken Seite. Bei Sprachen wie Arabisch oder Hebräisch, die von rechts nach links gelesen werden, ist die Leitkante auf der rechten Seite.</string>
				<key>Title</key>
				<string>Leitkante</string>
			</dict>
		</dict>
		<key>literal</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Mit Literalen kannst du Bilder oder Farben direkt aus der Mediathek oder der Farbauswahl in deinen Code einbetten. Literale sind die eigentlichen Werte deiner Daten und werden direkt im Editor in ihrem ursprünglichen Format angezeigt.</string>
				<key>Title</key>
				<string>Literal</string>
			</dict>
		</dict>
		<key>logical AND operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Symbol (`&amp;&amp;`), das zwei boolesche Werte kombiniert, wobei beide Werte `true` sein müssen, damit der gesamte Code `true` ist. So ergibt z. B. `a &amp;&amp; b` gleich `true` nur, wenn `a` und `b` beide `true` sind.</string>
				<key>Title</key>
				<string>Logischer „AND“-Operator</string>
			</dict>
		</dict>
		<key>logical NOT operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Symbol (`!`), das den booleschen Wert eines Stück Codes umkehrt. So wird z. B. aus `a` gleich `true`, dann `!a` gleich `false`.</string>
				<key>Title</key>
				<string>Logischer „NOT“-Operator</string>
			</dict>
		</dict>
		<key>logical OR operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Symbol (`||`), das zwei boolesche Werte kombiniert, wobei nur ein Wert `true` sein muss, damit der gesamte Code `true` ist. So ergibt z. B. `a || b` gleich `true`, wenn entweder `a` oder `b` `true` ist (oder wenn beide `true` sind).</string>
				<key>Title</key>
				<string>Logischer „OR“-Operator</string>
			</dict>
		</dict>
		<key>logical operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Symbol, z. B. `&amp;&amp;`, `||` oder `!`, das die logischen booleschen Werte `true` und `false` verändert oder kombiniert.</string>
				<key>Title</key>
				<string>Logischer Operator</string>
			</dict>
		</dict>
		<key>loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Codeblock, der eine bestimmte Anzahl von Malen wiederholt wird (z. B. eine `for`-Schleife) oder bis eine Bedingung erfüllt ist (z. B. eine `while`-Schleife).</string>
				<key>Title</key>
				<string>Schleife</string>
			</dict>
		</dict>
		<key>memory</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Der Teil des Computers der den Code für ein Programm und die von ihm verwendeten Daten entweder temporär oder dauerhaft speichert.</string>
				<key>Title</key>
				<string>Speicher</string>
			</dict>
		</dict>
		<key>method</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine Funktion oder eine Reihe von Befehlen, die innerhalb eines [Typs](glossary://type) definiert sind.</string>
				<key>Title</key>
				<string>Methode</string>
			</dict>
		</dict>
		<key>modifier</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>In SwiftUI ist ein Modifikator eine [Methode](glossary://method), die in einer Ansicht aufgerufen wird, um deren Darstellung oder Verhalten zu ändern. Um Modifikatoren besser lesen zu können, steht jeder in einer eigenen Zeile unter der [Instanz](glossary://instance) einer Ansicht.</string>
				<key>Title</key>
				<string>Modifikator</string>
			</dict>
		</dict>
		<key>modulo operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Symbol (`%`), das den Rest ausgibt, wenn eine Zahl durch eine andere geteilt wird. Zum Beispiel gibt `17 % 5` den Wert `2` aus.</string>
				<key>Title</key>
				<string>Modulo-Operator</string>
			</dict>
		</dict>
		<key>navigation bar</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Mit einer Navigationsoberfläche kannst du auf jedem Bildschirm jeweils eine Wahl treffen, bis du zu einem bestimmten Ziel kommst. Um zu einem anderen Ziel zu gelangen, musst du denselben Weg zurückgehen oder komplett von vorne beginnen und eine andere Auswahl treffen. In der Navigationsleiste oben auf dem Bildschirm wird ein Titel angezeigt, damit du weißt, wo du dich gerade befindest. Außerdem findest du dort eine Taste zum Zurückgehen, mit der du zum vorherigen Bildschirm gelangst.</string>
				<key>Title</key>
				<string>Navigationsleiste</string>
			</dict>
		</dict>
		<key>nest</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Einen Block mit sich wiederholendem Code, z. B. eine Schleife, innerhalb eines anderen platzieren.</string>
				<key>Title</key>
				<string>Verschachteln</string>
			</dict>
		</dict>
		<key>observable object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Wenn eine Klasse mit dem `ObservableObject`-Protokoll [konform](glossary://conform) geht, führen jegliche Änderungen an den veröffentlichten Werten dazu, dass alle Ansichten, die diese Werte verwenden, automatisch aktualisiert werden, um die Änderungen zu berücksichtigen.</string>
				<key>Title</key>
				<string>Beobachtbares Objekt</string>
			</dict>
		</dict>
		<key>observed object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Wenn eine Klasse mit dem `ObservableObject`-Protokoll [konform](glossary://conform) geht, führen Änderungen an einem der veröffentlichten Werte dazu, dass alle Ansichten, die diesen Wert verwenden, automatisch aktualisiert werden, um die Änderungen zu berücksichtigen.</string>
				<key>Title</key>
				<string>Beobachtbares Objekt</string>
			</dict>
		</dict>
		<key>observer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Mit Bezug auf ein [beobachtbares Objekt](glossary://observable%20object) ist ein Beobachter eine Ansicht oder ein Objekt, das die Daten des beobachtbaren Objekts verwendet. Wenn sich die Daten des beobachtbaren Objekts ändern, erkennt SwiftUI die Änderungen und weist den Beobachter an, eine Aktualisierung durchzuführen.</string>
				<key>Title</key>
				<string>Beobachter</string>
			</dict>
		</dict>
		<key>operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Symbol, wie z. B. `+`, `-` oder `&amp;&amp;`, das einer Aktion für einen oder mehrerer Werte entspricht. So fügt z. B. in `1 + 2` der Operator für Addition (`+`) die Zahlen `1` und `2` zusammen.</string>
				<key>Title</key>
				<string>Operator</string>
			</dict>
		</dict>
		<key>outer loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Block mit sich wiederholendem Code (eine Schleife), der eine weitere (innere) Schleife enthält.</string>
				<key>Title</key>
				<string>Äußere Schleife</string>
			</dict>
		</dict>
		<key>parameter</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Der Name eines Eingabewerts einer Funktion, der in der Definition der Funktion verwendet wird. Zum Beispiel ist `distance` in `move(distance: Int)` ein Parameter, der einen Wert des Typs `Int` annimmt.</string>
				<key>Title</key>
				<string>Parameter</string>
			</dict>
		</dict>
		<key>parent view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Die Containeransicht von einer oder mehreren [untergeordneten Ansichten](glossary://child%20view).</string>
				<key>Title</key>
				<string>Übergeordnete Ansicht</string>
			</dict>
		</dict>
		<key>pattern</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine sich wiederholende Reihe von Gegebenheiten oder Daten.</string>
				<key>Title</key>
				<string>Muster</string>
			</dict>
		</dict>
		<key>pitch</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>In der Musik sagt die Tonhöhe einer Note aus, wie hoch oder tief eine Note ist. Als Grundlage dafür dient hauptsächlich die Frequenz der Vibration. Die Höhe einer Note kann in [Hertz](glossary://hertz) gemessen werden. Eine hohe Tonhöhe (~2000 Hz) kann sich wie eine Pfeife anhören, eine niedrige Tonhöhe (~40 Hz) etwa wie eine muhende Kuh.</string>
				<key>Title</key>
				<string>Tonhöhe</string>
			</dict>
		</dict>
		<key>primitive</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Mit Bezug auf ein Framework zum Programmieren wie SwiftUI ist ein Primitiv ein vom Framework bereitgestellter Bausteinblock, um komplexere Verhalten oder [Benutzeroberflächen](glossary://user%20interface) zusammenzusetzen.
</string>
				<key>Title</key>
				<string>Primitiv</string>
			</dict>
		</dict>
		<key>primitive view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine [Ansicht](glossary://view) des [SwiftUI](glossary://SwiftUI)-Frameworks, z. B. `Button`-, `Text`- oder `Image`-Ansicht (Taste, Text, Bild). Primitivansichten werden als Basiselemente genutzt, um komplexere [zusammengesetzte Ansichten](glossary://composed%20view) für eine [Benutzeroberfläche](glossary://user%20interface) zu schaffen.</string>
				<key>Title</key>
				<string>Primitivansicht</string>
			</dict>
		</dict>
		<key>private</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Das Schlüsselwort „private“ bewirkt, dass der Code nur innerhalb der jeweiligen Quelldatei zugänglich ist.
- callout(Beispiel):
`private class MyApp: App { }`</string>
				<key>Title</key>
				<string>private</string>
			</dict>
		</dict>
		<key>property</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine Variable (ein benannter Container, der einen Wert enthält), die innerhalb eines Typs definiert ist.</string>
				<key>Title</key>
				<string>Eigenschaft</string>
			</dict>
		</dict>
		<key>property wrapper</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Mit einem Eigenschaftswrapper kann ein übliches Verhaltensmuster auf eine Eigenschaft angewendet werden. Mit diesem Wrapper lässt sich die Eigenschaft erweitern, die definiert, wie sie beim Lesen gespeichert oder errechnet wird.   Der Eigenschaftswrapper `@State` weist zum Beispiel SwiftUI an, den Speicher für einen Wert zu verwalten und alle Bestandteile einer Ansicht, die ihn verwendet, zu aktualisieren, wenn sich dieser Wert ändert.</string>
				<key>Title</key>
				<string>Eigenschaftswrapper</string>
			</dict>
		</dict>
		<key>protocol</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine Reihe von Anforderungen wie zum Beispiel Methoden und Eigenschaften, die von einem Typ, z. B. Klasse, Struktur oder Aufzählung, übernommen (oder verfolgt) werden können.   Wenn ein Typ ein Protokoll übernimmt, stellt dieser eigene Implementierungen der Protokollanforderungen bereit und gilt als konform mit diesem Protokoll.</string>
				<key>Title</key>
				<string>Protokoll</string>
			</dict>
		</dict>
		<key>pseudocode</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine leicht zu lesende Beschreibung eines Algorithmus, normalerweise in einer Mischung aus Alltagssprache und Code geschrieben.</string>
				<key>Title</key>
				<string>Pseudocode</string>
			</dict>
		</dict>
		<key>public</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Das Schlüsselwort „public“ bewirkt, dass der Code für jede Datei in deinem Projekt verfügbar ist.
                        
- callout(Beispiel):
`public func decorateWithSticker(space: Space) { }`
                    </string>
				<key>Title</key>
				<string>public</string>
			</dict>
		</dict>
		<key>published value</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Füge den [Eigenschaftswrapper](glossary://property%20wrapper) `@Published` hinzu, um eine Eigenschaft zu deklarieren, die alle [Beobachter](glossary://observer) benachrichtigt, wenn sich ihr Wert ändert. Ändert sich der Wert, aktualisiert SwiftUI alle Ansichten, die seine Daten verwenden.</string>
				<key>Title</key>
				<string>Veröffentlichter Wert</string>
			</dict>
		</dict>
		<key>return type</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Wenn du eine Funktion definierst, kannst du optional einen Wertetyp definieren, den die Funktion als Ausgabe nach dem Ausführen zurückgibt. Dies ist der Rückgabetyp.</string>
				<key>Title</key>
				<string>Rückgabetyp</string>
			</dict>
		</dict>
		<key>reusability</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine Eigenschaft von Code, durch die er in unterschiedlichen Situationen in einem Programm verwendet werden kann.</string>
				<key>Title</key>
				<string>Wiederverwendbarkeit</string>
			</dict>
		</dict>
		<key>root view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine Ansicht, in der alle anderen Ansichten platziert werden. Sie wird auch als [oberste Ansicht](glossary://top-level%20view) bezeichnet. Die Ansicht befindet sich über einer [Ansichtenhierarchie](glossary://view%20hierarchy) und dient als [übergeordnete Ansicht](glossary://parent%20view) für alle [untergeordneten Ansichten](glossary://child%20view) in der Hierarchie.</string>
				<key>Title</key>
				<string>Root-Ansicht</string>
			</dict>
		</dict>
		<key>saturation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Die Intensität des Farbtons von einem Grauton bis hin zur vollen Farbe. Die Sättigung ist ein Double-Wert (Dezimalzahl) aus dem Bereich von `0` bis `1`.</string>
				<key>Title</key>
				<string>Sättigung</string>
			</dict>
		</dict>
		<key>sensor</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Sensor ist ein Gerät, das Ereignisse erkennt – etwa eine Änderung von Temperatur, Licht, Ton oder Bewegung – und einen Wert ausgibt.</string>
				<key>Title</key>
				<string>Sensor</string>
			</dict>
		</dict>
		<key>source of truth</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>In der App-Entwicklung ein einziger Punkt, wo alle Daten geändert werden. Alle anderen Verbindungen zu diesen Daten werden nur durch Referenzen hergestellt, um Duplikate der Informationen an anderen Speicherorten zu vermeiden. </string>
				<key>Title</key>
				<string>Wahrheitsquelle</string>
			</dict>
		</dict>
		<key>speech synthesis</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Computergenerierte Töne, die menschlicher Sprache ähneln, meistens aus Text erzeugt.</string>
				<key>Title</key>
				<string>Sprachsynthese</string>
			</dict>
		</dict>
		<key>state</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Die gespeicherte Information einer Variablen, eines Programms oder eines Systems zu einem bestimmten Zeitpunkt.</string>
				<key>Title</key>
				<string>Status</string>
			</dict>
		</dict>
		<key>state object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Füge den [Eigenschaftswrapper](glossary://property%20wrapper) `@StateObject` hinzu, um ein Statusobjekt zu deklarieren und einen Startwert bereitzustellen, der mit dem `ObservableObject`-[Protokoll](glossary://protocol) konform geht. SwiftUI verwaltet den Speicher für ein Statusobjekt und aktualisiert jedes Mal alle Unteransichten, die diesen Wert verwenden, wenn sich seine veröffentlichten Werte ändern.</string>
				<key>Title</key>
				<string>Statusobjekt</string>
			</dict>
		</dict>
		<key>state value</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Füge `@State` vor einer Variable ein, um SwiftUI anzuweisen, den Speicher für einen Wert zu verwalten. Wenn sich der Wert ändert, aktualisiert SwiftUI alle Bestandteile der Ansicht, die diesen Wert verwenden.</string>
				<key>Title</key>
				<string>Statuswert</string>
			</dict>
		</dict>
		<key>statement</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine Struktur, z. B. eine Schleife oder eine `if`-Anweisung, die Code in einem Programm organisiert.</string>
				<key>Title</key>
				<string>Anweisung</string>
			</dict>
		</dict>
		<key>string component</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Teil – oder Substring – einer Zeichenfolge (String), der sich ergibt, wenn die Zeichenfolge mithilfe eines Trennzeichens zerlegt wird. Beispiel: Wenn die Zeichenfolge `"Hund+Katze+Maus"` mit dem Trennzeichen `"+"` zerlegt wird, ergeben sich `"Hund”`, `"Katze"` und `"Maus"` als Substrings.</string>
				<key>Title</key>
				<string>Stringkomponente</string>
			</dict>
		</dict>
		<key>string concatenation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Das Zusammenfügen von Strings, indem ein String nach einem anderen eingefügt wird. Die Konkatenation von `"foot"` und `"ball"` ist zum Beispiel `"football"`.</string>
				<key>Title</key>
				<string>Stringkonkatenation</string>
			</dict>
		</dict>
		<key>string interpolation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Die Verwendung von Konstanten, Variablen oder Codeausdrücken in einem längeren String, die durch ihre aktuellen Werte ersetzt werden, wenn der String ausgewertet wird. Wenn zum Beispiel im String `"Karin mag \(frucht)."` die Variable `frucht` den Wert `"Pfirsiche"` annimmt, dann wird `\(frucht)` beim Auswerten durch `"Pfirsiche"` ersetzt: `"Karin mag Pfirsiche"`.</string>
				<key>Title</key>
				<string>Stringinterpolation</string>
			</dict>
		</dict>
		<key>syntax</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Die Regeln zum Schreiben von Code, den Computer verstehen und ausführen können.</string>
				<key>Title</key>
				<string>Syntax</string>
			</dict>
		</dict>
		<key>top-level view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine Ansicht, in der alle anderen Ansichten platziert werden. Sie wird auch als [Root-Ansicht](glossary://root%20view) bezeichnet. Die Ansicht befindet sich über einer [Ansichtenhierarchie](glossary://view%20hierarchy) und dient als [übergeordnete Ansicht](glossary://parent%20view) für alle [untergeordneten Ansichten](glossary://child%20view) in der Hierarchie.</string>
				<key>Title</key>
				<string>Oberste Ansicht</string>
			</dict>
		</dict>
		<key>trailing edge</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Die Abschlusskante beschreibt, wenn sie im Zusammenhang mit Inhalten in einer Ansicht verwendet wird, die horizontale Endposition des Inhalts. Die Position der Abschlusskante ist von deinen Einstellungen abhängig und basiert in der Regel auf den Regions- und Spracheinstellungen.
                    Bei Sprachen wie zum Beispiel Englisch oder Deutsch, die von links nach rechts gelesen werden, befindet sich die Abschlusskante auf der rechten Seite. Bei Sprachen wie Arabisch oder Hebräisch, die von rechts nach links gelesen werden, ist die Abschlusskante auf der linken Seite.</string>
				<key>Title</key>
				<string>Leitkante</string>
			</dict>
		</dict>
		<key>type</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine benannte Gruppierung von Eigenschaften (die Funktionen) und Methoden (das Verhalten) einer Art von Daten.</string>
				<key>Title</key>
				<string>Typ</string>
			</dict>
		</dict>
		<key>typography</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Die Kunst und Technik, Schriften so anzuordnen, dass Text lesbar und ansprechend dargestellt wird.</string>
				<key>Title</key>
				<string>Typografie</string>
			</dict>
		</dict>
		<key>user input</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Dies sind Informationen, die Programme aus der Interaktion mit Benutzer:innen beziehen, wenn diese zum Beispiel den Bildschirm berühren, Text über die Tastatur eingeben oder in das Mikrofon sprechen. 
</string>
				<key>Title</key>
				<string>Benutzereingabe</string>
			</dict>
		</dict>
		<key>user interface</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Die Mittel, mit denen Benutzer:innen eine App steuern. Die Benutzeroberfläche wird im Englischen auch mit „UI“ (User Interface) abgekürzt. Der Begriff beschreibt oft den sichtbaren Teil einer App, mit dem Benutzer:innen interagieren, und enthält Elemente wie Bilder, Text, Tasten, Schieberegler und Scrollansichten.</string>
				<key>Title</key>
				<string>Benutzeroberfläche</string>
			</dict>
		</dict>
		<key>variable</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein benannter Container, der einen veränderbaren Wert enthält.</string>
				<key>Title</key>
				<string>Variable</string>
			</dict>
		</dict>
		<key>velocity</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Dies ist die Geschwindigkeit eines Objekts in einer bestimmten Richtung.</string>
				<key>Title</key>
				<string>Geschwindigkeit</string>
			</dict>
		</dict>
		<key>view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine Ansicht ist der Baustein von der Benutzeroberfläche deiner App und steht für jedes beliebige visuelle Element, das mit dem `View`-[Protokoll](glossary://protocol) [konform](glossary://conform) geht.

Einige Beispiele für Ansichten in SwiftUI sind Textansichten, Bildansichten, Schieberegler, Raster, Tasten und Formen.</string>
				<key>Title</key>
				<string>Ansicht</string>
			</dict>
		</dict>
		<key>view hierarchy</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Eine Struktur, die das Layout von Ansichten relativ zu anderen Ansichten und mit einer Referenz zu einer Instanz einer obersten Ansicht ganz oben in der Hierarchie definiert. Die oberste Ansicht kann eine beliebige Anzahl an Unteransichten enthalten, die wiederum eigene Unteransichten enthalten können usw.</string>
				<key>Title</key>
				<string>Ansichtenhierarchie</string>
			</dict>
		</dict>
		<key>volume</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Lautstärke ist die Lautheit des vom [Sensor](glossary://sensor) erkannten Tons. Sie liegt zwischen 0 und 1.</string>
				<key>Title</key>
				<string>Lautstärke</string>
			</dict>
		</dict>
		<key>while loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ein Codeblock, der so lange ausgeführt wird, wie die vorgegebene Bedingung `true` ist. Sobald sich die Bedingung auf `false` ändert, wird die Schleife gestoppt.</string>
				<key>Title</key>
				<string>while-Schleife</string>
			</dict>
		</dict>
		<key>wireframe</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Der Umriss eines Objekts, wie Edelsteine, Schalter oder Blöcke, in der Rätselwelt. Ein Drahtgittermodell wird verwendet, um anzuzeigen, dass das Objekt beim Ausführen des Rätsels zufällig erscheinen könnte.</string>
				<key>Title</key>
				<string>Drahtmodell</string>
			</dict>
		</dict>
	</dict>
</dict>
</plist>
