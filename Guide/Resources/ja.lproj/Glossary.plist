<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Terms</key>
	<dict>
		<key>Alpha</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>アルファ（アルファチャンネルともいう）は色の不透明度に関わるもので、`0`（完全に透明）から`1`（完全に不透明）までの値を取ります。アルファデータは0から1までのDouble（倍精度浮動小数）です。</string>
				<key>Title</key>
				<string>アルファ</string>
			</dict>
		</dict>
		<key>Boolean</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`true`（真）または`false`（偽）のいずれかの値を持つ型。たとえば、`9 &lt; 7`では、`9`は`7`よりも小さくないので、ブール値の`false`（偽）が返されます。</string>
				<key>Title</key>
				<string>ブール値</string>
			</dict>
		</dict>
		<key>Double</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>小数部分のある数が入る型（3.14など）。</string>
				<key>Title</key>
				<string>Double（倍精度浮動小数）</string>
			</dict>
		</dict>
		<key>Int</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>整数を入れるための型。整数は、小数点以下を持たない数です（`10`や`-42`など）。</string>
				<key>Title</key>
				<string>Int（整数）</string>
			</dict>
		</dict>
		<key>String</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>一連の文字を入れるための型。例えば、`"hello, world"`や`"dancing kittens"`などです。</string>
				<key>Title</key>
				<string>String（文字列）</string>
			</dict>
		</dict>
		<key>Swift</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Appleが開発したプログラミング言語。iPhone、iPad、Mac、Apple Watch、Apple TV向けのAppやアプリケーションを作るために使われます。</string>
				<key>Title</key>
				<string>Swift</string>
			</dict>
		</dict>
		<key>SwiftUI</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>SwiftUIは、すべてのAppleプラットフォーム用のユーザインターフェイスを宣言するための最新の手段で、Appのユーザインターフェイスを宣言するためのビュー、コントロール、レイアウト構造を提供します。このフレームワークには、タップ、ジェスチャ、およびAppへのその他の種類の入力を実現するイベントハンドラと、Appのモデルからユーザに表示/操作されるビューやコントロールにいたるまでのデータの流れを管理するツールが用意されています。</string>
				<key>Title</key>
				<string>SwiftUI</string>
			</dict>
		</dict>
		<key>absolute value</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>数から符号を取り除いた値。たとえば、-12の絶対値は12で、23.4の絶対値は23.4です。</string>
				<key>Title</key>
				<string>絶対値</string>
			</dict>
		</dict>
		<key>abstraction</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>複雑なものを簡略化したバージョン。  抽象化によって細かいことが隠されるため、コードの断片について考えたり、組み合わせたりしやすくなります。  たとえば、[型](glossary://type)は、その型のインタンスの設定、プロパティ、およびメソッドを隠す抽象化です。</string>
				<key>Title</key>
				<string>抽象化</string>
			</dict>
		</dict>
		<key>accelerometer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>デバイスの加速度を上下、前後、左右の3次元で測定するセンサー。</string>
				<key>Title</key>
				<string>加速度計</string>
			</dict>
		</dict>
		<key>adopt</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>プロトコルを適用すること。型によって、リストされたメソッドやプロパティなど、プロトコルの要件を実現する、その型独自の一連の実装が提供されます。</string>
				<key>Title</key>
				<string>適用</string>
			</dict>
		</dict>
		<key>algorithm</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>問題を解くための段階的な手順または規則。たとえば、お茶を入れるための一連の手順は、アルゴリズムといえます。</string>
				<key>Title</key>
				<string>アルゴリズム</string>
			</dict>
		</dict>
		<key>append</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>何かの末尾に追加すること。たとえば、文字列を別の文字列の末尾に追加したり、項目の配列に項目を追加したりできます。
</string>
				<key>Title</key>
				<string>追加</string>
			</dict>
		</dict>
		<key>application</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>特定のタスクを実行できる、コードでできたソフトウェアです。例えば、“メッセージ”アプリケーション（App）を使って、メッセージを送受信します。</string>
				<key>Title</key>
				<string>アプリケーション</string>
			</dict>
		</dict>
		<key>argument</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>関数の動作を変えるために関数に指定する入力値。たとえば、`move(distance: 3)`という関数呼び出しでは、`3`の数値の引数で、何マス移動するかを指定しています。</string>
				<key>Title</key>
				<string>引数</string>
			</dict>
		</dict>
		<key>arithmetic operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>1つ以上の数値を使って基本的な計算を行うための記号（`+`、`-`、`*`、`/`など）。たとえば、`42 / 7`や`17 - 5`には、算術演算子が使われています。</string>
				<key>Title</key>
				<string>算術演算子</string>
			</dict>
		</dict>
		<key>array</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>同じ型の項目を順番に並べて保存するための入れ物。同じ項目を違う場所に入れることもできます。たとえば、`highScores = [37, 34, 29, 29, 26]`は、[整数](glossary://Int)の配列です。</string>
				<key>Title</key>
				<string>配列</string>
			</dict>
		</dict>
		<key>asset</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>アセットは、アプリケーションで使うイメージやサウンドなどの項目です。“ファイル”や“写真”など、ほかのアプリケーションからSwift Playgroundsにアセットを読み込むことができます。</string>
				<key>Title</key>
				<string>アセット</string>
			</dict>
		</dict>
		<key>assignment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>変数または定数の値を設定する操作。</string>
				<key>Title</key>
				<string>代入</string>
			</dict>
		</dict>
		<key>assignment operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>変数に値を設定するための記号（`=`）。例えば、`greeting = "hello"`では、`greeting`（挨拶）の値として`"hello"`が設定されます。</string>
				<key>Title</key>
				<string>代入演算子</string>
			</dict>
		</dict>
		<key>asynchronous process</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Appまたはプログラムの残りの部分を実行しながら実行できるコードブロック。完了するまでプログラムの実行がブロックされる同期処理に対し、非同期処理ではAppのコードの残りの部分を同時に実行できます。</string>
				<key>Title</key>
				<string>非同期処理</string>
			</dict>
		</dict>
		<key>binding</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`@Binding`[プロパティラッパー](glossary://property%20wrapper)を追加して、データを保存するプロパティと、データを表示したり変更したりするビューとの間の双方向接続を作成します。バインディングでは、データを直接保存するのではなく、プロパティをほかの場所に保存された信頼できる情報源に接続します。

例えば、再生と一時停止を切り替えるボタンでは、`@Binding`プロパティラッパーを使って、親ビューのプロパティへのバインディングを作成できます。
</string>
				<key>Title</key>
				<string>バインディング</string>
			</dict>
		</dict>
		<key>body</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[ビュー](glossary://view)の本文。ここでビューの内容を指定します。SwiftUIに用意されている1つ以上の[プリミティブビュー](glossary://primitive%20view)、またはすでに作成したいずれかの[作成済みビュー](glossary://composed%20view)で構成されます。</string>
				<key>Title</key>
				<string>body</string>
			</dict>
		</dict>
		<key>bounds</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>配列のインデックスに割り当てられる値の範囲。たとえば、配列`[17, 42, 95]`では、0から2までのインデックス値が使えます。範囲の確認とは、インデックス値が配列の範囲内であることを確認する処理のことです。</string>
				<key>Title</key>
				<string>範囲</string>
			</dict>
		</dict>
		<key>brightness</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>カメラに取り込まれた光の量。`0`（光なし）から`1`（光全開）の値を取ります。明るさは`0`から`1`までの[Double](glossary://Double)（倍精度浮動小数）です。</string>
				<key>Title</key>
				<string>明るさ</string>
			</dict>
		</dict>
		<key>bug</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>アプリケーションが正しく動かない原因となるコードのミス。
</string>
				<key>Title</key>
				<string>バグ</string>
			</dict>
		</dict>
		<key>bundle</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ディスク上のバンドルディレクトリに保存されているコードやリソースを示します。バンドルでは、中に含まれるリソースが、明確に定義されたサブディレクトリで整理されます。バンドルの構造は、プラットフォームやバンドルの種類によって異なります。バンドルオブジェクトを使えば、バンドルの構造を知らなくてもバンドルのリソースにアクセスできます。</string>
				<key>Title</key>
				<string>バンドル</string>
			</dict>
		</dict>
		<key>call</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コード内での関数の呼び出しは、関数の実行を命令し、関数内で定義されているアクションを行うことを意味します。</string>
				<key>Title</key>
				<string>呼び出し</string>
			</dict>
		</dict>
		<key>child view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[親ビュー](glossary://parent%20view)内に含まれるビュー。親ビューにはいくつでも子ビューを含めることができます。それぞれの子ビューにはその子ビューを含めることができ、以下同様に続きます。ビューとそのビューのすべての子孫ビューによって[ビュー階層](glossary://view%20hierarchy)が構成されます。</string>
				<key>Title</key>
				<string>子ビュー</string>
			</dict>
		</dict>
		<key>class</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>クラスとはコードの入れ物のことで、同じ種類のものをいくつもコピーして使えるようにする設計図の働きをします。例えば自転車のようなオブジェクトの設計図では、自転車の特徴や動作を定義しますが、同じようにクラスではそれらを[プロパティ](glossary://property)や[メソッド](glossary://method)として定義します。

クラスの新しいコピー（これを[インスタンス](glossary://instance)と呼びます）を作ると、そのインスタンスには設計図にあるすべてのプロパティとメソッドが含まれています。ただし、各インスタンスの値は別々に変更させることができるので、コピーごとに特徴や動作をカスタマイズすることができます。例えば、自転車のクラスに色のプロパティがあった場合、赤い自転車と青い自転車の両方を作ることができます。</string>
				<key>Title</key>
				<string>クラス</string>
			</dict>
		</dict>
		<key>closure</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>クロージャは所定の位置で実行する[関数](glossary://function)で、名前を必要としません。
					
```
scene.setOnStartHandler {
    // クロージャの本文
}
```
                    
クロージャは、それ自体が定義されている環境内にある定数や変数への参照を取り込んで、保存することができます。</string>
				<key>Title</key>
				<string>クロージャ</string>
			</dict>
		</dict>
		<key>code comment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コードコメントは、プログラマが自分のコードについて説明するためのものです。  “// これはコメントです”のように2つのスラッシュの後ろにスペースを入れることで、1行のコメントを開始できます。  プログラムの実行時にコードコメントは無視されます。</string>
				<key>Title</key>
				<string>コードコメント</string>
			</dict>
		</dict>
		<key>code expression</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>評価されて値を返すことができるコード。たとえば、`months`（月）が12個の項目を含む配列であれば、コード式`months.count - 1`は`11`という値を返します。</string>
				<key>Title</key>
				<string>コード式</string>
			</dict>
		</dict>
		<key>coding</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コマンド、コード構造、アルゴリズムを組み立ててアプリケーションを作ること。</string>
				<key>Title</key>
				<string>コーディング</string>
			</dict>
		</dict>
		<key>collection</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>複数のデータを入れるために使われる、配列やディクショナリなどのデータ構造。</string>
				<key>Title</key>
				<string>コレクション</string>
			</dict>
		</dict>
		<key>command</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>アプリケーションに特定の操作を実行することを命令するためのコード。</string>
				<key>Title</key>
				<string>コマンド</string>
			</dict>
		</dict>
		<key>comment out</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コード行を[コードコメント](glossary://code%20comment)に変えて実行されないようにすること。これを行うには、コード行の先頭に`//`を追加します。次に例を示します:
                
`// level.run()`</string>
				<key>Title</key>
				<string>コメントアウト</string>
			</dict>
		</dict>
		<key>comparison operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>2つの値を比較するための記号（`==`、`!=`、`&lt;`、`&gt;`、`&lt;=`、`&gt;=`など）。`if`文や`while`ループの条件として、比較の結果がブール値の`true`（真）であるかどうかを調べるためによく使われます。たとえば、`6 &gt; 8`では、`6`と`8`が比較されて、`false`（偽）が返されます。</string>
				<key>Title</key>
				<string>比較演算子</string>
			</dict>
		</dict>
		<key>compiler error</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コンパイラエラーは、コード内に正しくない記述が含まれていると起こります。左側の余白とツールバー内に赤い点で示されます。</string>
				<key>Title</key>
				<string>コンパイラエラー</string>
			</dict>
		</dict>
		<key>composed view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>1つ以上の[プリミティブ](glossary://primitive%20view)ビューまたは作成済みビューを組み合わせて作成された[ビュー](glossary://view)。
</string>
				<key>Title</key>
				<string>作成済みビュー</string>
			</dict>
		</dict>
		<key>composition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>アプリケーションの小さい部分を組み合わせて、扱いやすく、理解しやすい大きい部分を作る処理。</string>
				<key>Title</key>
				<string>コンポジション</string>
			</dict>
		</dict>
		<key>compound assignment operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>演算（足し算や引き算など）と代入（変数に値を設定する操作）を組み合わせた演算子。たとえば、`a`の値が`1`の場合、`a += 3`と書くと、`1`に`3`を足した結果が`a`に代入されて、`a`の値は`4`になります。</string>
				<key>Title</key>
				<string>複合代入演算子</string>
			</dict>
		</dict>
		<key>computed property</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>計算型（コンピューテッド）プロパティでは、値を直接保存するのではなく、取得時に関連するほかの値の現在の状態に基づいて値が計算されます。

以下の例では、areaは計算型プロパティで、`width`と`height`は保存型（ストアド）プロパティです:
```
struct RectangleCalculator { 
    var width = 10.0
    var height = 10.0
    
    var area : Double { 
        return width * height
    }
} 
```</string>
				<key>Title</key>
				<string>計算型プロパティ</string>
			</dict>
		</dict>
		<key>conditional code</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>指定した条件に当てはまるときにだけ実行されるコード。たとえば、`if`文や`while`ループ内のコードは、指定した条件が`true`（真）の場合または`true`（真）の間だけ実行されます。</string>
				<key>Title</key>
				<string>条件分岐コード</string>
			</dict>
		</dict>
		<key>conform</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>特定の型がそのプロトコルの要件を満たす独自の実装を提供する場合、その型はプロトコルに準拠していると言います。</string>
				<key>Title</key>
				<string>準拠</string>
			</dict>
		</dict>
		<key>constant</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>変更できない値を保存するための、名前の付いた入れ物。</string>
				<key>Title</key>
				<string>定数</string>
			</dict>
		</dict>
		<key>container</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コンテナは、中にほかのビューが入るビューで、[親ビュー](glossary://parent%20view)とも呼ばれます。</string>
				<key>Title</key>
				<string>コンテナ</string>
			</dict>
		</dict>
		<key>coordinates</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>空間内での位置を一意に決定する数の組。例えば、(100, -200)は2次元の空間内での点の座標で、x座標が100、y座標が-200です。</string>
				<key>Title</key>
				<string>座標</string>
			</dict>
		</dict>
		<key>data</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コンピュータによって処理または保存される情報。それに対して作用するコードとは別物です。</string>
				<key>Title</key>
				<string>データ</string>
			</dict>
		</dict>
		<key>debug</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>アプリケーションが正しく動かない原因となるコードのミスを見つけて直すこと。</string>
				<key>Title</key>
				<string>デバッグ</string>
			</dict>
		</dict>
		<key>declaration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>アプリケーション内に新しいもの（関数、変数、カスタム型など）を作るためのコード。例えば、`let planet = “Earth”`では、`planet`（宇宙）という名前の新しい定数が作られ、その値が`"Earth"`（地球）に設定されます。</string>
				<key>Title</key>
				<string>宣言</string>
			</dict>
		</dict>
		<key>decomposition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>大きい問題を、解きやすいように、いくつかの小さい部分に分けること。</string>
				<key>Title</key>
				<string>分解</string>
			</dict>
		</dict>
		<key>decrement</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>決まった整数値（多くの場合1）ずつ数を減らすこと。</string>
				<key>Title</key>
				<string>減らす（デクリメント）</string>
			</dict>
		</dict>
		<key>define</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>新しく作成したコード（関数、変数、カスタム型など）の値や動作を指定すること。たとえば、関数を定義するときは、その関数で実行する操作を示す一連のコマンドを指定します。</string>
				<key>Title</key>
				<string>定義</string>
			</dict>
		</dict>
		<key>dot notation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>プロパティを取り出すときや、インスタンスのメソッドを呼び出すときに使う構文。たとえば、`expert.toggleSwitch()`では、`expert`（エキスパート）インスタンスの`toggleSwitch()`（スイッチを切り替える）メソッドが呼び出されます。</string>
				<key>Title</key>
				<string>ドット表記</string>
			</dict>
		</dict>
		<key>efficiency</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コードがどのくらい、意図された目的をできるだけ少ないリソース（メモリや電力など）ですばやく実行できるかの尺度。</string>
				<key>Title</key>
				<string>効率</string>
			</dict>
		</dict>
		<key>else block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`if`文に含まれる最後のコードブロック。`if`文に含まれるすべての条件が`false`（偽）の場合に実行されます。</string>
				<key>Title</key>
				<string>elseブロック</string>
			</dict>
		</dict>
		<key>else if block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`if`文で、`if`ブロックと前の`else if`ブロック（ある場合）で調べられなかった条件を調べるためのコードブロック。</string>
				<key>Title</key>
				<string>else ifブロック</string>
			</dict>
		</dict>
		<key>enumeration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>同じ仲間の異なる値（列挙ケース）を定義するための型。たとえば、`Direction`（方向）という列挙は、基本的な方位である`north`（北）、`south`（南）、`east`（東）、`west`（西）の4つのケースを定義しています。変数や定数に列挙を代入するときは、その中のケースを1つだけ選びます。たとえば、`let compassDirection: Direction = .north`のように書きます。</string>
				<key>Title</key>
				<string>列挙</string>
			</dict>
		</dict>
		<key>environment object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`@EnvironmentObject`[プロパティラッパー](glossary://property%20wrapper)を追加して、親ビューまたは祖先ビューによって提供されるオブザーバブル・オブジェクト・プロパティを宣言します。プロパティを環境オブジェクトとして宣言する場合は、`environmentObject(_:)`修飾子を呼び出して、対応するモデルインスタンスを祖先ビューに設定してください。</string>
				<key>Title</key>
				<string>環境オブジェクト</string>
			</dict>
		</dict>
		<key>event</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コンピュータアプリケーションが検出できる操作。ボタンの押下や画面の回転などの入力によってイベントが発生します。</string>
				<key>Title</key>
				<string>イベント</string>
			</dict>
		</dict>
		<key>event handler</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>イベントが起きた後、そのイベントを処理するために呼び出される関数。</string>
				<key>Title</key>
				<string>イベントハンドラ</string>
			</dict>
		</dict>
		<key>filtering</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コレクションまたはデータ構造に含まれるデータを処理して、データの新しいセットを作り出すこと。</string>
				<key>Title</key>
				<string>フィルタリング</string>
			</dict>
		</dict>
		<key>font</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>特定のデザインスタイル、太さ、サイズのテキスト文字セット。フォントのデザインスタイルは書体と呼ばれ、このデザインのバリエーションが集まって書体ファミリーになります。たとえば、HelveticaNeueは書体であり、10ポイントのHelveticaNeue-Boldはフォントです。</string>
				<key>Title</key>
				<string>フォント</string>
			</dict>
		</dict>
		<key>for loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>特定の回数だけ繰り返し実行されるコードブロック。</string>
				<key>Title</key>
				<string>forループ</string>
			</dict>
		</dict>
		<key>full function name</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>関数の完全な名前。`move(to:duration:)`のように、コロン（`:`）で区切られたパラメータの名前が含まれます。</string>
				<key>Title</key>
				<string>完全な関数名</string>
			</dict>
		</dict>
		<key>function</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>必要なときにすばやく実行できるように、一連の[コマンド](glossary://command)に名前を付けたもの。</string>
				<key>Title</key>
				<string>関数</string>
			</dict>
		</dict>
		<key>function definition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>関数の定義には、その関数が何を行うか、何を受け取る必要があるか、完了時に何を返すかを記述します。</string>
				<key>Title</key>
				<string>関数の定義</string>
			</dict>
		</dict>
		<key>global function</key>
		<dict>
			<key>FirstUse</key>
			<dict>
				<key>PageReference</key>
				<string></string>
				<key>_LOCALIZABLE_</key>
				<dict>
					<key>Title</key>
					<string></string>
				</dict>
			</dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>プロジェクト内のどのファイルからでもアクセスできる関数。</string>
				<key>Title</key>
				<string>グローバル関数</string>
			</dict>
		</dict>
		<key>global variable</key>
		<dict>
			<key>FirstUse</key>
			<dict>
				<key>PageReference</key>
				<string></string>
				<key>_LOCALIZABLE_</key>
				<dict>
					<key>Title</key>
					<string></string>
				</dict>
			</dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>プロジェクト内のどのファイルからでもアクセスできる変数。</string>
				<key>Title</key>
				<string>グローバル変数</string>
			</dict>
		</dict>
		<key>grayscale</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>白から黒までのグレイの濃淡の範囲。</string>
				<key>Title</key>
				<string>グレイスケール</string>
			</dict>
		</dict>
		<key>gyroscope</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>デバイスの向きを、前から後ろへの傾き、左から右への傾き、中心を基準にした回転の3次元で測定するセンサー。</string>
				<key>Title</key>
				<string>ジャイロスコープ</string>
			</dict>
		</dict>
		<key>hertz</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ヘルツ（Hz）は1秒間に1回のサイクルを意味し、音の振動の文脈では、1 Hzは1秒間に1回振動する音波のことを表します。人間は20 Hzから16,000 Hzの音を聞き取れます。</string>
				<key>Title</key>
				<string>ヘルツ</string>
			</dict>
		</dict>
		<key>hue</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>カラーホイール上の色の色調。`0`から`1`までのDouble（倍精度浮動小数）です。</string>
				<key>Title</key>
				<string>色相</string>
			</dict>
		</dict>
		<key>if block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`if`文に含まれる最初のコードブロック。`if`文の条件が`true`（真）の場合に実行されます。</string>
				<key>Title</key>
				<string>ifブロック</string>
			</dict>
		</dict>
		<key>if statement</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>1つ以上の条件によってコードを実行するかどうかを決めるためのコード構造。`if`文内の最初のコードブロックを、`if`ブロックといいます。`if`文には、追加の条件を調べるための`else if`ブロックや、`else`ブロックが含まれることもあります。</string>
				<key>Title</key>
				<string>if文</string>
			</dict>
		</dict>
		<key>increment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>決まった整数値（多くの場合1）ずつ数を増やすこと。</string>
				<key>Title</key>
				<string>増やす（インクリメント）</string>
			</dict>
		</dict>
		<key>index</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[配列](glossary://array)内での各項目の位置を示す番号。</string>
				<key>Title</key>
				<string>インデックス</string>
			</dict>
		</dict>
		<key>index out of range error</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>配列の範囲を超えるインデックスを使って配列内の項目を取り出そうとするときに起こるエラー。たとえば、`[17, 42]`という配列では、インデックス`2`は範囲外になります。</string>
				<key>Title</key>
				<string>インデックスの範囲外エラー</string>
			</dict>
		</dict>
		<key>initialization</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>特定の型の新しいインスタンスを作ること。同時に、その型のプロパティに初期値を設定することもあります。</string>
				<key>Title</key>
				<string>初期化</string>
			</dict>
		</dict>
		<key>initializer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>初期化子は、特定の型の新しい[インスタンス](glossary://instance)を作成するために呼び出されます。初期化子では、その型のプロパティのすべての初期値を設定する必要があり、ほかの設定コードが含まれることもよくあります。</string>
				<key>Title</key>
				<string>初期化子</string>
			</dict>
		</dict>
		<key>inner loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>別の（外側の）ループ（繰り返し実行されるコードブロック）に含まれるループ。</string>
				<key>Title</key>
				<string>内側のループ</string>
			</dict>
		</dict>
		<key>instance</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>特定の[型](glossary://type)の値。たとえば`let motion = MotionSensor()`では、`motion`（モーション）は`MotionSensor`（モーションセンサー）型のインスタンスです。</string>
				<key>Title</key>
				<string>インスタンス</string>
			</dict>
		</dict>
		<key>iteration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>特定の処理を繰り返すこと。たとえば、配列内の各項目に同じ操作をするなどです。</string>
				<key>Title</key>
				<string>反復処理</string>
			</dict>
		</dict>
		<key>lag</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>処理要求、処理能力、またはその両方の結果としてAppの速度や応答性が低下すること。</string>
				<key>Title</key>
				<string>lag</string>
			</dict>
		</dict>
		<key>leading edge</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ビュー内のコンテンツに関連して使用される場合、先頭のエッジとは、コンテンツの横方向の開始位置のことをいいます。先頭のエッジの位置は環境設定によって異なり、通常は地域と言語に基づきます。
                    例えば、英語やオランダ語のように左から右へと読む言語では、先頭のエッジは左側です。アラビア語やヘブライ語のように右から左へと読む言語では、先頭のエッジは右側です。</string>
				<key>Title</key>
				<string>先頭のエッジ</string>
			</dict>
		</dict>
		<key>literal</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>リテラルでは、イメージライブラリやカラーピッカーを使ってイメージやカラーを直接コードに埋め込むことができます。リテラルはデータの実際の値をそのまま表したもので、エディタ内で直接記述されます。</string>
				<key>Title</key>
				<string>リテラル</string>
			</dict>
		</dict>
		<key>logical AND operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>2つのブール値が両方とも`true`（真）であれば全体を`true`とみなすための記号（`&amp;&amp;`）。たとえば、`a &amp;&amp; b`は、`a`と`b`の両方が`true`の場合にのみ、`true`になります。</string>
				<key>Title</key>
				<string>論理AND演算子</string>
			</dict>
		</dict>
		<key>logical NOT operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コードのブール値を逆にするための記号（`!`）。たとえば、`a`が`true`（真）の場合、`!a`は`false`（偽）になります。</string>
				<key>Title</key>
				<string>論理NOT演算子</string>
			</dict>
		</dict>
		<key>logical OR operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>2つのブール値の少なくとも一方がtrue（真）であれば全体をtrueとみなすための記号（||）。たとえば`a || b`は、`a`または`b`のどちらか（あるいは両方）が`true`であれば、`true`になります。</string>
				<key>Title</key>
				<string>論理OR演算子</string>
			</dict>
		</dict>
		<key>logical operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ブール論理値である`true`（真）と`false`（偽）を逆にしたり組み合わせたりするための記号（`&amp;&amp;`、`||`、`!`など）。</string>
				<key>Title</key>
				<string>論理演算子</string>
			</dict>
		</dict>
		<key>loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>特定の回数だけ繰り返し実行されるコードブロック（`for`ループなど）、または、条件が当てはまる間は繰り返し実行されるコードブロック（`while`ループなど）。</string>
				<key>Title</key>
				<string>ループ</string>
			</dict>
		</dict>
		<key>memory</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>アプリケーションのコードとそこで使われるデータが一時的または恒久的に保存されるコンピュータの部分。</string>
				<key>Title</key>
				<string>メモリ</string>
			</dict>
		</dict>
		<key>method</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[型](glossary://type)によって定義された関数（一連のコマンド）。</string>
				<key>Title</key>
				<string>メソッド</string>
			</dict>
		</dict>
		<key>modifier</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>SwiftUIでは、修飾子はビューの外観または動作を変更するためにビューで呼び出される[メソッド](glossary://method)です。読みやすくするために、修飾子はビューの[インスタンス](glossary://instance)の下に、1つにつき1行で記述します。</string>
				<key>Title</key>
				<string>修飾キー</string>
			</dict>
		</dict>
		<key>modulo operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>1つの値を別の値で割った後の余りを返す記号（`%`）。たとえば、`17 % 5`は`2`を返します。</string>
				<key>Title</key>
				<string>モジュロ演算子</string>
			</dict>
		</dict>
		<key>navigation bar</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>移動先に到達するまで1画面につき1つを選択できるナビゲーションインターフェイス。別の移動先に移動するには、それまでのステップを引き返すか、最初からやり直して、別の選択をする必要があります。画面の上部にあるナビゲーションバーには、現在の位置が分かるようにタイトルが表示され、戻るボタンが表示されるので、前の画面に戻ることができます。</string>
				<key>Title</key>
				<string>ナビゲーションバー</string>
			</dict>
		</dict>
		<key>nest</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>繰り返し実行されるコードブロック（ループなど）の中に別のコードブロックを入れること。</string>
				<key>Title</key>
				<string>ネスト</string>
			</dict>
		</dict>
		<key>observable object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>クラスが`ObservableObject`プロトコルに[準拠](glossary://conform)している場合、公開値が変わると、それらの値を使用しているすべてのビューが自動的にアップデートされて、変更が反映されます。</string>
				<key>Title</key>
				<string>オブザーバブルオブジェクト</string>
			</dict>
		</dict>
		<key>observed object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>クラスが`ObservableObject`プロトコルに[準拠](glossary://conform)している場合、公開値の1つが変わると、その値を使用しているすべてのビューが自動的にアップデートされて、変更が反映されます。</string>
				<key>Title</key>
				<string>オブザーバブルオブジェクト</string>
			</dict>
		</dict>
		<key>observer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[オブザーバブルオブジェクト](glossary://observable%20object)に関する場合、オブザーバはオブザーバブルオブジェクトのデータを使用するビューまたはオブジェクトです。オブザーバブルオブジェクトのデータが変わると、SwiftUIによって変更が認識され、アップデートするようにオブザーバに指示されます。</string>
				<key>Title</key>
				<string>オブザーバ</string>
			</dict>
		</dict>
		<key>operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>1つ以上の値を使って操作を行うための記号（`+`、`-`、`&amp;&amp;`など）。たとえば、`1 + 2`では、加算演算子（`+`）によって、数字の`1`と`2`が足し算されます。</string>
				<key>Title</key>
				<string>演算子</string>
			</dict>
		</dict>
		<key>outer loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>別の（内側の）ループ（繰り返し実行されるコードブロック）を含むループ。</string>
				<key>Title</key>
				<string>外側のループ</string>
			</dict>
		</dict>
		<key>parameter</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>関数の定義で使われる、関数に指定する入力値の名前。たとえば、`move(distance: Int)`では、`distance`（距離）が、Int（整数）型の値を受け取るパラメータになります。</string>
				<key>Title</key>
				<string>パラメータ</string>
			</dict>
		</dict>
		<key>parent view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>1つ以上の[子ビュー](glossary://child%20view)のコンテナとなるビュー。</string>
				<key>Title</key>
				<string>親ビュー</string>
			</dict>
		</dict>
		<key>pattern</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>一連の状況やデータの繰り返し。</string>
				<key>Title</key>
				<string>パターン</string>
			</dict>
		</dict>
		<key>pitch</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>音楽では、ピッチは音の高さを意味します。主に音の振動数で決まり、[ヘルツ（Hz）](glossary://hertz)で測れます。ピッチが高い（〜2000 Hz）とホイッスルのような高音になり、ピッチが低い（〜40 Hz）と牛の鳴き声のような低音になります。</string>
				<key>Title</key>
				<string>ピッチ</string>
			</dict>
		</dict>
		<key>primitive</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>SwiftUIなどのプログラミングフレームワークに関する場合、プリミティブは、より複雑な動作または[インターフェイス](glossary://user%20interface)を作成するためにフレームワークに用意されている構成要素です。
</string>
				<key>Title</key>
				<string>プリミティブ</string>
			</dict>
		</dict>
		<key>primitive view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[SwiftUI](glossary://SwiftUI)フレームワークに用意されている、`Button`、`Text`、`Image`などの[ビュー](glossary://view)。プリミティブビューは、より複雑な[作成済みビュー](glossary://composed%20view)を[ユーザインターフェイス](glossary://user%20interface)に作成するための構築要素として使用されます。</string>
				<key>Title</key>
				<string>プリミティブビュー</string>
			</dict>
		</dict>
		<key>private</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>privateキーワードを使用した場合は、コードはその特定のソースファイルでのみ利用できます。
- callout(例):
`private class MyApp: App { }`</string>
				<key>Title</key>
				<string>private</string>
			</dict>
		</dict>
		<key>property</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>型によって定義された変数（値を保存するための、名前の付いた入れ物）。</string>
				<key>Title</key>
				<string>プロパティ</string>
			</dict>
		</dict>
		<key>property wrapper</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>プロパティラッパーは、動作の一般的なパターンをプロパティに適用するための簡単な手段です。このラッパーは、プロパティがどのように保存されるか、または読み込み時に計算されるかの定義を注釈付けする1つの方法です。  例えば、`@State`プロパティラッパーは、格納されている値を管理するように、および値が変わったらその値を使用しているビューの部分をアップデートするようにSwiftUIに指示します。</string>
				<key>Title</key>
				<string>プロパティラッパー</string>
			</dict>
		</dict>
		<key>protocol</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>クラス、構造体、列挙などの型で適用できる（従う）メソッドやプロパティなどの一連の要件。  型でプロトコルを適用すると、その型独自のプロトコル要件の実装が提供され、その型はそのプロトコルに準拠していると言われます。</string>
				<key>Title</key>
				<string>プロトコル</string>
			</dict>
		</dict>
		<key>pseudocode</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>アルゴリズムを読みやすく説明したもの。たいていは、ふだん使う言葉とコードの両方を組み合わせて書きます。</string>
				<key>Title</key>
				<string>疑似コード</string>
			</dict>
		</dict>
		<key>public</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>publicキーワードを使用した場合は、コードはプロジェクト内の任意のファイルで利用できます。
                        
 - callout(例):
`public func decorateWithSticker(space: Space) { }`
                    </string>
				<key>Title</key>
				<string>public</string>
			</dict>
		</dict>
		<key>published value</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`@Published`[プロパティラッパー](glossary://property%20wrapper)を追加して、値が変わる直前にすべての[オブザーバ](glossary://observer)に通知するプロパティを宣言します。値が変わると、そのデータを使用するすべてのビューがSwiftUIによってアップデートされます。</string>
				<key>Title</key>
				<string>公開値</string>
			</dict>
		</dict>
		<key>return type</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>関数を定義するときに、必要に応じて、関数が完了時に出力として返す値の型（戻り値の型といいます）を定義できます。</string>
				<key>Title</key>
				<string>戻り値の型</string>
			</dict>
		</dict>
		<key>reusability</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>アプリケーション内のさまざまな場所で利用できるというコードの特性。</string>
				<key>Title</key>
				<string>再利用可能</string>
			</dict>
		</dict>
		<key>root view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>その他のすべてのビューが置かれるビュー。このビューは[最上位ビュー](glossary://top-level%20view)とも呼ばれ、[ビュー階層](glossary://view%20hierarchy)の一番上にあり、階層内のすべての[子ビュー](glossary://child%20view)に対する[親ビュー](glossary://parent%20view)の役割を果たします。</string>
				<key>Title</key>
				<string>ルートビュー</string>
			</dict>
		</dict>
		<key>saturation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>鮮やかさの尺度。最小値は無彩色で、最大値は純色です。彩度は`0`から`1`までのDouble（倍精度浮動小数）です。</string>
				<key>Title</key>
				<string>彩度</string>
			</dict>
		</dict>
		<key>sensor</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>事象（熱、光、音、動きなどの変化）を感知して値を返す装置。</string>
				<key>Title</key>
				<string>センサー</string>
			</dict>
		</dict>
		<key>source of truth</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Appの作成において、すべてのデータが変更される唯一の場所。ほかの場所で情報が重複しないように、このデータへのほかのすべての接続はすべて参照専用になります。</string>
				<key>Title</key>
				<string>信頼できる情報源</string>
			</dict>
		</dict>
		<key>speech synthesis</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>人間の声に似たサウンドをコンピュータが作ること。通常はテキストから生成されます。</string>
				<key>Title</key>
				<string>音声合成</string>
			</dict>
		</dict>
		<key>state</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>変数、アプリケーション、またはシステムに、特定の時点で保存されている情報。</string>
				<key>Title</key>
				<string>状態</string>
			</dict>
		</dict>
		<key>state object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>StateObject`[プロパティラッパー](glossary://property%20wrapper)を追加して、状態オブジェクトを宣言し、`ObservableObject`[プロトコル](glossary://protocol)に準拠する初期値を提供します。SwiftUIによって、状態オブジェクトに格納されている値が管理され、公開値が変わるたびに、その値を使用するすべてのサブビューがアップデートされます。</string>
				<key>Title</key>
				<string>状態オブジェクト</string>
			</dict>
		</dict>
		<key>state value</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>変数の前に`@State`を追加して、格納されている値を管理するようにSwiftUIに指示します。値が変わると、その値を使用するビューのすべての部分がSwiftUIによってアップデートされます。</string>
				<key>Title</key>
				<string>状態値</string>
			</dict>
		</dict>
		<key>statement</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>アプリケーションのコードを分類するための構造（ループや`if`文など）。</string>
				<key>Title</key>
				<string>命令文</string>
			</dict>
		</dict>
		<key>string component</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>文字列を区切り文字で複数の部分に分割した後の各部分（部分文字列）。たとえば、文字列`"dog+cat+fish"`を区切り文字`"+"`で分割した場合、その構成要素は`"dog"`、`"cat"`、`"fish"`という文字列になります。</string>
				<key>Title</key>
				<string>文字列コンポーネント</string>
			</dict>
		</dict>
		<key>string concatenation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>1つの文字列を別の文字列の最後に追加して文字列を結合する操作。たとえば、`"foot"`と`"ball"`を連結すると`"football"`になります。</string>
				<key>Title</key>
				<string>文字列結合</string>
			</dict>
		</dict>
		<key>string interpolation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>長い文字列の中で、その文字列を評価したときに現在の値に置き換わる定数、変数、またはコード式を使用すること。たとえば、文字列`"Katy ate a \(fruit)."`で`fruit`（果物）が`"peach"`（桃）という値を持つ変数の場合、文字列が評価されると`\(fruit)`が`"peach"`に置き換わり、`"Katy ate a peach."`（ケイティは桃を食べた）になります。</string>
				<key>Title</key>
				<string>文字列補間</string>
			</dict>
		</dict>
		<key>syntax</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コンピュータが理解して実行できるようにコードを書くための規則。</string>
				<key>Title</key>
				<string>構文</string>
			</dict>
		</dict>
		<key>top-level view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>その他のすべてのビューが置かれるビュー。このビューは[ルートビュー](glossary://root%20view)とも呼ばれ、[ビュー階層](glossary://view%20hierarchy)の一番上にあり、階層内のすべての[子ビュー](glossary://child%20view)に対する[親ビュー](glossary://parent%20view)の役割を果たします。</string>
				<key>Title</key>
				<string>最上位ビュー</string>
			</dict>
		</dict>
		<key>trailing edge</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ビュー内のコンテンツに関連して使用される場合、末尾のエッジとは、コンテンツの横方向の終了位置のことをいいます。末尾のエッジの位置は環境設定によって異なり、通常は地域と言語に基づきます。
                    例えば、英語やオランダ語のように左から右へと読む言語では、末尾のエッジは右側です。アラビア語やヘブライ語のように右から左へと読む言語では、末尾のエッジは左側です。</string>
				<key>Title</key>
				<string>末尾のエッジ</string>
			</dict>
		</dict>
		<key>type</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>プロパティ（特徴）とメソッド（動作）によってデータの種類を分けるための、名前の付いたグループ。</string>
				<key>Title</key>
				<string>型</string>
			</dict>
		</dict>
		<key>typography</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>書かれた言語が表示されたときに見やすく、読みやすく、魅力的にするために活字を整える技術とテクニック。</string>
				<key>Title</key>
				<string>タイポグラフィ</string>
			</dict>
		</dict>
		<key>user input</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>画面をタッチしたり、キーボードでテキストを入力したり、マイクに向かって話したりなど、アプリケーションがユーザ操作から取得する情報。
</string>
				<key>Title</key>
				<string>ユーザ入力</string>
			</dict>
		</dict>
		<key>user interface</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ユーザがAppを操作する手段。“UI”とも呼ばれます。この用語は多くの場合、ユーザがイメージ、テキスト、ボタン、スライダ、スクロールビューなどの要素を使って操作するAppの仮想的な部分のことをいいます。</string>
				<key>Title</key>
				<string>ユーザインターフェイス</string>
			</dict>
		</dict>
		<key>variable</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>変更できる値を保存するための、名前の付いた入れ物。</string>
				<key>Title</key>
				<string>変数</string>
			</dict>
		</dict>
		<key>velocity</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>あるものの速さと方向です。</string>
				<key>Title</key>
				<string>速度</string>
			</dict>
		</dict>
		<key>view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ビューは、Appのユーザインターフェイスの構築要素で、`View`[プロトコル](glossary://protocol)に[準拠](glossary://conform)する視覚的な要素を示します。

SwiftUIのビューの一例として、テキストビュー、イメージビュー、スライダ、グリッド、ボタン、図形があります。</string>
				<key>Title</key>
				<string>ビュー</string>
			</dict>
		</dict>
		<key>view hierarchy</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ほかのビューに対する相対的なビューのレイアウトを定義する構造。階層の一番上にある最上位ビューのインスタンスへの参照を伴います。最上位ビューにはいくつでもサブビューを含めることができます。それぞれのサブビューにはそのサブビューを含めることができ、以下同様に続きます。</string>
				<key>Title</key>
				<string>ビュー階層</string>
			</dict>
		</dict>
		<key>volume</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[センサー](glossary://sensor)が感知した音の大きさ。0から1の値を取ります。</string>
				<key>Title</key>
				<string>音量</string>
			</dict>
		</dict>
		<key>while loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>指定した条件が`true`（真）になる間は繰り返し実行されるコードブロック。条件が`false`（偽）に変わると、ループの実行は終了します。</string>
				<key>Title</key>
				<string>whileループ</string>
			</dict>
		</dict>
		<key>wireframe</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ステージ内のアイテム（宝石、スイッチ、ブロックなど）の輪郭。実行するたびにランダムに置かれるアイテムが現れる可能性のある場所を示すために使われます。</string>
				<key>Title</key>
				<string>ワイヤフレーム</string>
			</dict>
		</dict>
	</dict>
</dict>
</plist>
