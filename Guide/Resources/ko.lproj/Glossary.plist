<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Terms</key>
	<dict>
		<key>Alpha</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>알파(투명) 또는 *알파 채널* 값은 색상의 불투명도를 말합니다. `0`은 완전히 투명한 상태이며 `1`은 완전히 불투명한 상태입니다. 이 알파 데이터는 0과 1 사이의 Double(소수점) 값입니다.</string>
				<key>Title</key>
				<string>알파(투명)</string>
			</dict>
		</dict>
		<key>Boolean</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`true(참)` 또는 `false(거짓)` 값을 가지는 유형입니다. 예를 들어, `9 &lt; 7`은 `false(거짓)`라는 불리언 값을 반환합니다. `9`는 `7`보다 작지 않기 때문이죠.</string>
				<key>Title</key>
				<string>불리언</string>
			</dict>
		</dict>
		<key>Double</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>3.14와 같이 소수점이 있는 숫자를 저장하는 유형입니다.</string>
				<key>Title</key>
				<string>Double</string>
			</dict>
		</dict>
		<key>Int</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`10` 또는 `-42`와 같은 정수를 저장하는 유형입니다.</string>
				<key>Title</key>
				<string>Int</string>
			</dict>
		</dict>
		<key>String</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`"헬로우 월드"` 또는 `"춤추는 고양이"`와 같은 일련의 문자를 저장하는 유형입니다.</string>
				<key>Title</key>
				<string>String</string>
			</dict>
		</dict>
		<key>Swift</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Apple의 프로그래밍 언어로서 iPhone, iPad, Mac, Apple Watch, Apple TV용 앱을 만드는 데 사용됩니다.</string>
				<key>Title</key>
				<string>Swift</string>
			</dict>
		</dict>
		<key>SwiftUI</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>SwiftUI는 모든 Apple 플랫폼에서 사용자 인터페이스를 선언하는 혁신적인 방법입니다. SwiftUI는 사용자가 앱의 사용자 인터페이스를 선언할 수 있도록 보기, 제어 및 레이아웃 구조를 제공합니다. 이 프레임워크는 탭, 제스처 및 그 외 유형의 입력을 앱에 전달하는 이벤트 핸들러와 앱 모델에서 사용자가 보고 상호 작용할 보기 및 제어에 이르기까지 데이터 플로우를 관리하는 도구를 제공합니다.</string>
				<key>Title</key>
				<string>SwiftUI</string>
			</dict>
		</dict>
		<key>absolute value</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>부호가 없는 값을 가진 수입니다. 예를 들어, -12의 절대값은 12고 23.4의 절대값은 23.4입니다.</string>
				<key>Title</key>
				<string>절대값</string>
			</dict>
		</dict>
		<key>abstraction</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>더 복잡한 객체의 단순화 버전입니다.   추상화는 세부 사항을 가려서 더욱 쉽게 코드를 생각하고 결합할 수 있게 해줍니다.   예를 들어, [유형](glossary://type)은 해당 유형의 인스턴스에 있는 설정, 속성 및 메소드를 가리는 추상화입니다.</string>
				<key>Title</key>
				<string>추상화</string>
			</dict>
		</dict>
		<key>accelerometer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>사용자 기기의 가속도를 상하, 전후, 좌우의 3차원으로 측정하는 센서입니다.</string>
				<key>Title</key>
				<string>가속도계</string>
			</dict>
		</dict>
		<key>adopt</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>프로토콜을 채택하기 위해 유형은 열거형 메소드 및 속성과 같은 프로토콜 요구사항을 위한 구현 세트를 제공합니다.</string>
				<key>Title</key>
				<string>채택</string>
			</dict>
		</dict>
		<key>algorithm</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>문제 해결을 위한 단계별 지침 또는 규칙 세트입니다. 예를 들어, 차 한 잔을 끓이는 단계도 알고리즘이라 할 수 있죠.</string>
				<key>Title</key>
				<string>알고리즘</string>
			</dict>
		</dict>
		<key>append</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>항목의 마지막에 원하는 항목을 추가합니다. 예를 들어, 문자열의 끝에 문자열 하나를 추가하거나 항목의 배열에 항목 하나를 추가할 수 있습니다.
</string>
				<key>Title</key>
				<string>추가</string>
			</dict>
		</dict>
		<key>application</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>코드로 구성된 소프트웨어로 특정 작업을 수행할 수 있습니다. 예를 들어 메시지 응용 프로그램(앱)을 사용하면 메시지를 주고 받을 수 있습니다.</string>
				<key>Title</key>
				<string>응용 프로그램</string>
			</dict>
		</dict>
		<key>argument</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>함수에 전달되어 함수의 동작을 수정하는 입력 값입니다. 예를 들어, `move(distance: 3)`이라는 함수에서 숫자 `3`은 움직여야하는 공간을 지정하는 인수입니다.</string>
				<key>Title</key>
				<string>인수</string>
			</dict>
		</dict>
		<key>arithmetic operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>한 개 이상의 숫자에 기본적인 사칙 연산을 수행하는 `+`, `-`, `*`, `/`와 같은 기호입니다. 예를 들어, `42 / 7`과 `17 - 5`는 산술 연산자를 사용하고 있습니다.</string>
				<key>Title</key>
				<string>산술 연산자</string>
			</dict>
		</dict>
		<key>array</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>동일한 유형의 항목을 순서대로 정리한 목록을 저장하는 모음입니다. 같은 항목은 다른 위치에 여러 번 나타날 수 있습니다. 예를 들어, `highScores = [37, 34, 29, 29, 26]`은 [Int](glossary://Int) 배열입니다.</string>
				<key>Title</key>
				<string>배열</string>
			</dict>
		</dict>
		<key>asset</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>항목은 사용자 앱에서 사용되는 이미지, 사운드 및 그 외 아이템입니다. 파일 및 사진 앱과 같은 다른 앱의 항목을 Swift Playgrounds로 가져올 수 있습니다.</string>
				<key>Title</key>
				<string>항목</string>
			</dict>
		</dict>
		<key>assignment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>변수 또는 상수의 값을 설정하는 동작입니다.</string>
				<key>Title</key>
				<string>할당</string>
			</dict>
		</dict>
		<key>assignment operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`=` 기호는 변수 값을 설정하는 데 사용됩니다. 예를 들어, `greeting = "hello"`는 `greeting`의 값을 `"hello"`로 설정합니다.</string>
				<key>Title</key>
				<string>할당 연산자</string>
			</dict>
		</dict>
		<key>asynchronous process</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>앱 또는 프로그램의 나머지 부분이 실행되는 동안 실행될 수 있는 코드 블록입니다. 완료될 때까지 프로그램 실행을 차단하는 동기식 프로세스와는 달리, 비동기식 프로세스는 앱 코드의 나머지 부분과 동시에 실행될 수 있습니다.</string>
				<key>Title</key>
				<string>비동기 프로세스</string>
			</dict>
		</dict>
		<key>binding</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>데이터를 저장하는 속성과 데이터를 표시하고 변경하는 보기 간에 양방향 연결을 생성하려면 `@Binding` [속성 래퍼](glossary://property%20wrapper)를 추가하세요. 바인딩은 데이터를 직접 저장하는 대신 속성을 다른 곳에 저장된 진실 공급원(SOT)에 연결합니다. 

예를 들어, 재생과 일시 정지를 토글하는 버튼은 `@Binding` 속성 래퍼를 사용하여 상위 보기의 속성에 대한 바인딩을 생성할 수 있습니다. 
</string>
				<key>Title</key>
				<string>바인딩</string>
			</dict>
		</dict>
		<key>body</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[보기](glossary://view)의 본문은 Swift가 제공하는 하나 이상의 [기본 보기](glossary://primitive%20view)로 구성된 보기 콘텐츠를 제공하는 곳입니다. SwiftUI는 사용자가 작성한 [구성된 보기](glossary://composed%20view)를 제공합니다.</string>
				<key>Title</key>
				<string>본문</string>
			</dict>
		</dict>
		<key>bounds</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>배열에서 인덱스가 가질 수 있는 값의 범위를 뜻합니다. 예를 들어, `[17, 42, 95]` 배열의 인덱스 값의 범위는 0에서 2입니다. 범위 확인은 인덱스 값이 배열 범위 내에 있는지 확인하는 작업입니다.</string>
				<key>Title</key>
				<string>범위</string>
			</dict>
		</dict>
		<key>brightness</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>카메라에 들어오는 빛의 양입니다. `0`은 빛이 완전히 들어오지 않는 상태이며 `1`은 빛이 완전히 들어오는 상태입니다. 이 밝기 데이터는 `0`과 `1` 사이의 [Double](glossary://Double)(소수점) 값입니다.</string>
				<key>Title</key>
				<string>밝기</string>
			</dict>
		</dict>
		<key>bug</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>코드에 있는 오류 때문에 응용 프로그램이 제대로 실행되지 않는 문제입니다. 
</string>
				<key>Title</key>
				<string>버그</string>
			</dict>
		</dict>
		<key>bundle</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>디스크 상의 번들 디렉터리에 저장된 코드 및 리소스를 표시한 것입니다. 번들은 포함된 리소스를 잘 정의된 하위 디렉터리로 구성하며 번들 구조는 플랫폼 및 번들의 유형에 따라 다릅니다. 번들 객체를 사용하면 번들 구조에 대해 알지 못해도 번들 리소스에 접근할 수 있습니다.</string>
				<key>Title</key>
				<string>번들</string>
			</dict>
		</dict>
		<key>call</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>코드 내의 함수를 호출하는 것은 해당 함수를 실행하여 함수 내에 정의된 동작을 수행하도록 지시하는 것입니다.</string>
				<key>Title</key>
				<string>호출</string>
			</dict>
		</dict>
		<key>child view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[상위 보기](glossary://parent%20view)에 포함된 보기입니다. 상위 보기는 여러 개의 하위 보기를 포함할 수 있으며, 각 하위 보기는 또 다른 하위 보기를 포함할 수 있습니다. 보기와 포함된 모든 하위 항목은 [보기 계층](glossary://view%20hierarchy)을 구성합니다.</string>
				<key>Title</key>
				<string>하위 보기</string>
			</dict>
		</dict>
		<key>class</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>클래스는 동일한 유형의 항목 복사본을 여러 개 만들 때 청사진으로 동작하는 코드의 컨테이너입니다. 청사진이 자전거와 같은 객체의 기능과 동작을 정의하듯, 클래스는 이를 [속성](glossary://property) 및 [메소드](glossary://method)로 정의합니다.

클래스의 [인스턴스](glossary://instance)나 새로운 복사본을 만들 때 해당 인스턴스에는 청사진의 모든 속성과 메소드가 포함됩니다. 하지만 각 인스턴스의 값을 독립적으로 변경하고 각 복사본이 동작하는 방식을 변경할 수 있습니다. 예를 들어 자전거 클래스에 색상 속성이 있으면 빨간색 자전거와 파란색 자전거 모두 만들 수 있습니다.</string>
				<key>Title</key>
				<string>클래스</string>
			</dict>
		</dict>
		<key>closure</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>클로저는 이름 없이 해당 위치에서 실행할 수 있는 [함수](glossary://function)입니다.
					
```
scene.setOnStartHandler {
    // 클로저의 본문
}
```
                    
클로저는 모든 상수와 변수가 정의된 컨텍스트에서 해당 값에 대한 참조를 캡처하고 저장할 수 있습니다. 이것을 해당 상수와 변수에 대한 클로징이라고 합니다.</string>
				<key>Title</key>
				<string>클로저</string>
			</dict>
		</dict>
		<key>code comment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>코드 주석은 프로그래머가 코드를 문서화하는 하나의 방법이에요.   예를 들어 '// 나의 주석입니다.'와 같이 두 개의 슬래시와 하나의 공백 뒤에 한 줄의 주석을 작성할 수 있어요.   코드를 실행할 때 코드 주석은 실행되지 않습니다.</string>
				<key>Title</key>
				<string>코드 주석</string>
			</dict>
		</dict>
		<key>code expression</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>값을 반환하도록 선택할 수 있는 코드입니다. 예를 들어, 12개의 항목을 포함하는 `months`가 있다면, 코드 표현식인 `months.count - 1`은 `11`이라는 값을 반환합니다.</string>
				<key>Title</key>
				<string>코드 표현식</string>
			</dict>
		</dict>
		<key>coding</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>명령, 코드 구조, 알고리즘을 구성하여 응용 프로그램을 생성하는 행위입니다.</string>
				<key>Title</key>
				<string>코딩</string>
			</dict>
		</dict>
		<key>collection</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>배열이나 딕셔너리처럼 다양한 데이터를 조정하는 데 사용하는 데이터 구조입니다.</string>
				<key>Title</key>
				<string>모음</string>
			</dict>
		</dict>
		<key>command</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>응용 프로그램이 특정 동작을 수행하도록 명령하는 코드입니다. </string>
				<key>Title</key>
				<string>명령</string>
			</dict>
		</dict>
		<key>comment out</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>코드를 [코드 주석](glossary://code%20comment)으로 바꾸면 코드가 실행되지 않습니다. 코드 앞에 `//`를 추가하여 수행할 수 있어요. 다음 예를 살펴볼까요?
                
`// level.run()`</string>
				<key>Title</key>
				<string>주석 처리</string>
			</dict>
		</dict>
		<key>comparison operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>두 가지 값을 비교하는 `==`, `!=`, `&lt;`, `&gt;`, `&lt;=`, `&gt;=`과 같은 기호입니다. 비교 연산자는 `if` 구문 또는 `while` 루프의 조건식에서 사용하여 비교 결과가 `true(참)`인지 나타내는 불리언 값을 반환합니다. 예를 들어, `6 &gt; 8`에서는 `6`을 `8`과 비교하고 `false(거짓)`를 반환합니다.</string>
				<key>Title</key>
				<string>비교 연산자</string>
			</dict>
		</dict>
		<key>compiler error</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>컴파일러 오류는 코드의 부정확성 때문에 발생하는 오류입니다. 컴파일러 오류는 왼쪽 여백 및 도구 막대에서 빨간 점으로 나타납니다.</string>
				<key>Title</key>
				<string>컴파일러 오류</string>
			</dict>
		</dict>
		<key>composed view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>하나 이상의 [기본 보기](glossary://primitive%20view) 또는 구성된 보기를 결합하여 생성된 [보기](glossary://view)입니다. 
</string>
				<key>Title</key>
				<string>구성된 보기</string>
			</dict>
		</dict>
		<key>composition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>응용 프로그램의 작은 부분을 결합하여 작업하고 이해하기 쉬운 큰 조각을 만드는 프로세스입니다.</string>
				<key>Title</key>
				<string>구성</string>
			</dict>
		</dict>
		<key>compound assignment operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>할당(변수 값을 설정하는 동작)과 더하기 또는 빼기와 같은 연산 작업을 조합하는 연산자입니다. 예를 들어, `a`의 현재 값이 `1`이면 `a += 3`은 `1`에 `3`을 더한 다음 결과를 `a`에 할당하게 되어 `a`의 값이 `4`가 됩니다.</string>
				<key>Title</key>
				<string>복합 할당 연산자</string>
			</dict>
		</dict>
		<key>computed property</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>계산 속성은 값을 직접 저장하는 대신 검색할 때 다른 관련 값의 현재 상태를 기반으로 값을 계산합니다.

아래 예에서 area는 계산 속성이고, `width` 및 `height`는 저장 속성입니다.

```
struct RectangleCalculator { 
    var width = 10.0
    var height = 10.0
    
    var area : Double { 
        return width * height
    }
} 
```</string>
				<key>Title</key>
				<string>계산 속성</string>
			</dict>
		</dict>
		<key>conditional code</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>특정 조건식이 맞는 경우에만 작동하는 코드입니다. 예를 들어, `if` 구문 및 `while` 루프는 조건식이 `true(참)`일 경우에만 작동하는 조건 코드를 포함합니다.</string>
				<key>Title</key>
				<string>조건 코드</string>
			</dict>
		</dict>
		<key>conform</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>프로토콜 요구사항에 대한 자체 구현을 제공할 때 프로토콜을 준수함을 의미하는 유형입니다.</string>
				<key>Title</key>
				<string>준수</string>
			</dict>
		</dict>
		<key>constant</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>이름이 지정된 컨테이너입니다. 저장되는 값은 변경할 수 없습니다.</string>
				<key>Title</key>
				<string>상수</string>
			</dict>
		</dict>
		<key>container</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[상위 보기](glossary://parent%20view)라고도 알려진 컨테이너는 컨테이너 내부에 다른 보기를 가지고 있는 보기입니다.</string>
				<key>Title</key>
				<string>컨테이너</string>
			</dict>
		</dict>
		<key>coordinates</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>공간의 위치를 지정하는 숫자 조합입니다. 예를 들어, (100, -200)은 2D 공간의 x축 값이 100이고 y축 값이 -200인 위치를 가리키는 좌표입니다.</string>
				<key>Title</key>
				<string>좌표</string>
			</dict>
		</dict>
		<key>data</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>컴퓨터가 처리하거나 저장한 값으로 데이터로 작업을 수행하는 코드와는 별개입니다.</string>
				<key>Title</key>
				<string>데이터</string>
			</dict>
		</dict>
		<key>debug</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>응용 프로그램이 제대로 실행되지 않는 원인인 오류를 코드에서 찾아내어 수정하는 작업입니다. </string>
				<key>Title</key>
				<string>디버깅</string>
			</dict>
		</dict>
		<key>declaration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>응용 프로그램에 함수, 변수 또는 사용자 설정 유형과 같은 새로운 요소를 생성하는 코드입니다. 예를 들어 `let planet = “Earth”`는 새로운 상수인 `planet`을 생성하고 `”Earth”` 값을 지정합니다.</string>
				<key>Title</key>
				<string>선언</string>
			</dict>
		</dict>
		<key>decomposition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>큰 문제를 관리가 쉬운 작은 부분으로 나누는 프로세스입니다.</string>
				<key>Title</key>
				<string>분해</string>
			</dict>
		</dict>
		<key>decrement</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>지정된 정수 값만큼 숫자를 감소시킵니다. 주로 1로 설정됩니다.</string>
				<key>Title</key>
				<string>감소</string>
			</dict>
		</dict>
		<key>define</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>함수, 변수, 사용자 정의 유형과 같은 새로 생성한 코드 항목의 특정 값이나 동작을 설정하는 작업입니다. 예를 들어, 함수를 정의하는 경우에는 수행해야 할 명령 세트를 함수 안에 넣습니다.</string>
				<key>Title</key>
				<string>정의</string>
			</dict>
		</dict>
		<key>dot notation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>특성에 접근하거나 인스턴스의 메소드를 호출할 때 사용하는 구문법의 유형입니다. 예를 들어, `expert.toggleSwitch()`는 `expert` 인스턴스에 `toggleSwitch()` 메소드를 호출합니다.</string>
				<key>Title</key>
				<string>점 표기법</string>
			</dict>
		</dict>
		<key>efficiency</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>작성한 코드가 메모리 또는 전력과 같은 자원을 최대한 적게 소모하면서도 빠르게 필요한 작업을 수행하는지 측정하는 것입니다.</string>
				<key>Title</key>
				<string>효율성</string>
			</dict>
		</dict>
		<key>else block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`if` 구문의 마지막 코드 블록입니다. `if` 구문의 조건식이 모두 `false(거짓)`일 경우에 `else` 블록이 실행됩니다`.</string>
				<key>Title</key>
				<string>else 블록</string>
			</dict>
		</dict>
		<key>else if block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`if` 블록이나 다른 `else if` 블록에서 확인하지 않은 조건식을 확인하는 데 사용되는 `if` 구문 안에 있는 코드입니다.</string>
				<key>Title</key>
				<string>else if 블록</string>
			</dict>
		</dict>
		<key>enumeration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>관련있는 특정한 *열거형 케이스* 값을 정의하는 유형입니다. 예를 들어, `Direction` 열거형은 `north`, `south`, `east`, `west`처럼 각 방향마다 케이스를 정의합니다. 변수나 상수에 열거형을 지정하는 경우 항상 케이스 중 하나만을 선택해야 합니다. 예: `let compassDirection: Direction = .north`</string>
				<key>Title</key>
				<string>열거형</string>
			</dict>
		</dict>
		<key>environment object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>상위 또는 상위 보기에서 제공하는 관찰 가능한 객체 속성을 선언하려면 `@EnvironmentObject` [속성 래퍼](glossary://property%20wrapper)를 추가하세요. 속성을 환경 객체로 선언하는 경우 해당 `environmentObject(_:)` 제어자를 호출하여 상위 보기에서 해당 모델 인스턴스를 설정해야 합니다.</string>
				<key>Title</key>
				<string>환경 객체</string>
			</dict>
		</dict>
		<key>event</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>컴퓨터 응용 프로그램이 탐지할 수 있는 작업입니다. 버튼을 누르거나 화면을 회전하는 것과 같은 입력 값은 이벤트를 실행합니다.</string>
				<key>Title</key>
				<string>이벤트</string>
			</dict>
		</dict>
		<key>event handler</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>이벤트가 발생하면 호출되어 이벤트를 처리하는 함수입니다.</string>
				<key>Title</key>
				<string>이벤트 핸들러</string>
			</dict>
		</dict>
		<key>filtering</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>모음에 있는 데이터나 데이터 구조에 있는 데이터를 처리하여 새로운 데이터 세트를 생성하는 작업입니다.</string>
				<key>Title</key>
				<string>필터링</string>
			</dict>
		</dict>
		<key>font</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>고유의 디자인 스타일, 굵기, 크기가 적용된 텍스트 문자 세트입니다. 서체의 디자인 스타일은 *글자체*라고 불리며 해당 디자인의 변형된 형태는 글자체 *패밀리*라고 합니다. 예를 들어, HelveticaNeue는 글자체이며 10포인트 크기의 HelveticaNeue-Bold는 서체라고 부릅니다.</string>
				<key>Title</key>
				<string>서체</string>
			</dict>
		</dict>
		<key>for loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>특정 횟수만큼 실행되는 반복 코드 블록입니다.</string>
				<key>Title</key>
				<string>for 루프</string>
			</dict>
		</dict>
		<key>full function name</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>함수 이름과 매개변수 이름을 포함한 함수의 전체 이름입니다. 매개변수는 콜론(`:`)을 달아 구분합니다. 예: `move(to:duration:)`.</string>
				<key>Title</key>
				<string>전체 함수 이름</string>
			</dict>
		</dict>
		<key>function</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>필요할 때마다 실행할 수 있는 이름이 지정된 [명령](glossary://command) 세트입니다.</string>
				<key>Title</key>
				<string>함수</string>
			</dict>
		</dict>
		<key>function definition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>함수 정의는 함수가 수행하는 동작, 함수가 받는 입력, 함수가 완료되면 반환하는 항목에 대해 설명합니다.</string>
				<key>Title</key>
				<string>함수 정의</string>
			</dict>
		</dict>
		<key>global function</key>
		<dict>
			<key>FirstUse</key>
			<dict>
				<key>PageReference</key>
				<string></string>
				<key>_LOCALIZABLE_</key>
				<dict>
					<key>Title</key>
					<string></string>
				</dict>
			</dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>프로젝트의 모든 파일에서 접근할 수 있는 함수입니다.</string>
				<key>Title</key>
				<string>전역 함수</string>
			</dict>
		</dict>
		<key>global variable</key>
		<dict>
			<key>FirstUse</key>
			<dict>
				<key>PageReference</key>
				<string></string>
				<key>_LOCALIZABLE_</key>
				<dict>
					<key>Title</key>
					<string></string>
				</dict>
			</dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>프로젝트의 모든 파일에서 접근할 수 있는 변수입니다.</string>
				<key>Title</key>
				<string>전역 변수</string>
			</dict>
		</dict>
		<key>grayscale</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>흰색에서 검은색까지 회색 음영의 범위입니다.</string>
				<key>Title</key>
				<string>흑백음영</string>
			</dict>
		</dict>
		<key>gyroscope</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>사용자 기기의 방향을 3차원(전후 기울임, 좌우 기울임, 중앙을 중심으로 회전)으로 측정하는 센서입니다.</string>
				<key>Title</key>
				<string>자이로스코프</string>
			</dict>
		</dict>
		<key>hertz</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>헤르츠(Hz)는 초당 1회의 사이클을 말합니다. 이를 음의 진동에 적용하는 경우 1Hz는 초당 1번의 음파가 발생하는 것입니다. 인간은 20Hz에서 16,000Hz 사이의 소리를 들을 수 있습니다.</string>
				<key>Title</key>
				<string>헤르츠</string>
			</dict>
		</dict>
		<key>hue</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>색상 원판에 있는 색상의 톤을 말합니다. 색조는 `0`과 `1` 사이의 Double(소수점) 값입니다.</string>
				<key>Title</key>
				<string>색조</string>
			</dict>
		</dict>
		<key>if block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`if` 구문의 첫 코드 블록입니다. `if` 구문의 조건식이 `true(참)`일 경우에 `if` 블록이 실행됩니다.</string>
				<key>Title</key>
				<string>if 블록</string>
			</dict>
		</dict>
		<key>if statement</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>한 가지 이상 조건식의 값에 기반한 코드를 실행하는 데 사용되는 코드 구조입니다. `if` 구문의 첫 번째 코드 블록은 `if` 블록입니다. `if` 구문은 `else` 블록 및 `else if` 블록처럼 조건식을 추가로 제공하는 다른 블록을 포함할 수 있습니다.</string>
				<key>Title</key>
				<string>if 구문</string>
			</dict>
		</dict>
		<key>increment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>지정된 정수 값만큼 숫자를 증가시킵니다. 주로 1로 설정됩니다.</string>
				<key>Title</key>
				<string>증가</string>
			</dict>
		</dict>
		<key>index</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[배열](glossary://array)에 있는 항목의 위치를 나타내는 숫자입니다.</string>
				<key>Title</key>
				<string>인덱스</string>
			</dict>
		</dict>
		<key>index out of range error</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>배열의 범위를 벗어나는 인덱스를 사용하여 접근을 시도하면 발생하는 오류입니다. 예를 들어, 인덱스 `2`는 `[17, 42]`와 같은 배열의 범위를 벗어납니다.</string>
				<key>Title</key>
				<string>인덱스 범위 초과 오류</string>
			</dict>
		</dict>
		<key>initialization</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>유형의 속성에 대한 초기 값을 설정하는 것을 포함하여 유형의 인스턴스를 새로 생성하는 행위입니다.</string>
				<key>Title</key>
				<string>초기화</string>
			</dict>
		</dict>
		<key>initializer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>유형의 [인스턴스](glossary://instance)를 새로 생성하도록 이니셜라이저가 호출됩니다. 이니셜라이저는 해당 유형의 속성에 대한 모든 초기 값을 설정해야 하며, 주로 다른 설정 코드를 포함합니다.</string>
				<key>Title</key>
				<string>이니셜라이저</string>
			</dict>
		</dict>
		<key>inner loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>(외부) 루프 안에 내포되어 있는 반복되는 코드 블록(루프)입니다.</string>
				<key>Title</key>
				<string>내부 루프</string>
			</dict>
		</dict>
		<key>instance</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>특정 [유형](glossary://type)의 값입니다. 예를 들어, `let motion = MotionSensor()`에서 `motion`은 `MotionSensor` 유형의 인스턴스입니다.</string>
				<key>Title</key>
				<string>인스턴스</string>
			</dict>
		</dict>
		<key>iteration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>배열의 각 항목에 동일한 작업을 수행하는 것과 같이 프로세스를 반복하는 행위입니다.</string>
				<key>Title</key>
				<string>반복</string>
			</dict>
		</dict>
		<key>lag</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>처리 요구, 처리 능력 또는 이 두 요소로 인한 앱 속도 또는 반응 속도의 저하입니다.</string>
				<key>Title</key>
				<string>지연</string>
			</dict>
		</dict>
		<key>leading edge</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>보기 내의 콘텐츠를 참조할 때 시작 가장자리는 콘텐츠 시작의 수평적 위치를 참조합니다. 시작 가장자리의 위치는 환경설정에 따라 달라지며 일반적으로 지역 및 언어 설정에 따라 달라집니다.
예를 들어, 영어나 네덜란드어와 같이 왼쪽에서 오른쪽으로 읽는 언어에서는 시작 가장자리는 왼쪽에 있습니다. 아랍어나 히브리어와 같이 오른쪽에서 왼쪽으로 읽는 언어의 경우 시작 가장자리는 오른쪽에 있습니다.</string>
				<key>Title</key>
				<string>시작 가장자리</string>
			</dict>
		</dict>
		<key>literal</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>리터럴을 사용하면 이미지 보관함 또는 색상 선택기를 통해 이미지 및 색상을 코드에 바로 추가할 수 있어요. 리터럴은 편집기 내에서 바로 고유 포맷으로 표시되는 데이터의 실제 값입니다.</string>
				<key>Title</key>
				<string>리터럴</string>
			</dict>
		</dict>
		<key>logical AND operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>두 개의 불리언 값을 결합하는 기호(`&amp;&amp;`)입니다. 모든 값이 true(참)여야 전체 코드가 true(참)가 됩니다. 예를 들어, `a &amp;&amp; b`가 true(참)가 되려면 `a`와 `b` 모두 `true`(참)가 되어야 합니다.</string>
				<key>Title</key>
				<string>논리 연산자 AND</string>
			</dict>
		</dict>
		<key>logical NOT operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>코드의 불리언 값을 반대로 변경하는 기호(`!`)입니다. 예를 들어 `a`가 `true(참)`인 경우 `!a`는 `false(거짓)`입니다.</string>
				<key>Title</key>
				<string>논리 연산자 NOT</string>
			</dict>
		</dict>
		<key>logical OR operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>두 개의 불리언 값을 결합하는 기호(`||`)입니다. 두 개 중 하나가 true(참)여야 전체 코드가 true(참)가 됩니다. 예를 들어, `a || b`가 `true(참)`가 되려면 `a`나 `b` 중 하나가 `true(참)`거나 모두 `true(참)`가 되어야 합니다.</string>
				<key>Title</key>
				<string>논리 연산자 OR</string>
			</dict>
		</dict>
		<key>logical operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>불리언 논리 값 `true(참)` 및 `false(거짓)`를 수정하거나 조합하는 `&amp;&amp;`, `||`, `!`와 같은 기호입니다.</string>
				<key>Title</key>
				<string>논리 연산자</string>
			</dict>
		</dict>
		<key>loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`for` 루프처럼 특정 횟수만큼 반복되거나 `while` 루프처럼 조건식이 맞을 때까지 반복되는 코드입니다.</string>
				<key>Title</key>
				<string>루프</string>
			</dict>
		</dict>
		<key>memory</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>응용 프로그램의 코드와 코드가 사용하는 데이터를 일시적으로나 영구히 저장하는 컴퓨터 부품입니다.</string>
				<key>Title</key>
				<string>메모리</string>
			</dict>
		</dict>
		<key>method</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[유형](glossary://type) 안에서 정의된 함수 또는 명령 세트입니다.</string>
				<key>Title</key>
				<string>메소드</string>
			</dict>
		</dict>
		<key>modifier</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>SwiftUI에서 제어자는 보기의 모양이나 동작을 수정하기 위해 호출되는 [메소드](glossary://method)입니다. 제어자의 가독성을 위해 각 제어자는 보기 [인스턴스](glossary://instance) 아래의 별도의 줄에 있습니다.</string>
				<key>Title</key>
				<string>제어자</string>
			</dict>
		</dict>
		<key>modulo operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>한 숫자를 다른 숫자로 나눈 후에 나온 나머지 값을 반환하는 기호(`%`)입니다. 예를 들어, `17 % 5`는 `2`를 반환합니다.</string>
				<key>Title</key>
				<string>모듈로 연산자</string>
			</dict>
		</dict>
		<key>navigation bar</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>탐색 인터페이스를 통해 대상에 도달할 때까지 화면당 하나의 선택을 할 수 있습니다. 다른 대상으로 이동하려면 단계를 다시 추적하거나 처음부터 다시 시작해서 다른 선택을 해야 합니다. 화면 상단에 있는 탐색 막대에는 현재 위치를 기억하는 데 도움이 되는 제목이 표시되고, 이전 화면으로 돌아갈 수 있도록 뒤로 버튼이 제공됩니다.</string>
				<key>Title</key>
				<string>탐색 막대</string>
			</dict>
		</dict>
		<key>nest</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>루프와 같은 반복되는 코드 블록이 다른 코드 블록에 추가되어 있는 경우를 말합니다.</string>
				<key>Title</key>
				<string>내포</string>
			</dict>
		</dict>
		<key>observable object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>클래스가 `ObservableObject` 프로토콜을 [준수](glossary://conform)하는 경우, 게시된 값을 변경하면 해당 값을 사용하는 모든 보기가 변경 사항을 반영하여 자동으로 업데이트됩니다.</string>
				<key>Title</key>
				<string>관찰 가능한 객체</string>
			</dict>
		</dict>
		<key>observed object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>클래스가 `ObservableObject` 프로토콜을 [준수](glossary://conform)하는 경우, 게시된 값 중 하나를 변경하면 해당 값을 사용하는 모든 보기가 변경 사항을 반영하여 자동으로 업데이트됩니다.</string>
				<key>Title</key>
				<string>관찰 가능한 객체</string>
			</dict>
		</dict>
		<key>observer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[관찰 가능한 객체](glossary://observable%20object)와 관련하여 관찰자는 관찰 가능한 객체의 데이터를 사용하는 보기 또는 객체입니다. 관찰 가능한 객체의 데이터가 변경되는 경우 SwiftUI는 변경 사항을 인식하고 관찰자가 업데이트하도록 합니다.</string>
				<key>Title</key>
				<string>관찰자</string>
			</dict>
		</dict>
		<key>operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>한 개 이상의 값에 대한 작업을 나타내는 `+`, `-`, `&amp;&amp;`와 같은 기호입니다. 예를 들어, `1 + 2`에서 추가 연산자(`+`)는 숫자 `1`과 `2`를 더합니다.</string>
				<key>Title</key>
				<string>연산자</string>
			</dict>
		</dict>
		<key>outer loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>(내부) 루프를 또 하나 포함하는 반복되는 코드 블록(루프)입니다.</string>
				<key>Title</key>
				<string>외부 루프</string>
			</dict>
		</dict>
		<key>parameter</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>함수에 대한 입력 값입니다. 함수를 정의할 때 사용합니다. 예를 들어, `move(distance: Int)` 함수에서 `distance`는 Int 유형 값을 받는 매개변수입니다.</string>
				<key>Title</key>
				<string>매개변수</string>
			</dict>
		</dict>
		<key>parent view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>한 개 이상의 [하위 보기](glossary://child%20view)가 있는 컨테이너 보기입니다.</string>
				<key>Title</key>
				<string>상위 보기</string>
			</dict>
		</dict>
		<key>pattern</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>반복되는 상황 또는 데이터 세트입니다.</string>
				<key>Title</key>
				<string>패턴</string>
			</dict>
		</dict>
		<key>pitch</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>음악에서 음높이는 주로 진동 주파수에 따라 음이 얼마나 높은지와 낮은지를 가리는 것을 의미합니다. 음높이는 [헤르츠](glossary://hertz) 단위로 측정합니다. 음높이가 높으면(~2000Hz) 휘파람 같은 소리가 들리는 반면, 음높이가 낮으면(~40Hz) 소가 우는 것과 같은 소리가 들립니다.</string>
				<key>Title</key>
				<string>음높이</string>
			</dict>
		</dict>
		<key>primitive</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>SwiftUI와 같은 프로그래밍 프레임워크와 관련하여 ‘기본’은 더 복잡한 동작 또는 [인터페이스](glossary://user%20interface)를 구성하기 위해 프레임워크에서 제공된 기본 요소입니다.
</string>
				<key>Title</key>
				<string>기본</string>
			</dict>
		</dict>
		<key>primitive view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`Button`, `Text` 또는 `Image` 보기와 같이 [SwiftUI](glossary://SwiftUI) 프레임워크에서 제공된 [보기](glossary://view)입니다. 기본 보기는 [사용자 인터페이스](glossary://user%20interface)에서 더 복잡한 [구성된 보기](glossary://composed%20view)를 생성하기 위해 기본 요소로 사용됩니다.</string>
				<key>Title</key>
				<string>기본 보기</string>
			</dict>
		</dict>
		<key>private</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>private 키워드는 특정 소스 파일 내에서만 코드를 사용할 수 있게 합니다.
- callout(예제):
`private class MyApp: App { }`</string>
				<key>Title</key>
				<string>private</string>
			</dict>
		</dict>
		<key>property</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>유형 내에서 정의된 변수(값을 저장하는 이름이 지정된 컨테이너)입니다.</string>
				<key>Title</key>
				<string>속성</string>
			</dict>
		</dict>
		<key>property wrapper</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>속성 래퍼는 동작의 일반적인 패턴을 속성에 적용하는 간단한 방식입니다. 이 래퍼는 읽을 때 저장되거나 계산되는 방법을 정의하는 속성에 주석을 추가하는 방식입니다.   예를 들어, `@State` 속성 래퍼는 SwiftUI가 값에 대한 저장 공간을 관리하고, 해당 값이 변경될 때마다 이를 사용하는 보기의 모든 부분을 업데이트하도록 합니다.</string>
				<key>Title</key>
				<string>속성 래퍼</string>
			</dict>
		</dict>
		<key>protocol</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>클래스, 구조 또는 열거형과 같은 유형에서 채택될 수 있는, 메소드 및 속성과 같은 요구 사항 세트입니다.   유형이 프로토콜을 채택하면 프로토콜 요구 사항의 고유한 구현을 제공하며, 이는 해당 프로토콜을 준수함을 의미합니다.</string>
				<key>Title</key>
				<string>프로토콜</string>
			</dict>
		</dict>
		<key>pseudocode</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>알고리즘에 대한 읽기 쉬운 설명입니다. 누구나 읽고 이해할 수 있도록 일상적인 말과 간단한 코드로 작성됩니다.</string>
				<key>Title</key>
				<string>의사 코드</string>
			</dict>
		</dict>
		<key>public</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>public 키워드는 프로젝트 내의 모든 파일에서 코드를 사용할 수 있게 합니다.
                        
- callout(예제):
`public func decorateWithSticker(space: Space) { }`
                    </string>
				<key>Title</key>
				<string>public</string>
			</dict>
		</dict>
		<key>published value</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>값이 변경되려고 할 때 모든 [관찰자](glossary://observer)에 알림을 보내는 속성을 선언하려면 `@Published` [속성 래퍼](glossary://property%20wrapper)를 추가하세요. 값이 변경되면 SwiftUI는 해당 데이터를 사용하는 모든 보기를 업데이트합니다.</string>
				<key>Title</key>
				<string>게시된 값</string>
			</dict>
		</dict>
		<key>return type</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>함수를 정의할 때, 함수가 완료되면 해당 함수가 출력으로 다시 전달할 값의 유형을 사용자가 정의할 수 있으며 이것을 반환 유형이라고 합니다.</string>
				<key>Title</key>
				<string>반환 유형</string>
			</dict>
		</dict>
		<key>reusability</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>응용 프로그램 내의 다른 상황에서도 사용할 수 있게 하는 코드의 특성입니다.</string>
				<key>Title</key>
				<string>재사용성</string>
			</dict>
		</dict>
		<key>root view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>다른 모든 보기가 배치된 보기입니다. [최상위 레벨 보기](glossary://top-level%20view)라고도 하는 이 보기는 [보기 계층](glossary://view%20hierarchy)의 상단에 있고, 계층에 있는 모든 [하위 보기](glossary://child%20view)에 [상위 보기](glossary://parent%20view)처럼 동작합니다.</string>
				<key>Title</key>
				<string>루트 보기</string>
			</dict>
		</dict>
		<key>saturation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>색조의 강도(회색톤에서 풀컬러까지)를 말합니다. 이 채도는 `0`과 `1` 사이의 Double(소수점) 값입니다.</string>
				<key>Title</key>
				<string>채도</string>
			</dict>
		</dict>
		<key>sensor</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>센서는 이벤트(열기, 밝기, 사운드 또는 모션 등의 변화)를 감지하고 값을 반환하는 기기입니다.</string>
				<key>Title</key>
				<string>센서</string>
			</dict>
		</dict>
		<key>source of truth</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>앱을 만들 때 모든 데이터가 수정되는 단일 위치입니다. 이 데이터에 대한 다른 모든 연결은 참조용일 뿐이며, 해당 정보가 다른 위치에 복제되는 것을 방지합니다. </string>
				<key>Title</key>
				<string>진실 공급원(SOT)</string>
			</dict>
		</dict>
		<key>speech synthesis</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>컴퓨터가 사람의 목소리를 흉내 내어 만드는 사운드입니다. 일반적으로 텍스트를 따라 생성됩니다.</string>
				<key>Title</key>
				<string>음성 합성</string>
			</dict>
		</dict>
		<key>state</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>지정된 시간에 변수, 응용 프로그램 또는 시스템에 저장되어 있는 정보입니다.</string>
				<key>Title</key>
				<string>상태</string>
			</dict>
		</dict>
		<key>state object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>상태 객체를 선언하려면 `@StateObject` [속성 래퍼](glossary://property%20wrapper)를 추가하고, `ObservableObject` [프로토콜](glossary://protocol)에 따라 초기 값을 제공하세요. SwiftUI는 상태 객체에 대한 저장 공간을 관리하고, 게시된 값이 변경될 때마다 해당 값을 사용하는 모든 하위 보기를 업데이트합니다.</string>
				<key>Title</key>
				<string>상태 객체</string>
			</dict>
		</dict>
		<key>state value</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>SwiftUI가 값에 대한 저장 공간을 관리하도록 하려면 변수 앞에 `@State`를 추가하세요. 값이 변경되면 SwiftUI는 해당 값을 사용하는 보기의 모든 부분을 업데이트합니다.</string>
				<key>Title</key>
				<string>상태 값</string>
			</dict>
		</dict>
		<key>statement</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>응용 프로그램에서 코드를 조직하는 루프 또는 `if` 구문과 같은 구조입니다.</string>
				<key>Title</key>
				<string>구문</string>
			</dict>
		</dict>
		<key>string component</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>분리자로 분리된 문자열의 일부 또는 부분열을 말합니다. 예를 들어, `"강아지+고양이+물고기"` 문자열은 `"+"` 분리자로 분리되어 있고 `"강아지"`, `"고양이"`, `"물고기"`를 구성요소로 가집니다.</string>
				<key>Title</key>
				<string>문자열 구성요소</string>
			</dict>
		</dict>
		<key>string concatenation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>문자열 끝에 다른 문자열을 추가하여 문자열을 조합하는 연산 작업입니다. 예를 들어, `"축구"`와 `"공"`을 접합한 결과는 `"축구공"`입니다.</string>
				<key>Title</key>
				<string>문자열 접합</string>
			</dict>
		</dict>
		<key>string interpolation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>문자열을 계산할 때 현재 지정된 값으로 대치되는 긴 문자열 내의 상수, 변수 또는 코드 표현식을 말합니다. 예를 들어, `"영희가 \(fruit)을 먹었다."`라는 문자열에서 `fruit`가 `"복숭아"`라는 값을 가진 변수일 경우, 문자열이 계산될 때 `\(fruit)`은 `"복숭아"`로 대치되어 `"영희가 복숭아를 먹었다."`라는 문자열이 됩니다.</string>
				<key>Title</key>
				<string>문자열 보간</string>
			</dict>
		</dict>
		<key>syntax</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>컴퓨터가 이해하고 실행할 수 있는 코드 작성 규칙입니다.</string>
				<key>Title</key>
				<string>구문법</string>
			</dict>
		</dict>
		<key>top-level view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>다른 모든 보기가 배치된 보기입니다. [루트 보기](glossary://root%20view)라고도 하는 이 보기는 [보기 계층](glossary://view%20hierarchy)의 상단에 있으며, 계층에 있는 모든 [하위 보기](glossary://child%20view)에 [상위 보기](glossary://parent%20view)처럼 동작합니다.</string>
				<key>Title</key>
				<string>최상위 레벨 보기</string>
			</dict>
		</dict>
		<key>trailing edge</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>보기 내의 콘텐츠를 참조할 때 끝 가장자리는 콘텐츠 끝의 수평적 위치를 참조합니다. 끝 가장자리의 위치는 환경설정에 따라 달라지며 일반적으로 지역 및 언어 설정에 따라 달라집니다.
                    예를 들어, 영어나 네덜란드어와 같이 왼쪽에서 오른쪽으로 읽는 언어에서는 끝 가장자리는 오른쪽에 있습니다. 아랍어나 히브리어와 같이 오른쪽에서 왼쪽으로 읽는 언어의 경우 끝 가장자리는 왼쪽에 있습니다.</string>
				<key>Title</key>
				<string>시작 가장자리</string>
			</dict>
		</dict>
		<key>type</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>데이터 종류의 특성(기능) 및 메소드(동작)에 대한 이름이 지정된 그룹입니다.</string>
				<key>Title</key>
				<string>유형</string>
			</dict>
		</dict>
		<key>typography</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>문자 언어가 읽기 쉽고 흥미롭게 표시되도록 글자체를 정렬하는 기술입니다.</string>
				<key>Title</key>
				<string>타이포그래피</string>
			</dict>
		</dict>
		<key>user input</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>사용자와의 상호 작용을 통해 응용 프로그램에게 전달되는 정보입니다. 사용자가 화면을 터치하는 정보나 키보드로 텍스트를 입력하거나 마이크로 음성을 전달하는 것이 이에 해당합니다. 
</string>
				<key>Title</key>
				<string>사용자 입력</string>
			</dict>
		</dict>
		<key>user interface</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>사용자가 앱을 제어하는 방법입니다. ‘UI’라고도 부르는 이 용어는 이미지, 텍스트, 버튼, 슬라이더, 스크롤 보기 등의 요소를 통해 사용자가 상호 작용하는 앱의 시각적 부분을 말하는 데 종종 사용됩니다.</string>
				<key>Title</key>
				<string>사용자 인터페이스</string>
			</dict>
		</dict>
		<key>variable</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>변경할 수 있는 값을 저장하는 이름이 지정된 컨테이너입니다.</string>
				<key>Title</key>
				<string>변수</string>
			</dict>
		</dict>
		<key>velocity</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>지정된 방향으로 움직이는 무언가의 속도입니다.</string>
				<key>Title</key>
				<string>속도</string>
			</dict>
		</dict>
		<key>view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>보기는 앱의 사용자 인터페이스의 기본 요소이며, `View` [프로토콜](glossary://protocol)을 [준수](glossary://conform)하는 모든 시각적 요소를 나타냅니다.

SwiftUI의 보기의 몇 가지 예는 텍스트 보기, 이미지 보기, 슬라이더, 격자, 버튼 및 도형입니다.</string>
				<key>Title</key>
				<string>보기</string>
			</dict>
		</dict>
		<key>view hierarchy</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>계층 상단에서 최상위 레벨 보기 인스턴스를 참조하여, 다른 보기를 기준으로 보기의 레이아웃을 정의하는 구조입니다. 최상위 레벨 보기는 하위 보기를 얼마든지 포함할 수 있으며, 각각에는 고유한 하위 보기 등이 포함될 수 있습니다.</string>
				<key>Title</key>
				<string>보기 계층</string>
			</dict>
		</dict>
		<key>volume</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>음량은 [센서](glossary://sensor)에서 감지하는 소리의 세기를 말합니다. 음량의 범위는 0에서 1 사이입니다.</string>
				<key>Title</key>
				<string>음량</string>
			</dict>
		</dict>
		<key>while loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>주어진 조건이 `true(참)`인 동안 계속 작동하는 코드 블록입니다. 조건이 `false(거짓)`로 변경되는 경우 루프가 작동을 멈춥니다.</string>
				<key>Title</key>
				<string>while 루프</string>
			</dict>
		</dict>
		<key>wireframe</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>퍼즐 세상의 보석, 스위치, 블록과 같은 항목의 윤곽입니다. 와이어프레임은 퍼즐이 실행될 때마다 항목이 임의로 표시될 수 있는지에 대한 가능성을 나타내는 데 사용됩니다.</string>
				<key>Title</key>
				<string>와이어프레임</string>
			</dict>
		</dict>
	</dict>
</dict>
</plist>
