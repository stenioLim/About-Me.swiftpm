<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Terms</key>
	<dict>
		<key>Alpha</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Alpha, ou *canal alpha*, indique l’opacité d’une couleur, allant de `0` (transparence totale) à `1` (opacité totale). La donnée alpha est un double (nombre décimal) situé entre 0 et 1.</string>
				<key>Title</key>
				<string>alpha</string>
			</dict>
		</dict>
		<key>Boolean</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un type dont la valeur est `true` ou `false`. Par exemple, `9 &lt; 7` retourne une valeur booléenne `false`, car `9` n’est pas inférieur à `7`.</string>
				<key>Title</key>
				<string>Booléen</string>
			</dict>
		</dict>
		<key>Double</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un type stockant les nombres possédant un composant fractionnel, par exemple : 3.14.
Remarque : Swift Playgrounds utilise un point (.) pour séparer les décimales, et non la virgule (,) que l’on utilise habituellement en français.</string>
				<key>Title</key>
				<string>Double</string>
			</dict>
		</dict>
		<key>Int</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un type qui contient un nombre entier (sans décimale), comme `10` ou `-42`.</string>
				<key>Title</key>
				<string>Int</string>
			</dict>
		</dict>
		<key>String</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un type qui contient une série de caractères, comme `"hello, world"` ou `"dancing kittens."`</string>
				<key>Title</key>
				<string>String</string>
			</dict>
		</dict>
		<key>Swift</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Langage de programmation d’Apple servant à écrire des apps pour iPhone, iPad, Mac, Apple Watch et Apple TV.</string>
				<key>Title</key>
				<string>Swift</string>
			</dict>
		</dict>
		<key>SwiftUI</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>SwiftUI est un moyen moderne de déclarer des interfaces utilisateur pour toute plateforme Apple. Il fournit des vues, des commandes et des structures de mise en page pour la déclaration de l’interface utilisateur de ton app. Le framework fournit des gestionnaires d’évènements pour transmettre des touchers, des gestes et d’autres types d’entrées à ton app, et des outils pour gérer le flux de données des modèles de ton app vers les vues et les commandes que les utilisateurs verront et avec lesquels ils interagiront.</string>
				<key>Title</key>
				<string>SwiftUI</string>
			</dict>
		</dict>
		<key>absolute value</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>La valeur non signée d’un nombre. Par exemple, la valeur absolue de -12 est 12, et la valeur absolue de 23.4 est 23.4.</string>
				<key>Title</key>
				<string>valeur absolue</string>
			</dict>
		</dict>
		<key>abstraction</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une version simplifiée de quelque chose de plus complexe.   Une abstraction masque des détails pour que tu puisses réfléchir à des éléments de ton code et les associer plus simplement.   Par exemple, un [type](glossary://type) est une abstraction qui masque la configuration, les propriétés et les méthodes de l’instance de ce type.</string>
				<key>Title</key>
				<string>abstraction</string>
			</dict>
		</dict>
		<key>accelerometer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un capteur qui mesure l’accélération de ton appareil en trois dimensions : vers le haut et vers le bas, en avant et en arrière, et vers la gauche et vers la droite.</string>
				<key>Title</key>
				<string>accéléromètre</string>
			</dict>
		</dict>
		<key>adopt</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Adopter un protocole, un type fournit un ensemble de ses propres implémentations pour les exigences du protocole, telles que les méthodes et les propriétés énumérées.</string>
				<key>Title</key>
				<string>adopter</string>
			</dict>
		</dict>
		<key>algorithm</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un ensemble d’instructions à suivre pas à pas pour résoudre un problème. Par exemple, la liste des étapes permettant de faire une tasse de thé peut être considérée comme un algorithme.</string>
				<key>Title</key>
				<string>algorithme</string>
			</dict>
		</dict>
		<key>append</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ajouter un élément à la fin de quelque chose. Par exemple, tu peux ajouter une chaîne à la fin d’une autre chaîne, ou ajouter un élément à un tableau d’éléments.
</string>
				<key>Title</key>
				<string>ajouter</string>
			</dict>
		</dict>
		<key>application</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un logiciel, composé de code, qui te permet d’effectuer des tâches spécifiques. Par exemple, tu utilises l’application (app) Messages pour envoyer et recevoir des messages.</string>
				<key>Title</key>
				<string>application</string>
			</dict>
		</dict>
		<key>argument</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une valeur d’entrée transmise à une fonction pour personnaliser son comportement. Par exemple, dans l’appel à la fonction `move(distance: 3)`, le chiffre `3` est un argument qui indique de combien d’espaces se déplacer.</string>
				<key>Title</key>
				<string>argument</string>
			</dict>
		</dict>
		<key>arithmetic operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un symbole, tel que `+`, `-`, `*` ou `/`, qui effectue une opération mathématique basique impliquant un ou plusieurs nombres. Par exemple, `42 / 7` et `17 - 5` utilisent des opérateurs arithmétiques.</string>
				<key>Title</key>
				<string>opérateur arithmétique</string>
			</dict>
		</dict>
		<key>array</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une collection qui stocke une liste ordonnée d’éléments du même type. Le même élément peut apparaître plusieurs fois à différents endroits. Par exemple, `highScores = [37, 34, 29, 29, 26]` est un tableau de [nombres entiers](glossary://Int).</string>
				<key>Title</key>
				<string>tableau</string>
			</dict>
		</dict>
		<key>asset</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Les ressources sont les images, les sons et les autres éléments que ton app utilise. Tu peux importer des ressources dans Swift Playgrounds à partir d’autres apps, telles que Fichiers et Photos.</string>
				<key>Title</key>
				<string>ressource</string>
			</dict>
		</dict>
		<key>assignment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une action qui définit la valeur d’une variable ou d’une constante.</string>
				<key>Title</key>
				<string>attribution</string>
			</dict>
		</dict>
		<key>assignment operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Le symbole `=` qui sert à définir la valeur d’une variable. Par exemple, `greeting = "bonjour"` définit la valeur de `greeting` sur `"bonjour"`.</string>
				<key>Title</key>
				<string>opérateur d’attribution</string>
			</dict>
		</dict>
		<key>asynchronous process</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un bloc de code qui peut s’exécuter pendant que le reste de ton app ou de ton programme poursuit son exécution. Contrairement à un processus synchrone, qui bloque l’exécution du programme jusqu’à sa fin, un processus asynchrone peut s’exécuter simultanément avec le reste du code de ton app.</string>
				<key>Title</key>
				<string>processus asynchrone</string>
			</dict>
		</dict>
		<key>binding</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ajoute le [wrapper de propriété](glossary://property%20wrapper) `@Binding` pour créer une connexion bidirectionnelle entre une propriété qui stocke des données, et une vue qui affiche et modifie les données. Une liaison connecte une propriété à une source de vérité stockée ailleurs, plutôt que de stocker uniquement des données. 

Par exemple, un bouton qui permet de basculer entre lecture et pause peut créer une liaison avec une propriété de sa vue parente en utilisant le wrapper de propriété`@Binding`.
</string>
				<key>Title</key>
				<string>association</string>
			</dict>
		</dict>
		<key>body</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Le corps d’une [vue](glossary://view) est l’endroit où tu fournis le contenu de la vue, composé d’au moins une [vue primitive](glossary://primitive%20view) fournie par SwiftUI, ou de [vues composées](glossary://composed%20view) que tu as déjà créées.</string>
				<key>Title</key>
				<string>corps</string>
			</dict>
		</dict>
		<key>bounds</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Dans un tableau, l’étendue des valeurs que peuvent avoir le tableau ou un index. Par exemple, le tableau `[17, 42, 95]` peut avoir des valeurs d’index de 0 à 2. La vérification des limites correspond à regarder si une valeur d’index se trouve bien dans les limites du tableau.</string>
				<key>Title</key>
				<string>limites</string>
			</dict>
		</dict>
		<key>brightness</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>La quantité de lumière qui arrive dans l’appareil photo, allant de `0` (aucune lumière) à `1` (pleine lumière). La luminosité est un [double](glossary://Double) (nombre décimal) compris entre `0` et `1`.</string>
				<key>Title</key>
				<string>luminosité</string>
			</dict>
		</dict>
		<key>bug</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une erreur dans le code qui empêche une application de s’exécuter comme elle devrait le faire. 
</string>
				<key>Title</key>
				<string>bogue</string>
			</dict>
		</dict>
		<key>bundle</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une représentation du code et des ressources stockés dans un répertoire de paquet sur un disque. Les paquets organisent les ressources qu’ils contiennent dans des sous-répertoires bien définis, et les structures des paquets varient en fonction de la plateforme et du type du paquet. En utilisant un objet de paquet, tu peux accéder aux ressources du paquet sans connaître sa structure.</string>
				<key>Title</key>
				<string>paquet</string>
			</dict>
		</dict>
		<key>call</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Lorsque l’on appelle une fonction dans du code, on lui indique de s’exécuter et d’effectuer les actions qui sont définies en elle.</string>
				<key>Title</key>
				<string>appeler</string>
			</dict>
		</dict>
		<key>child view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une vue qui est contenue dans une [vue parente](glossary://parent%20view). Une vue parente peut contenir un nombre illimité de vues enfants, chacune d’elle pouvant contenir ses propres vues enfants, et ainsi de suite. Une vue et l’ensemble de ses descendants constituent une [hiérarchie de vue](glossary://view%20hierarchy).</string>
				<key>Title</key>
				<string>vue enfant</string>
			</dict>
		</dict>
		<key>class</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une classe est un conteneur pour du code qui se comporte comme un modèle permettant de créer plusieurs copies du même type d’élément. De la même façon qu’un modèle peut définir les fonctionnalités et les comportements d’un objet, comme une bicyclette, une classe les définit comme étant des [propriétés](glossary://property) et des [méthodes](glossary://method).

Quand tu crées une nouvelle copie, ou [instance](glossary://instance), d’une classe, cette instance contient l’ensemble des propriétés et des méthodes de ton modèle. Toutefois, chacune des valeurs de l’instance peut être modifiée de façon indépendante, ce qui te permet de personnaliser le comportement de chaque copie. Par exemple, la classe d’une bicyclette peut posséder une propriété de couleur, ce qui te permet de créer des bicyclettes rouges et bleues.</string>
				<key>Title</key>
				<string>classe</string>
			</dict>
		</dict>
		<key>closure</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Les clôtures sont des [fonctions](glossary://function) qui s’exécutent sans avoir besoin de porter de nom.
					
```
scene.setOnStartHandler {
    // Corps de la clôture
}
```
                    
Les clôtures peuvent récupérer et stocker des références à n’importe quelles constantes et variables du contexte dans lequel elles sont définies. On appelle ceci la clôture de ces constantes et variables.</string>
				<key>Title</key>
				<string>clôture</string>
			</dict>
		</dict>
		<key>code comment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un commentaire de code est utilisé par les programmeurs pour documenter leur code.   Tu peux commencer un commentaire d’une ligne avec deux barres obliques suivies d’une espace ; par exemple « // Voici mon commentaire. ».   Lorsque tu exécutes ton code, les commentaires de ce code ne s’exécutent pas.</string>
				<key>Title</key>
				<string>commentaire de code</string>
			</dict>
		</dict>
		<key>code expression</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un extrait de code qui peut être évalué pour renvoyer une valeur. Par exemple si `months` est un tableau contenant 12 éléments, l’expression de code `months.count - 1` renvoie la valeur `11`.</string>
				<key>Title</key>
				<string>expression de code</string>
			</dict>
		</dict>
		<key>coding</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>L’action consistant à composer des commandes, des structures de code et des algorithmes de façon à créer une application informatique.</string>
				<key>Title</key>
				<string>codage</string>
			</dict>
		</dict>
		<key>collection</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une structure de données, telle qu’un tableau ou un dictionnaire, utilisée pour stocker plusieurs éléments de données.</string>
				<key>Title</key>
				<string>collection</string>
			</dict>
		</dict>
		<key>command</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Du code qui indique à une application d’effectuer une action spécifique. </string>
				<key>Title</key>
				<string>commande</string>
			</dict>
		</dict>
		<key>comment out</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Empêcher qu’une ligne de code s’exécute en la transformant en [commentaire de code](glossary://code%20comment). Tu peux effectuer cette opération en ajoutant `//` devant n’importe quelle ligne de code. Par exemple :
                
`// level.run()`</string>
				<key>Title</key>
				<string>commenter</string>
			</dict>
		</dict>
		<key>comparison operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un symbole, tel que `==`, `!=`, `&lt;`, `&gt;`, `&lt;=` ou `&gt;=`, servant à comparer deux valeurs. On peut utiliser un opérateur de comparaison dans une condition d’une instruction `if` ou d’une boucle `while` pour renvoyer une valeur booléenne qui indique si une comparaison est `true`. Par exemple, `6 &gt; 8` compare `6` et `8` et renvoie `false`.</string>
				<key>Title</key>
				<string>opérateur de comparaison</string>
			</dict>
		</dict>
		<key>compiler error</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Les erreurs de compilation sont dues à des inexactitudes dans le code. Elles s’affichent sous forme de point rouge dans la marge de gauche et dans la barre d’outils.</string>
				<key>Title</key>
				<string>erreur de compilation</string>
			</dict>
		</dict>
		<key>composed view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une [vue](glossary://view) créée en combinant une ou plusieurs vues [primitives](glossary://primitive%20view) ou composées.
</string>
				<key>Title</key>
				<string>vue composée</string>
			</dict>
		</dict>
		<key>composition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Le processus consistant à associer de petites parties d’une application pour former des éléments plus importants qui sont plus simples à utiliser et à comprendre.</string>
				<key>Title</key>
				<string>composition</string>
			</dict>
		</dict>
		<key>compound assignment operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un opérateur qui associe l’attribution (la définition de la valeur d’une variable) avec une autre opération, comme une addition ou une soustraction. Par exemple, si la valeur actuelle de `a` est `1`, utiliser `a += 3` ajoute `3` à `1` et attribue le résultat à `a`, pour que la valeur de `a` passe à `4`.</string>
				<key>Title</key>
				<string>opérateur d’attribution composée</string>
			</dict>
		</dict>
		<key>computed property</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Au lieu de stocker une valeur directement, une propriété calculée calcule une valeur en fonction de l’état actuel d’autres valeurs connexes au moment de la récupération.

Dans l’exemple ci-dessous, la surface est une propriété calculée, tandis que la largeur `width` et la hauteur `height` sont des propriétés stockées :

```
struct RectangleCalculator { 
    var width = 10.0
    var height = 10.0
    
    var area : Double { 
        return width * height
    }
} 
```</string>
				<key>Title</key>
				<string>propriété calculée</string>
			</dict>
		</dict>
		<key>conditional code</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Du code qui s’exécute uniquement lorsque certaines conditions sont satisfaites. Par exemple, les instructions `if` et les boucles `while` contiennent du code conditionnel qui s’exécute uniquement lorsqu’une condition est `true`.</string>
				<key>Title</key>
				<string>code conditionnel</string>
			</dict>
		</dict>
		<key>conform</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un type est dit conforme à un protocole lorsqu’il fournit sa propre implémentation des exigences de ce protocole.</string>
				<key>Title</key>
				<string>conforme</string>
			</dict>
		</dict>
		<key>constant</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un conteneur désigné qui contient une valeur ne pouvant pas être modifiée.</string>
				<key>Title</key>
				<string>constante</string>
			</dict>
		</dict>
		<key>container</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un conteneur, également appelé une [vue parente](glossary://parent%20view), est une vue qui contient d’autres vues.</string>
				<key>Title</key>
				<string>conteneur</string>
			</dict>
		</dict>
		<key>coordinates</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un ensemble de nombres qui déterminent une position unique dans un espace. Par exemple, (100, -200) sont les coordonnées d’un point dans un espace 2D où la coordonnée x est 100 et la coordonnée y est -200.</string>
				<key>Title</key>
				<string>coordonnées</string>
			</dict>
		</dict>
		<key>data</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Informations traitées ou stockées par un ordinateur et différentes du code qui s’y applique.</string>
				<key>Title</key>
				<string>données</string>
			</dict>
		</dict>
		<key>debug</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Trouver et corriger des erreurs dans le code qui empêchent une application de s’exécuter correctement. </string>
				<key>Title</key>
				<string>débogage</string>
			</dict>
		</dict>
		<key>declaration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un extrait de code qui crée quelque chose de nouveau dans ton application, comme une fonction, une variable ou un type personnalisé. Par exemple, `let planet = “Earth”` déclare une nouvelle constante, `planet`, et lui attribue une valeur de `"Earth"`.</string>
				<key>Title</key>
				<string>déclaration</string>
			</dict>
		</dict>
		<key>decomposition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Le processus consistant à répartir un gros problème en plus petits éléments plus faciles à gérer.</string>
				<key>Title</key>
				<string>décomposition</string>
			</dict>
		</dict>
		<key>decrement</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Réduire une valeur par un entier, souvent 1.</string>
				<key>Title</key>
				<string>décrémenter</string>
			</dict>
		</dict>
		<key>define</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Fournir la valeur explicite ou le comportement d’un extrait de code nouvellement créé, comme une fonction, une variable ou un type personnalisé. Par exemple, tu définis une fonction en ajoutant un ensemble de commandes à l’intérieur de la fonction pour lui indiquer ce qu’il faut faire.</string>
				<key>Title</key>
				<string>définir</string>
			</dict>
		</dict>
		<key>dot notation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une forme de syntaxe servant à accéder aux propriétés ou à appeler les méthodes d’une instance. Par exemple, `expert.toggleSwitch()` appelle la méthode `toggleSwitch()` dans l’instance `expert`.</string>
				<key>Title</key>
				<string>notation par points</string>
			</dict>
		</dict>
		<key>efficiency</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une mesure de la qualité d’un morceau de code, sa capacité à exécuter ce pour quoi il a été conçu rapidement en utilisant le moins de ressources (mémoire et puissance) possible.</string>
				<key>Title</key>
				<string>efficacité</string>
			</dict>
		</dict>
		<key>else block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Le dernier bloc de code dans une instruction `if`. Le bloc `else` s’exécute si toutes les conditions de l’instruction `if` sont `false`.</string>
				<key>Title</key>
				<string>bloc else</string>
			</dict>
		</dict>
		<key>else if block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un bloc de code dans une instruction `if`, permettant de vérifier une condition qui ne l’est pas par le bloc `if` ou tout autre bloc `else if`.</string>
				<key>Title</key>
				<string>bloc else if</string>
			</dict>
		</dict>
		<key>enumeration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un type qui définit un ensemble de valeurs uniques, mais associées, que l’on appelle *cas d’énumération*. Par exemple, une énumération `Direction` définit des cas pour chaque point cardinal : `north`, `south`, `east` et `west`. Quand tu attribues une énumération à une variable ou à une constante, tu dois toujours choisir un seul de ses cas, comme `let compassDirection: Direction = .north`.</string>
				<key>Title</key>
				<string>énumération</string>
			</dict>
		</dict>
		<key>environment object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ajoute le [wrapper de propriété](glossary://property%20wrapper) `@EnvironmentObject` pour déclarer une propriété d’objet observable fournie par une vue parente ou ancêtre. Si tu déclares une propriété en tant qu’objet d’environnement, assure-toi de définir une instance de modèle correspondante sur une vue ancêtre en appelant son modificateur `environmentObject(_:)`.</string>
				<key>Title</key>
				<string>objet d’environnement</string>
			</dict>
		</dict>
		<key>event</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une action qui peut être détectée par une application pour ordinateur. La saisie, comme appuyer sur un bouton ou faire pivoter l’écran, déclenche un évènement.</string>
				<key>Title</key>
				<string>évènement</string>
			</dict>
		</dict>
		<key>event handler</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une fonction appelée après l’apparition d’un évènement, pour le gérer.</string>
				<key>Title</key>
				<string>gestionnaire d’évènements</string>
			</dict>
		</dict>
		<key>filtering</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Traitement des données dans une collection ou une structure de données pour produire un nouvel ensemble.</string>
				<key>Title</key>
				<string>filtrage</string>
			</dict>
		</dict>
		<key>font</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un ensemble de caractères textuels dans un style visuel, un poids et une taille spécifiques. Le style visuel d’une police est appelé *police de caractères*, et les variations de ce style forment une *famille*. Par exemple, HelveticaNeue est une police de caractères, et HelveticaNeue-Bold 10 points est une police.</string>
				<key>Title</key>
				<string>police</string>
			</dict>
		</dict>
		<key>for loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un bloc de code répété qui s’exécute un certain nombre de fois.</string>
				<key>Title</key>
				<string>boucle for</string>
			</dict>
		</dict>
		<key>full function name</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Le nom complet d’une fonction, notamment les noms de ses paramètres séparés par des deux-points (`:`) ; par exemple, `move(to:duration:)`.</string>
				<key>Title</key>
				<string>nom complet de la fonction</string>
			</dict>
		</dict>
		<key>function</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un ensemble de [commandes](glossary://command) désigné qui peut être exécuté à tout moment en cas de besoin.</string>
				<key>Title</key>
				<string>fonction</string>
			</dict>
		</dict>
		<key>function definition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>La définition d’une fonction décrit ce qu’elle permet de faire, ce qu’elle s’attend à recevoir et ce qu’elle renvoie une fois qu’elle a terminé.</string>
				<key>Title</key>
				<string>définition de fonction</string>
			</dict>
		</dict>
		<key>global function</key>
		<dict>
			<key>FirstUse</key>
			<dict>
				<key>PageReference</key>
				<string></string>
				<key>_LOCALIZABLE_</key>
				<dict>
					<key>Title</key>
					<string></string>
				</dict>
			</dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une fonction à laquelle il est possible d’accéder depuis n’importe quel fichier de ton projet.</string>
				<key>Title</key>
				<string>fonction globale</string>
			</dict>
		</dict>
		<key>global variable</key>
		<dict>
			<key>FirstUse</key>
			<dict>
				<key>PageReference</key>
				<string></string>
				<key>_LOCALIZABLE_</key>
				<dict>
					<key>Title</key>
					<string></string>
				</dict>
			</dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une variable à laquelle il est possible d’accéder depuis n’importe quel fichier de ton projet.</string>
				<key>Title</key>
				<string>variable globale</string>
			</dict>
		</dict>
		<key>grayscale</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un dégradé de gris, allant du blanc au noir.</string>
				<key>Title</key>
				<string>échelle de gris</string>
			</dict>
		</dict>
		<key>gyroscope</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un capteur qui mesure l’orientation de ton appareil en trois dimensions : son inclinaison d’avant en arrière, son inclinaison de gauche à droite et sa rotation autour de son centre.</string>
				<key>Title</key>
				<string>gyroscope</string>
			</dict>
		</dict>
		<key>hertz</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Le Hertz (Hz) correspond à un cycle par seconde. Lorsque cette mesure est appliquée aux vibrations sonores, 1 Hz correspond à une onde sonore par seconde. Les humains sont capables d’entendre des sons compris entre 20 Hz et 16 000 Hz.</string>
				<key>Title</key>
				<string>hertz</string>
			</dict>
		</dict>
		<key>hue</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Le ton d’une couleur dans la roue des couleurs. Il s’agit d’un double (nombre décimal) compris entre `0` et `1`.</string>
				<key>Title</key>
				<string>teinte</string>
			</dict>
		</dict>
		<key>if block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Le premier bloc de code dans une instruction `if`. Le bloc `if` s’exécute si la condition de l’instruction `if` est `true`.</string>
				<key>Title</key>
				<string>bloc if</string>
			</dict>
		</dict>
		<key>if statement</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une structure de code permettant d’exécuter du code en fonction de la valeur d’une ou de plusieurs conditions. Le premier bloc de code dans une instruction `if` est le bloc `if`. Une instruction `if` peut également contenir d’autres blocs fournissant des vérifications supplémentaires, comme un bloc `else` et `else if`.</string>
				<key>Title</key>
				<string>instruction if</string>
			</dict>
		</dict>
		<key>increment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Augmenter une valeur par un entier, souvent 1.</string>
				<key>Title</key>
				<string>incrémenter</string>
			</dict>
		</dict>
		<key>index</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un numéro représentant la position d’un élément dans un [tableau](glossary://array).</string>
				<key>Title</key>
				<string>index</string>
			</dict>
		</dict>
		<key>index out of range error</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une erreur qui survient lorsque l’on essaie d’accéder à un tableau en utilisant un index qui se trouve en dehors des limites de ce tableau. Par exemple, l’index `2` se trouve en dehors des limites du tableau suivant : `[17, 42]`.</string>
				<key>Title</key>
				<string>erreur d’index hors limites</string>
			</dict>
		</dict>
		<key>initialization</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>L’action consistant à créer une nouvelle instance d’un type, ce qui comprend la définition de valeurs initiales pour toute propriété du type.</string>
				<key>Title</key>
				<string>initialisation</string>
			</dict>
		</dict>
		<key>initializer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un initialiseur est appelé pour créer une [instance](glossary://instance) d’un type. L’initialiseur doit définir toutes les valeurs initiales correspondant aux propriétés du type. Il contient souvent du code de configuration supplémentaire.</string>
				<key>Title</key>
				<string>initialiseur</string>
			</dict>
		</dict>
		<key>inner loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un bloc de code se répétant (une boucle) et étant imbriqué dans une autre boucle (extérieure).</string>
				<key>Title</key>
				<string>boucle intérieure</string>
			</dict>
		</dict>
		<key>instance</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une valeur d’un certain [type](glossary://type). Par exemple, dans `let motion = MotionSensor()`, `motion` est une instance du type `MotionSensor`.</string>
				<key>Title</key>
				<string>instance</string>
			</dict>
		</dict>
		<key>iteration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>L’action consistant à répéter un processus, comme effectuer la même opération pour chaque élément d’un tableau.</string>
				<key>Title</key>
				<string>itération</string>
			</dict>
		</dict>
		<key>lag</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une diminution de la vitesse ou de la réactivité de l’app en raison de la demande de traitement, de la puissance de traitement ou des deux.</string>
				<key>Title</key>
				<string>lag</string>
			</dict>
		</dict>
		<key>leading edge</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Le bord avant, lorsque ce terme est utilisé en référence au contenu d’une vue, fait référence à la position horizontale du début du contenu. La position du bord avant dépend de tes préférences, et est généralement fondée sur tes paramètres régionaux et linguistiques.
                    Par exemple, avec les langues qui sont lues de gauche à droite, telles que l’anglais et le français, le bord avant se trouve à gauche. Avec les langues qui se lisent de droite à gauche, telles que l’arabe ou l’hébreu, le bord avant est situé à droite.</string>
				<key>Title</key>
				<string>bord avant</string>
			</dict>
		</dict>
		<key>literal</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Les littéraux te permettent d’intégrer des images et de la couleur directement dans ton code à l’aide de la bibliothèque d’images ou du sélecteur de couleur. Les littéraux sont les valeurs de tes données représentées dans leur format natif, directement dans l’éditeur.</string>
				<key>Title</key>
				<string>littéral</string>
			</dict>
		</dict>
		<key>logical AND operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un symbole (`&amp;&amp;`) qui associe deux valeurs booléennes. Les deux valeurs doivent être vraies pour que l’ensemble du code le soit aussi. Par exemple, `a &amp;&amp; b` est uniquement vrai si `a` et `b` sont `true`.</string>
				<key>Title</key>
				<string>opérateur logique AND</string>
			</dict>
		</dict>
		<key>logical NOT operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un symbole (`!`) qui inverse la valeur booléenne d’un extrait de code. Par exemple, si `a` est `true`, alors `!a` est `false`.</string>
				<key>Title</key>
				<string>opérateur logique NOT</string>
			</dict>
		</dict>
		<key>logical OR operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un symbole (`||`) qui associe deux valeurs booléennes. Une seule valeur doit être vraie pour que l’ensemble du code le soit aussi. Par exemple, `a || b` est `true` si `a` ou `b` est `true` (ou si les deux sont `true`).</string>
				<key>Title</key>
				<string>opérateur logique OR</string>
			</dict>
		</dict>
		<key>logical operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un symbole, tel que `&amp;&amp;`, `||` ou `!`, qui modifie ou associe les valeurs logiques booléennes `true` et `false`.</string>
				<key>Title</key>
				<string>opérateur logique</string>
			</dict>
		</dict>
		<key>loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un bloc de code qui se répète un certain nombre de fois (comme une boucle `for`) ou jusqu’à ce qu’une condition soit satisfaite (par exemple, une boucle `while`).</string>
				<key>Title</key>
				<string>boucle</string>
			</dict>
		</dict>
		<key>memory</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>La partie d’un ordinateur qui stocke le code d’une application et les données qu’elle utilise, temporairement ou de façon permanente.</string>
				<key>Title</key>
				<string>mémoire</string>
			</dict>
		</dict>
		<key>method</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une fonction ou un ensemble de commandes qui est défini à l’intérieur d’un [type](glossary://type).</string>
				<key>Title</key>
				<string>méthode</string>
			</dict>
		</dict>
		<key>modifier</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Dans SwiftUI, un modificateur est une [méthode](glossary://method) appelée sur une vue pour modifier son apparence ou son comportement. Pour que les modificateurs soient plus lisibles, chacun est placé sur une ligne individuelle sous l’[instance](glossary://instance) de la vue.</string>
				<key>Title</key>
				<string>modificateur</string>
			</dict>
		</dict>
		<key>modulo operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un symbole (`%`) qui renvoie le reste une fois qu’un nombre a été divisé par un autre. Par exemple, `17 % 5` renvoie `2`.</string>
				<key>Title</key>
				<string>opérateur modulo</string>
			</dict>
		</dict>
		<key>navigation bar</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une interface de navigation te permet d’effectuer un choix par écran jusqu’à ce que tu atteignes une destination. Pour accéder à une autre destination, tu dois revenir en arrière ou recommencer depuis le début et faire des choix différents. La barre de navigation située en haut de l’écran affiche un titre pour t’aider à te rappeler où tu te trouves. Elle te fournit également un bouton de retour pour que tu puisses revenir à l’écran précédent.</string>
				<key>Title</key>
				<string>barre de navigation</string>
			</dict>
		</dict>
		<key>nest</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Placer un bloc de code qui se répète, tel qu’une boucle, à l’intérieur d’un autre.</string>
				<key>Title</key>
				<string>imbriquer</string>
			</dict>
		</dict>
		<key>observable object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Lorsqu’une classe est [conforme](glossary://conform) au protocole `ObservableObject`, toute modification de ses valeurs publiées entraînera la mise à jour automatique de toutes les vues qui utilisent ces valeurs afin de refléter les modifications.</string>
				<key>Title</key>
				<string>objet observable</string>
			</dict>
		</dict>
		<key>observed object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Lorsqu’une classe est [conforme](glossary://conform) au protocole `ObservableObject`, la modification de l’une de ses valeurs publiées entraîne la mise à jour automatique de toutes les vues qui utilisent cette valeur afin de refléter les modifications.</string>
				<key>Title</key>
				<string>objet observable</string>
			</dict>
		</dict>
		<key>observer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>En ce qui concerne un [objet observable](glossary://observable%20object), un observateur est toute vue ou tout objet qui utilise les données de l’objet observable. Lorsque les données de l’objet observable changent, SwiftUI reconnaît le changement et indique aux observateurs de se mettre à jour.</string>
				<key>Title</key>
				<string>observateur</string>
			</dict>
		</dict>
		<key>operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un symbole, tel que `+`, `-` ou `&amp;&amp;`, qui représente une action effectuée sur une ou plusieurs valeurs. Par exemple, dans `1 + 2`, l’opérateur d’addition (`+`) ajoute les nombres `1` et `2`.</string>
				<key>Title</key>
				<string>opérateur</string>
			</dict>
		</dict>
		<key>outer loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un bloc de code se répétant (une boucle) et contenant une autre boucle (intérieure).</string>
				<key>Title</key>
				<string>boucle extérieure</string>
			</dict>
		</dict>
		<key>parameter</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Le nom d’une valeur d’entrée pour une fonction, utilisée dans la définition de cette dernière. Par exemple, dans `move(distance: Int)`, `distance` est un paramètre qui prend une valeur de type Int.</string>
				<key>Title</key>
				<string>paramètre</string>
			</dict>
		</dict>
		<key>parent view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>La vue contenant une ou plusieurs [vues enfants](glossary://child%20view).</string>
				<key>Title</key>
				<string>vue parente</string>
			</dict>
		</dict>
		<key>pattern</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Mot anglais utilisé en programmation pour définir un ensemble de circonstances ou de données se répétant.
Note : les termes français motif, modèle, structure ou patron sont parfois également rencontrés pour désigner ce concept.</string>
				<key>Title</key>
				<string>pattern</string>
			</dict>
		</dict>
		<key>pitch</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Dans le domaine musical, la tonalité de la note indique le degré de basses ou d’aigus d’une note, principalement en fonction de la fréquence de la vibration. La tonalité d’une note peut être mesurée en [Hertz](glossary://hertz). Une haute tonalité (~2 000 Hz) donne un son comparable à un sifflement, tandis qu’une basse tonalité (~40 Hz) donne un son comparable à une vache qui mugit.</string>
				<key>Title</key>
				<string>tonalité</string>
			</dict>
		</dict>
		<key>primitive</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>En ce qui concerne un framework de programmation, tel que SwiftUI, une primitive est une composante de base fournie par le framework pour composer des comportements ou des [interfaces](glossary://user%20interface) plus complexes.
</string>
				<key>Title</key>
				<string>primitive</string>
			</dict>
		</dict>
		<key>primitive view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une [vue](glossary://view) fournie par le framework [SwiftUI](glossary://SwiftUI), telle qu’une vue `Button`, `Text` ou `Image`. Les vues primitives sont utilisées comme des composantes de base pour créer des [vues composées](glossary://composed%20view) plus complexes dans ton [interface utilisateur](glossary://user%20interface).</string>
				<key>Title</key>
				<string>vue primitive</string>
			</dict>
		</dict>
		<key>private</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Le mot-clé private rend le code disponible uniquement au sein de ce fichier source précis.
- callout(Exemple):
`private class MyApp: App { }`</string>
				<key>Title</key>
				<string>private</string>
			</dict>
		</dict>
		<key>property</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une variable (un conteneur désigné qui contient une valeur) définie à l’intérieur d’un type.</string>
				<key>Title</key>
				<string>propriété</string>
			</dict>
		</dict>
		<key>property wrapper</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un wrapper de propriété est un moyen simple d’appliquer un pattern commun de comportement à une propriété. Ce wrapper est une manière d’annoter la propriété qui définit de quelle manière elle sera stockée ou calculée à la lecture.   Par exemple, le wrapper de propriété `@State` indique à SwiftUI de gérer le stockage d’une valeur et, dès que cette valeur change, de mettre à jour toute partie d’une vue qui l’utilise.</string>
				<key>Title</key>
				<string>wrapper de propriété</string>
			</dict>
		</dict>
		<key>protocol</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un ensemble d’exigences, telles que des méthodes et des propriétés, qui peuvent être adoptées (ou suivies) par un type, tel qu’une classe, une structure ou une énumération.   Lorsqu’un type adopte un protocole, il fournit sa propre implémentation des exigences du protocole, et il est dit conforme à ce protocole.</string>
				<key>Title</key>
				<string>protocole</string>
			</dict>
		</dict>
		<key>pseudocode</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>La description d’un algorithme facile à lire, généralement écrite avec un mélange de langue courante et de code.</string>
				<key>Title</key>
				<string>pseudo-code</string>
			</dict>
		</dict>
		<key>public</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Le mot-clé public rend le code disponible pour n’importe quel fichier de ton projet.
                        
- callout(Exemple):
`public func decorateWithSticker(space: Space) { }`
                    </string>
				<key>Title</key>
				<string>public</string>
			</dict>
		</dict>
		<key>published value</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ajoute le [wrapper de propriété](glossary://property%20wrapper) `@Published` pour déclarer une propriété qui avertit tous les [observateurs](glossary://observer) lorsque sa valeur est sur le point de changer. Lorsque la valeur change, SwiftUI met à jour toutes les vues qui utilisent cette donnée.</string>
				<key>Title</key>
				<string>valeur publiée</string>
			</dict>
		</dict>
		<key>return type</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Lorsque tu définis une fonction, tu peux également choisir de définir un type de valeur que la fonction retransmet comme sortie une fois l’opération terminée. On appelle cela son type de renvoi.</string>
				<key>Title</key>
				<string>type de renvoi</string>
			</dict>
		</dict>
		<key>reusability</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une caractéristique du code lui permettant d’être utilisé dans différentes situations au sein d’une application.</string>
				<key>Title</key>
				<string>réutilisabilité</string>
			</dict>
		</dict>
		<key>root view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une vue dans laquelle sont placées toutes les autres vues. Également appelée [vue au plus haut niveau](glossary://top-level%20view), cette vue se trouve en haut d’une [hiérarchie de vue](glossary://view%20hierarchy) et agit en tant que [vue parente](glossary://parent%20view) pour toutes les [vues enfants](glossary://child%20view) de la hiérarchie.</string>
				<key>Title</key>
				<string>vue racine</string>
			</dict>
		</dict>
		<key>saturation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>L’intensité de la teinte, allant d’un ton gris à la couleur réelle. La saturation est un double (nombre décimal) compris entre `0` et `1`.</string>
				<key>Title</key>
				<string>saturation</string>
			</dict>
		</dict>
		<key>sensor</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un capteur est un appareil qui détecte des évènements, comme une modification de la chaleur, de la lumière, du son ou du mouvement, et renvoie une valeur.</string>
				<key>Title</key>
				<string>capteur</string>
			</dict>
		</dict>
		<key>source of truth</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>En matière de conception d’app, un emplacement unique où toutes les données sont modifiées. Toutes les autres connexions à ces données se font par référence uniquement, ce qui évite la duplication de leurs informations dans d’autres emplacements. </string>
				<key>Title</key>
				<string>source de vérité</string>
			</dict>
		</dict>
		<key>speech synthesis</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Génération par un ordinateur de sons, généralement à partir de texte, qui ressemblent à un discours humain.</string>
				<key>Title</key>
				<string>synthèse de la parole</string>
			</dict>
		</dict>
		<key>state</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Les informations stockées sur une variable, une application ou un système à un moment donné.</string>
				<key>Title</key>
				<string>état</string>
			</dict>
		</dict>
		<key>state object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ajoute le [wrapper de propriété](glossary://property%20wrapper) `@StateObject` pour déclarer un objet d’état et fournis une valeur initiale conforme au [protocole](glossary://protocol) `ObservableObject`. SwiftUI gère le stockage pour un objet d’état et met à jour toutes les sous-vues qui utilisent la valeur chaque fois que ses valeurs publiées changent.</string>
				<key>Title</key>
				<string>objet d’état</string>
			</dict>
		</dict>
		<key>state value</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Ajoute `@State` avant une variable pour indiquer à SwiftUI de gérer le stockage d’une valeur. Lorsque la valeur change, SwiftUI met à jour toute partie de la vue qui utilise la valeur.</string>
				<key>Title</key>
				<string>valeur d’état</string>
			</dict>
		</dict>
		<key>statement</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une structure, comme une boucle ou une instruction `if`, qui organise le code dans une application.</string>
				<key>Title</key>
				<string>instruction</string>
			</dict>
		</dict>
		<key>string component</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une partie (ou sous-chaîne) d’une chaîne, après que la chaîne a été divisée par un séparateur. Par exemple, si la chaîne `"chien+chat+poisson"` est divisée par un séparateur `"+"`, les composants créés seront les chaînes `"chien"`, `"chat"` et `"poisson"`.</string>
				<key>Title</key>
				<string>composant de chaîne</string>
			</dict>
		</dict>
		<key>string concatenation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Le regroupement de chaînes en les ajoutant les unes à la suite des autres. Par exemple, la concaténation de `«foot»` et `«ball»` est `«football»`.</string>
				<key>Title</key>
				<string>concaténation de chaîne</string>
			</dict>
		</dict>
		<key>string interpolation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>L’utilisation de constantes, de variables ou d’expressions de code dans une chaîne plus longue, à remplacer par leurs valeurs réelles lors de l’évaluation de la chaîne. Par exemple, dans la chaîne `"Lili a mangé un \(fruit)."`, si `fruit` est une variable dont la valeur correspond à `"pêche"`, alors `\(fruit)` est remplacée par `"pêche"` lors de l’évaluation de la chaîne. Celle-ci devient `"Lili a mangé une pêche."`</string>
				<key>Title</key>
				<string>interpolation de chaîne</string>
			</dict>
		</dict>
		<key>syntax</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Les règles pour l’écriture de code que les ordinateurs peuvent comprendre et exécuter.</string>
				<key>Title</key>
				<string>syntaxe</string>
			</dict>
		</dict>
		<key>top-level view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une vue dans laquelle sont placées toutes les autres vues. Également appelée [vue racine](glossary://root%20view), cette vue se trouve en haut d’une [hiérarchie de vue](glossary://view%20hierarchy) et agit en tant que [vue parente](glossary://parent%20view) pour toutes les [vues enfants](glossary://child%20view) de la hiérarchie.</string>
				<key>Title</key>
				<string>vue au plus haut niveau</string>
			</dict>
		</dict>
		<key>trailing edge</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Le bord arrière, lorsque ce terme est utilisé en référence au contenu d’une vue, fait référence à la position horizontale de la fin du contenu. La position du bord arrière dépend de tes préférences, et est généralement fondée sur tes paramètres régionaux et linguistiques.
                    Par exemple, avec les langues qui sont lues de gauche à droite, telles que l’anglais et le français, le bord arrière se trouve à droite. Avec les langues qui se lisent de droite à gauche, telles que l’arabe ou l’hébreu, le bord arrière est situé à gauche.</string>
				<key>Title</key>
				<string>bord avant</string>
			</dict>
		</dict>
		<key>type</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un regroupement désigné de propriétés (les fonctionnalités) et de méthodes (les comportements) d’un type de données.</string>
				<key>Title</key>
				<string>type</string>
			</dict>
		</dict>
		<key>typography</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>L’art et la technique d’arranger les caractères pour que la langue écrite soit lisible et agréable à l’œil une fois à l’écran.</string>
				<key>Title</key>
				<string>typographie</string>
			</dict>
		</dict>
		<key>user input</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Les informations qu’une application obtient de son interaction avec l’utilisateur, comme quand celui-ci touche l’écran, saisit du texte sur le clavier ou parle dans le micro. 
</string>
				<key>Title</key>
				<string>saisie utilisateur</string>
			</dict>
		</dict>
		<key>user interface</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Les moyens dont un utilisateur dispose pour contrôler une app. Également appelé « IU », ce terme est souvent utilisé pour décrire la portion visuelle d’une app avec laquelle l’utilisateur interagit. Elle comporte des éléments tels que des images, du texte, des boutons, des curseurs, des vues défilantes et plus encore.</string>
				<key>Title</key>
				<string>interface utilisateur</string>
			</dict>
		</dict>
		<key>variable</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un conteneur désigné qui contient une valeur pouvant être modifiée.</string>
				<key>Title</key>
				<string>variable</string>
			</dict>
		</dict>
		<key>velocity</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>La vitesse d’un élément dans une direction donnée.</string>
				<key>Title</key>
				<string>vélocité</string>
			</dict>
		</dict>
		<key>view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une vue est la composante de base de l’interface utilisateur de ton app, et représente tout élément visuel [conforme](glossary://conform) au [protocole](glossary://protocol) `View`.

Quelques exemples de vues dans SwiftUI sont les vues de texte, les vues d’image, les curseurs, les grilles, les boutons et les formes.</string>
				<key>Title</key>
				<string>vue</string>
			</dict>
		</dict>
		<key>view hierarchy</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Une structure qui définit la disposition des vues par rapport aux autres vues, avec une référence à une instance de la vue au plus haut niveau en haut de la hiérarchie. La vue au plus haut niveau peut contenir un nombre illimité de sous-vues, dont chacune peut contenir ses propres sous-vues, et ainsi de suite.</string>
				<key>Title</key>
				<string>hiérarchie de vue</string>
			</dict>
		</dict>
		<key>volume</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Volume correspond au niveau sonore du son détecté par le [capteur](glossary://sensor). Il est compris entre 0 et 1.</string>
				<key>Title</key>
				<string>volume</string>
			</dict>
		</dict>
		<key>while loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un bloc de code qui s’exécute tant qu’une condition indiquée est `true`. Lorsqu’une condition devient `false`, la boucle ne s’exécute plus.</string>
				<key>Title</key>
				<string>boucle while</string>
			</dict>
		</dict>
		<key>wireframe</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Le contour d’un élément du monde en puzzle, comme une gemme, un interrupteur ou un bloc. Un fil de fer indique la possibilité que l’élément pourrait apparaître de manière aléatoire chaque fois que l’on exécute le puzzle.</string>
				<key>Title</key>
				<string>fil de fer</string>
			</dict>
		</dict>
	</dict>
</dict>
</plist>
