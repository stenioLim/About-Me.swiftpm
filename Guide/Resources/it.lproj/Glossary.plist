<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Terms</key>
	<dict>
		<key>Alpha</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Alfa, o *canale alfa*, si riferisce all'opacità di un colore e va da `0` (completamente trasparente) a `1` (completamente opaco). I dati alfa sono un Double (numero decimale) che va da 0 a 1.</string>
				<key>Title</key>
				<string>alfa</string>
			</dict>
		</dict>
		<key>Boolean</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un tipo con un valore `true` o `false`. Per esempio, `9 &lt; 7` restituisce un valore booleano `false` perché `9` non è minore di `7`.</string>
				<key>Title</key>
				<string>Booleano</string>
			</dict>
		</dict>
		<key>Double</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un tipo che archivia numeri che hanno componenti frazionari. Ad esempio, 3.14. Nota: in Swift Playgrounds il separatore decimale utilizzato è il punto (.) e non la virgola (,).</string>
				<key>Title</key>
				<string>Double</string>
			</dict>
		</dict>
		<key>Int</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un tipo che archivia un numero intero, ossia un numero senza decimali, come `10` o `-42`.</string>
				<key>Title</key>
				<string>Int</string>
			</dict>
		</dict>
		<key>String</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un tipo che archivia una serie di caratteri, come `"ciao, mondo"` o `"gattini danzanti"`.</string>
				<key>Title</key>
				<string>String</string>
			</dict>
		</dict>
		<key>Swift</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Il linguaggio di programmazione di Apple, utilizzato per scrivere app per iPhone, iPad, Mac, Apple Watch e Apple TV.</string>
				<key>Title</key>
				<string>Swift</string>
			</dict>
		</dict>
		<key>SwiftUI</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>SwiftUI è un modo moderno di dichiarare le interfacce utente per qualsiasi applicazione Apple. Esso fornisce viste, controlli e strutture di layout per dichiarare l'interfaccia utente dell'app. Il framework include gestori evento per fornire tocchi, gesti e altri tipi di input e strumenti per gestire il flusso di dati dai modelli dell'app alle viste, così come controlli che gli utenti visualizzeranno e utilizzeranno.</string>
				<key>Title</key>
				<string>SwiftUI</string>
			</dict>
		</dict>
		<key>absolute value</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Il valore senza segno di un numero. Ad esempio, il valore assoluto di -12 è 12 e il valore assoluto di 23.4 è 23.4.</string>
				<key>Title</key>
				<string>valore assoluto</string>
			</dict>
		</dict>
		<key>abstraction</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una versione semplificata di un elemento più complesso.   Un'astrazione nasconde i dettagli in modo che tu possa esaminare e unire pezzi di codice più facilmente.   Ad esempio, un [tipo](glossary://type) è un'astrazione che nasconde la configurazione, le proprietà e i metodi di un'istanza di tale tipo.</string>
				<key>Title</key>
				<string>astrazione</string>
			</dict>
		</dict>
		<key>accelerometer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un sensore che misura l'accelerazione del dispositivo in tre dimensioni: in alto e in basso, in avanti e all'indietro, a destra e a sinistra.</string>
				<key>Title</key>
				<string>accelerometro</string>
			</dict>
		</dict>
		<key>adopt</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Per adottare un protocollo, un tipo fornisce una serie di implementazioni per i requisiti del protocollo, come i metodi e le proprietà elencati.</string>
				<key>Title</key>
				<string>adottare</string>
			</dict>
		</dict>
		<key>algorithm</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un insieme di istruzioni o regole passo passo per risolvere un problema. Per esempio, un elenco dei passaggi usati per preparare una tazza di tè può essere considerato un algoritmo.</string>
				<key>Title</key>
				<string>algoritmo</string>
			</dict>
		</dict>
		<key>append</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Aggiungere alla fine di qualcosa. Ad esempio, puoi aggiungere una stringa alla fine di un'altra stringa o aggiungere un elemento a un array di elementi.
</string>
				<key>Title</key>
				<string>aggiungere</string>
			</dict>
		</dict>
		<key>application</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Software, composto da codice, che consente di eseguire attività specifiche. Ad esempio, puoi utilizzare l'applicazione (app) Messaggi per inviare e ricevere messaggi.</string>
				<key>Title</key>
				<string>applicazione</string>
			</dict>
		</dict>
		<key>argument</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un valore di input trasmesso a una funzione per personalizzarne il comportamento. Ad esempio, nel richiamare la funzione `move(distance: 3)`, il numero `3` è un argomento che specifica il numero di spazi di cui muoversi.</string>
				<key>Title</key>
				<string>argomento</string>
			</dict>
		</dict>
		<key>arithmetic operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un simbolo, come `+`, `-`, `*` o `/`, che realizza delle operazioni matematiche di base su uno o più numeri. Per esempio, `42 / 7` e `17 - 5` usano degli operatori aritmetici.</string>
				<key>Title</key>
				<string>operatore aritmetico</string>
			</dict>
		</dict>
		<key>array</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una raccolta in cui viene archiviato un elenco ordinato di elementi dello stesso tipo. Lo stesso elemento può apparire più volte in posizioni diverse. Ad esempio, `highScores = [37, 34, 29, 29, 26]` è un array di [numeri interi](glossary://Int).</string>
				<key>Title</key>
				<string>array</string>
			</dict>
		</dict>
		<key>asset</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Le risorse sono immagini, suoni e altri elementi che la tua app utilizza. Puoi importare risorse in Swift Playgrounds da altre app come File e Foto.</string>
				<key>Title</key>
				<string>risorsa</string>
			</dict>
		</dict>
		<key>assignment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un'azione che imposta il valore di una variabile o una costante.</string>
				<key>Title</key>
				<string>assegnazione</string>
			</dict>
		</dict>
		<key>assignment operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Il simbolo `=` usato per impostare il valore della variabile. Per esempio, `greeting = "ciao"` imposta il valore di `greeting` su `"ciao"`.</string>
				<key>Title</key>
				<string>operatore di assegnazione</string>
			</dict>
		</dict>
		<key>asynchronous process</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un blocco di codice che viene eseguito quando il resto dell'app o del programma continua a essere in esecuzione. A differenza del processo sincrono, dove l'esecuzione del programma viene bloccata fino al suo completamento, il processo asincrono può essere eseguito simultaneamente al resto del codice dell'app.</string>
				<key>Title</key>
				<string>processo asincrono</string>
			</dict>
		</dict>
		<key>binding</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>È possibile aggiungere il [wrapper di proprietà](glossary://property%20wrapper) `@Binding` per creare un collegamento a due sensi tra una proprietà che salva dati e una vista che visualizza e modifica tali dati. Un vincolo collega una proprietà a una sorgente univoca salvata altrove, invece di salvare i dati direttamente. 

Per esempio, un pulsante che passa dalla riproduzione alla pausa, può creare un vincolo a una proprietà della propria vista principale usando il wrapper di proprietà `@Binding`.
</string>
				<key>Title</key>
				<string>vincolo</string>
			</dict>
		</dict>
		<key>body</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Il corpo di una [vista](glossary://view) è dove fornisci il contenuto della vista, la quale è composta da almeno una [vista di base](glossary://primitive%20view) che SwiftUI fornisce o da qualsiasi [vista composta](glossary://composed%20view) che hai già creato.</string>
				<key>Title</key>
				<string>corpo</string>
			</dict>
		</dict>
		<key>bounds</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>In un array, l'intervallo di valori che un indice dell'array può avere. Ad esempio, l'array `[17, 42, 95]` può avere valori di indice tra 0 e 2. Il controllo dei limiti è il processo che verifica che un valore di indice sia compreso nei limiti di un array.</string>
				<key>Title</key>
				<string>limiti</string>
			</dict>
		</dict>
		<key>brightness</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Quantità di luce che arriva dalla fotocamera, che va da `0` (buio) a `1` (piena luce). La luminosità è un [Double](glossary://Double) (numero decimale) che va da `0` a `1`.</string>
				<key>Title</key>
				<string>luminosità</string>
			</dict>
		</dict>
		<key>bug</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un errore del codice che impedisce a un'applicazione di funzionare come previsto. 
</string>
				<key>Title</key>
				<string>bug</string>
			</dict>
		</dict>
		<key>bundle</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una rappresentazione del codice e delle risorse salvate in una directory di pacchetto sul disco. I pacchetti organizzano le risorse in sottodirectory ben definite. Inoltre, le strutture di pacchetto variano a seconda della piattaforma e del tipo di pacchetto. Utilizzando un oggetto di pacchetto, è possibile accedere alle risorse del pacchetto senza conoscerne la struttura.</string>
				<key>Title</key>
				<string>pacchetto</string>
			</dict>
		</dict>
		<key>call</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Richiamare una funzione in codice significa eseguire quella funzione ed effettuare le azioni definite al suo interno.</string>
				<key>Title</key>
				<string>richiamare</string>
			</dict>
		</dict>
		<key>child view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una vista all'interno di una [vista principale](glossary://parent%20view). Una vista principale può contenere un qualsiasi numero di viste secondarie, ciascuna delle quali può a sua volta contenere altre viste secondarie, e così via. La vista e i relativi discendenti costituiscono una [gerarchia delle viste](glossary://view%20hierarchy).</string>
				<key>Title</key>
				<string>vista secondaria</string>
			</dict>
		</dict>
		<key>class</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una classe è un contenitore per codice che agisce come un modello per la creazione di più copie dello stesso tipo di elemento. Così come un modello può definire le funzionalità e i comportamenti di un oggetto, come una bicicletta, una classe li definisce come [proprietà](glossary://property) e [metodi](glossary://method).

Quando crei una nuova copia, o [istanza](glossary://instance), di una classe, tale istanza contiene tutte le proprietà e tutti i metodi del modello. I valori di ogni istanza possono però essere modificati in modo indipendente, consentendoti di personalizzare il comportamento di ogni copia. Per esempio, una classe bicicletta può avere una proprietà colore, permettendoti così di creare biciclette sia rosse che blu.</string>
				<key>Title</key>
				<string>classe</string>
			</dict>
		</dict>
		<key>closure</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Le chiusure sono [funzioni](glossary://function) che vengono eseguite, senza bisogno di un nome.
					
```
scene.setOnStartHandler {
    // Corpo della chiusura
}
```
                    
Le chiusure possono acquisire e archiviare i riferimenti a qualsiasi costante e variabile dal contesto in cui sono definite. Questo fenomeno è conosciuto come chiusura di tali costanti e variabili.</string>
				<key>Title</key>
				<string>chiusura</string>
			</dict>
		</dict>
		<key>code comment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>I commenti al codice sono il modo in cui chi programma documenta il proprio codice.   Puoi iniziare un commento su riga singola con due barre oblique seguite da uno spazio, come ad esempio: “// Questo è un commento.”.   Quando esegui il codice, i commenti non vengono eseguiti.</string>
				<key>Title</key>
				<string>commento al codice</string>
			</dict>
		</dict>
		<key>code expression</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una parte di codice che può essere valutata per restituire un valore. Ad esempio, se `months` (mesi) è un array contenente 12 elementi, l'espressione di codice `months.count - 1` restituisce il valore `11`.</string>
				<key>Title</key>
				<string>espressione di codice</string>
			</dict>
		</dict>
		<key>coding</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>La composizione di comandi, strutture di codice e algoritmi per creare un'applicazione.</string>
				<key>Title</key>
				<string>programmazione</string>
			</dict>
		</dict>
		<key>collection</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una struttura di dati, come un array o un dizionario, utilizzata per archiviare più dati.</string>
				<key>Title</key>
				<string>raccolta</string>
			</dict>
		</dict>
		<key>command</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Codice che indica a un'applicazione di realizzare un'azione specifica. </string>
				<key>Title</key>
				<string>comando</string>
			</dict>
		</dict>
		<key>comment out</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Impedire l'esecuzione di una riga di codice convertendola in un [commento al codice](glossary://code%20comment). Puoi farlo aggiungendo `//` davanti a qualsiasi riga di codice. Ad esempio:
                
`// level.run()`</string>
				<key>Title</key>
				<string>convertire in commento</string>
			</dict>
		</dict>
		<key>comparison operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un simbolo, come `==`, `!=`, `&lt;`, `&gt;`, `&lt;=` o `&gt;=`, utilizzato per paragonare due valori. Un operatore di confronto può essere usato in una condizione di un'istruzione `if` o ciclo `while` per restituire un valore booleano che indica se il confronto è `true`. Ad esempio, `6 &gt; 8` confronta `6` con `8` e restituisce `false`.</string>
				<key>Title</key>
				<string>operatore di confronto</string>
			</dict>
		</dict>
		<key>compiler error</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Gli errori del compilatore sono dovuti a inesattezze nel codice. Vedi l'errore come un punto rosso sul margine sinistro e nella barra degli strumenti.</string>
				<key>Title</key>
				<string>errore compilatore</string>
			</dict>
		</dict>
		<key>composed view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una [vista](glossary://view) creata combinando una o più viste [di base](glossary://primitive%20view) o composte.
</string>
				<key>Title</key>
				<string>vista composta</string>
			</dict>
		</dict>
		<key>composition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Il processo di combinare piccole parti di un'applicazione per formare porzioni più grandi con cui è più semplice lavorare e che sono più facili da capire.</string>
				<key>Title</key>
				<string>composizione</string>
			</dict>
		</dict>
		<key>compound assignment operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un operatore che unisce l'assegnazione (impostare il valore di una variabile) ad un'altra operazione, come una somma o una sottrazione. Per esempio, se il valore attuale di `a` è `1`, usando `a += 3`, `3` viene sommato a `1` e il risultato viene assegnato alla variabile `a`, in modo che il valore di `a` diventi `4`.</string>
				<key>Title</key>
				<string>operatore di assegnazione composto</string>
			</dict>
		</dict>
		<key>computed property</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Invece di salvare un valore direttamente, quando raccolta, una proprietà calcolata misura un valore in base allo stato attuale degli altri valori.

Nell'esempio di seguito, l'area è una proprietà calcolata, mentre `width` e `height` sono proprietà salvate:

```
struct RectangleCalculator { 
    var width = 10.0
    var height = 10.0
    
    var area : Double { 
        return width * height
    }
} 
```</string>
				<key>Title</key>
				<string>proprietà calcolata</string>
			</dict>
		</dict>
		<key>conditional code</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Codice da eseguire solo quando vengono soddisfatte delle condizioni specifiche. Ad esempio, le istruzioni `if` e i cicli `while` contengono codice condizionale che viene eseguito unicamente se o quando una condizione è `true`.</string>
				<key>Title</key>
				<string>codice condizionale</string>
			</dict>
		</dict>
		<key>conform</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un tipo è conforme a un protocollo quando fornisce la propria implementazione dei requisiti di tale protocollo.</string>
				<key>Title</key>
				<string>conforme</string>
			</dict>
		</dict>
		<key>constant</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un contenitore con nome in cui è archiviato un valore non modificabile.</string>
				<key>Title</key>
				<string>costante</string>
			</dict>
		</dict>
		<key>container</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un contenitore, altrimenti noto anche come [vista principale](glossary://parent%20view), è una vista che racchiude al proprio interno altre viste.</string>
				<key>Title</key>
				<string>contenitore</string>
			</dict>
		</dict>
		<key>coordinates</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un insieme di numeri che determinano in maniera univoca una posizione nello spazio. Ad esempio, (100, -200) sono coordinate per un punto in uno spazio 2D, dove la coordinata x è 100 e la coordinata y è -200.</string>
				<key>Title</key>
				<string>coordinate</string>
			</dict>
		</dict>
		<key>data</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Informazioni che vengono elaborate o archiviate da un computer e che sono diverse dal codice che agisce su di esse.</string>
				<key>Title</key>
				<string>dati</string>
			</dict>
		</dict>
		<key>debug</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Trovare e correggere gli errori nel codice che impediscono a un'applicazione di funzionare correttamente. </string>
				<key>Title</key>
				<string>debug</string>
			</dict>
		</dict>
		<key>declaration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una porzione di codice che crea qualcosa di nuovo nell'applicazione, come una funzione, una variabile o un tipo personalizzato. Per esempio, `let planet = "Earth"` dichiara una nuova costante, `planet`, e le assegna il valore `"Earth"`.</string>
				<key>Title</key>
				<string>dichiarazione</string>
			</dict>
		</dict>
		<key>decomposition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Il processo di suddivisione di un problema più grande in parti più piccole e gestibili.</string>
				<key>Title</key>
				<string>scomposizione</string>
			</dict>
		</dict>
		<key>decrement</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Diminuire un numero di un valore intero, spesso di 1.</string>
				<key>Title</key>
				<string>decrementare</string>
			</dict>
		</dict>
		<key>define</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Fornire il comportamento o valore esplicito di una porzione di codice appena creata, come una funzione, una variabile o un tipo personalizzato. Per esempio, puoi definire una funzione fornendo un insieme di comandi all'interno della funzione che le indichino cosa fare.</string>
				<key>Title</key>
				<string>definire</string>
			</dict>
		</dict>
		<key>dot notation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un tipo di sintassi utilizzato per accedere alle proprietà o per richiamare i metodi di un'istanza. Ad esempio, `expert.toggleSwitch()` richiama il metodo `toggleSwitch()` (aziona interruttore) dell'istanza `expert`. </string>
				<key>Title</key>
				<string>notazione puntata</string>
			</dict>
		</dict>
		<key>efficiency</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una misura di quanto un codice è in grado di portare a termine lo scopo per cui è stato creato in maniera veloce e al tempo stesso utilizzando meno risorse possibili (come memoria o energia).</string>
				<key>Title</key>
				<string>efficienza</string>
			</dict>
		</dict>
		<key>else block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>L'ultimo blocco di codice di un'istruzione `if`. Il blocco `else` entra in esecuzione se tutte le condizioni dell'istruzione `if` sono `false`.</string>
				<key>Title</key>
				<string>blocco else</string>
			</dict>
		</dict>
		<key>else if block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un blocco di codice di un'istruzione `if`, usato per verificare una condizione che non viene verificata dal blocco `if` o da altri blocchi `else if`.</string>
				<key>Title</key>
				<string>blocco else if</string>
			</dict>
		</dict>
		<key>enumeration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un tipo che definisce un insieme di valori unici, ma correlati, chiamati *enumerazioni*. Per esempio, un'enumerazione `Direction` definisce i casi per ognuno dei punti cardinali: `north`, `south`, `east` e `west`. Quando assegni un'enumerazione a una variabile o a una costante, scegli sempre solo una delle enumerazioni; per esempio, `let compassDirection: Direction = .north`.</string>
				<key>Title</key>
				<string>enumerazione</string>
			</dict>
		</dict>
		<key>environment object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Aggiungi il [wrapper di proprietà](glossary://property%20wrapper) `@EnvironmentObject` per dichiarare una proprietà di oggetto osservabile fornita da una vista principale o superiore. Se dichiari una proprietà come oggetto ambiente, devi assicurarti di impostare un'istanza di modello corrispondente su una vista superiore richiamando il modificatore `environmentObject(_:)`.</string>
				<key>Title</key>
				<string>oggetto ambiente</string>
			</dict>
		</dict>
		<key>event</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un'azione che può essere individuata da un'applicazione informatica. Un input, come premere un pulsante o ruotare lo schermo, attiva un evento.</string>
				<key>Title</key>
				<string>evento</string>
			</dict>
		</dict>
		<key>event handler</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una funzione che viene richiamata dopo che si è verificato un evento, per gestirlo.</string>
				<key>Title</key>
				<string>gestore eventi</string>
			</dict>
		</dict>
		<key>filtering</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Elaborare i dati in una raccolta o struttura di dati per produrre un nuovo insieme di dati.</string>
				<key>Title</key>
				<string>filtrare</string>
			</dict>
		</dict>
		<key>font</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un insieme di caratteri di testo con stile grafico, spessore e dimensione specifici. Lo stile grafico di un font è conosciuto come *carattere tipografico* e le variazioni dell'aspetto grafico formano la *famiglia* del carattere tipografico. Ad esempio, HelveticaNeue è un carattere tipografico e HelveticaNeue-Grassetto 10-punti è un font.</string>
				<key>Title</key>
				<string>font</string>
			</dict>
		</dict>
		<key>for loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un blocco di codice ripetuto che viene eseguito un certo numero di volte.</string>
				<key>Title</key>
				<string>ciclo for</string>
			</dict>
		</dict>
		<key>full function name</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Il nome completo di una funzione, compresi i nomi dei parametri separati da due punti (`:`); ad esempio, `move(to:duration:)`.</string>
				<key>Title</key>
				<string>nome funzione completo</string>
			</dict>
		</dict>
		<key>function</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un insieme di [comandi](glossary://command) a cui viene assegnato un nome e che può essere eseguito quando necessario.</string>
				<key>Title</key>
				<string>funzione</string>
			</dict>
		</dict>
		<key>function definition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una definizione di funzione descrive cosa fa una funzione, cosa si aspetta di ricevere e cosa restituisce al termine.</string>
				<key>Title</key>
				<string>definizione funzione</string>
			</dict>
		</dict>
		<key>global function</key>
		<dict>
			<key>FirstUse</key>
			<dict>
				<key>PageReference</key>
				<string></string>
				<key>_LOCALIZABLE_</key>
				<dict>
					<key>Title</key>
					<string></string>
				</dict>
			</dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una funzione a cui è possibile accedere da qualsiasi file nel progetto.</string>
				<key>Title</key>
				<string>funzione globale</string>
			</dict>
		</dict>
		<key>global variable</key>
		<dict>
			<key>FirstUse</key>
			<dict>
				<key>PageReference</key>
				<string></string>
				<key>_LOCALIZABLE_</key>
				<dict>
					<key>Title</key>
					<string></string>
				</dict>
			</dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una variabile a cui è possibile accedere da qualsiasi file nel progetto.</string>
				<key>Title</key>
				<string>variabile globale</string>
			</dict>
		</dict>
		<key>grayscale</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una gamma di sfumature di grigio dal bianco al nero.</string>
				<key>Title</key>
				<string>scala di grigi</string>
			</dict>
		</dict>
		<key>gyroscope</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un sensore che misura l'orientamento del dispositivo rispetto a tre dimensioni: l'inclinazione da davanti a dietro, l'inclinazione da destra a sinistra e la rotazione intorno al centro.</string>
				<key>Title</key>
				<string>giroscopio</string>
			</dict>
		</dict>
		<key>hertz</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Hertz (Hz) è un ciclo al secondo. Se applicato alle vibrazioni audio, 1 Hz è un'onda sonora al secondo. Gli esseri umani possono sentire i suoni compresi tra 20 e 16.000 Hz.</string>
				<key>Title</key>
				<string>hertz</string>
			</dict>
		</dict>
		<key>hue</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Il tono di un colore nel cerchio cromatico. È un Double (numero decimale) che va da `0` a `1`.</string>
				<key>Title</key>
				<string>tonalità (colore)</string>
			</dict>
		</dict>
		<key>if block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Il primo blocco di codice di un'istruzione `if`. Il blocco `if` entra in esecuzione se la condizione dell'istruzione `if` è `true`.</string>
				<key>Title</key>
				<string>blocco if</string>
			</dict>
		</dict>
		<key>if statement</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una struttura del codice utilizzata per eseguire il codice in base al valore di una o più condizioni. Il primo blocco di codice di un'istruzione `if` è il blocco `if`. Un'istruzione `if` può contenere anche altri blocchi che forniscono delle verifiche aggiuntive, come ad esempio i blocchi `else` ed `else if`.</string>
				<key>Title</key>
				<string>istruzione if</string>
			</dict>
		</dict>
		<key>increment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Aumentare un numero di un valore intero, spesso di 1.</string>
				<key>Title</key>
				<string>incrementare</string>
			</dict>
		</dict>
		<key>index</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un numero che rappresenta la posizione di un elemento in un [array](glossary://array).</string>
				<key>Title</key>
				<string>indice</string>
			</dict>
		</dict>
		<key>index out of range error</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un errore nel tentativo di accedere all'array usando un indice che si trova al di fuori dell'intervallo di quell'array. Per esempio, l'indice `2` si trova al di fuori dell'intervallo del seguente array: `[17, 42]`.</string>
				<key>Title</key>
				<string>errore fuori dall'intervallo dell'indice</string>
			</dict>
		</dict>
		<key>initialization</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>La creazione di una nuova istanza di un tipo, che include l'impostazione dei valori iniziali delle proprietà del tipo.</string>
				<key>Title</key>
				<string>inizializzazione</string>
			</dict>
		</dict>
		<key>initializer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un inizializzatore viene richiamato per creare una nuova [istanza](glossary://instance) di un tipo. L'inizializzatore deve impostare tutti i valori iniziali per le proprietà del tipo e spesso contiene altro codice di configurazione.</string>
				<key>Title</key>
				<string>inizializzatore</string>
			</dict>
		</dict>
		<key>inner loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un blocco di codice ripetitivo (un ciclo) annidato in un altro ciclo (esterno).</string>
				<key>Title</key>
				<string>ciclo interno</string>
			</dict>
		</dict>
		<key>instance</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Valore di un [tipo](glossary://type) particolare. Per esempio, in `let motion = MotionSensor()`, `motion` (movimento) è un'istanza del tipo `MotionSensor`.</string>
				<key>Title</key>
				<string>istanza</string>
			</dict>
		</dict>
		<key>iteration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>La ripetizione di un processo, come, ad esempio, realizzare la stessa azione su ogni elemento dell'array.</string>
				<key>Title</key>
				<string>iterazione</string>
			</dict>
		</dict>
		<key>lag</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un rallentamento nella velocità o nella capacità di risposta di un'app dovuto ad esigenze di elaborazione, alla potenza di elaborazione o a entrambi i fattori.</string>
				<key>Title</key>
				<string>ritardo</string>
			</dict>
		</dict>
		<key>leading edge</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Il bordo iniziale, quando usato in riferimento al contenuto di una vista, si riferisce alla posizione orizzontale dell'inizio del contenuto. La posizione del bordo iniziale dipende dalle tue preferenze, e, in genere, si basa sulle impostazioni relative alla zona e alla lingua.
                    Per esempio, per le lingue che si leggono da sinistra a destra come l'inglese o l'olandese, il bordo iniziale è a sinistra, mentre per le lingue che si leggono da destra a sinistra come l'arabo o l'ebraico, esso è a destra.</string>
				<key>Title</key>
				<string>bordo iniziale</string>
			</dict>
		</dict>
		<key>literal</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>I letterali ti danno la possibilità di incorporare immagini e colore direttamente nel tuo codice usando la libreria di immagini o il selettore di colori. I letterali sono i valori effettivi dei dati rappresentati nel loro formato nativo, direttamente all'interno dell'editor.</string>
				<key>Title</key>
				<string>letterale</string>
			</dict>
		</dict>
		<key>logical AND operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un simbolo (`&amp;&amp;`) che unisce due valori booleani in cui entrambi i valori devono essere veri perché tutto il codice sia vero. Per esempio, `a &amp;&amp; b` è vero solo quando sia `a` che `b` sono `true`.</string>
				<key>Title</key>
				<string>operatore logico AND</string>
			</dict>
		</dict>
		<key>logical NOT operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un simbolo (`!`) che inverte il valore booleano di una porzione di codice. Per esempio, se `a` è `true`, allora `!a` è `false`.</string>
				<key>Title</key>
				<string>operatore logico NOT</string>
			</dict>
		</dict>
		<key>logical OR operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un simbolo (`||`) che unisce due valori booleani in cui un solo valore deve essere vero perché tutto il codice sia vero. Per esempio, `a || b` è `true` quando `a` o `b` è `true` (o quando entrambi sono `true`).</string>
				<key>Title</key>
				<string>operatore logico OR</string>
			</dict>
		</dict>
		<key>logical operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un simbolo, come `&amp;&amp;`, `||` o `!`, che modifica o unisce i valori logici booleani `true` e `false`.</string>
				<key>Title</key>
				<string>operatore logico</string>
			</dict>
		</dict>
		<key>loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un blocco di codice che viene ripetuto un certo numero di volte (come ad esempio un ciclo `for`) o finché viene soddisfatta una condizione (come ad esempio un ciclo `while`).</string>
				<key>Title</key>
				<string>ciclo</string>
			</dict>
		</dict>
		<key>memory</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>La parte di un computer che archivia il codice per un'applicazione e i dati che questa utilizza, in maniera temporanea oppure permanente.</string>
				<key>Title</key>
				<string>memoria</string>
			</dict>
		</dict>
		<key>method</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una funzione o un insieme di comandi definiti all'interno di un [tipo](glossary://type).</string>
				<key>Title</key>
				<string>metodo</string>
			</dict>
		</dict>
		<key>modifier</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>In SwiftUI, un modificatore è un [metodo](glossary://method) che viene richiamato in una vista per modificarne l'aspetto o il comportamento. Per fare in modo che siano più leggibili, i diversi modificatori vengono collocati su righe individuali sotto all'[istanza](glossary://instance) di vista.</string>
				<key>Title</key>
				<string>modificatore</string>
			</dict>
		</dict>
		<key>modulo operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un simbolo (`%`) che restituisce il resto ottenuto dopo aver diviso un numero per un altro. Ad esempio, `17 % 5` restituisce `2`.</string>
				<key>Title</key>
				<string>operatore modulo</string>
			</dict>
		</dict>
		<key>navigation bar</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un'interfaccia di navigazione che consente di effettuare una scelta per ogni schermata fino a quando non si raggiunge una determinata destinazione. Per raggiungere una destinazione differente, occorre ripetere i passaggi precedenti o ricominciare e fare scelte differenti. La barra di navigazione nella parte superiore della schermata mostra un titolo per poter ricordare più facilmente la posizione e fornisce anche un pulsante che consente di tornare alla schermata precedente.</string>
				<key>Title</key>
				<string>barra di navigazione</string>
			</dict>
		</dict>
		<key>nest</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Inserire un blocco di codice ripetitivo, come un ciclo, all'interno di un altro.</string>
				<key>Title</key>
				<string>annidare</string>
			</dict>
		</dict>
		<key>observable object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Quando una classe è [conforme](glossary://conform) al protocollo `ObservableObject`, qualsiasi modifica che viene eseguita ai valori pubblicati fa in modo che tutte le viste che utilizzano i valori siano automaticamente aggiornate per riflettere tali cambiamenti.</string>
				<key>Title</key>
				<string>oggetto osservabile</string>
			</dict>
		</dict>
		<key>observed object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Quando una classe è [conforme](glossary://conform) al protocollo `ObservableObject`, la modifica di uno dei valori pubblicati fa in modo che tutte le viste che utilizzano il valore siano automaticamente aggiornate per riflettere tali cambiamenti.</string>
				<key>Title</key>
				<string>oggetto osservabile</string>
			</dict>
		</dict>
		<key>observer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Nel contesto di un [oggetto osservabile](glossary://observable%20object), un osservatore è costituito da qualsiasi vista od oggetto che utilizza i dati dell'oggetto osservabile. Quando i dati dell'oggetto osservabile cambiano, SwiftUI riconosce la modifica e indica agli osservatori di aggiornarsi.</string>
				<key>Title</key>
				<string>osservatore</string>
			</dict>
		</dict>
		<key>operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un simbolo, come `+`, `-` o `&amp;&amp;`, che rappresenta un'azione su uno o più valori. Per esempio, in `1 + 2`, l'operatore di addizione (`+`) somma i numeri `1` e `2`.</string>
				<key>Title</key>
				<string>operatore</string>
			</dict>
		</dict>
		<key>outer loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un blocco di codice ripetitivo (un ciclo) che contiene un altro ciclo (interno).</string>
				<key>Title</key>
				<string>ciclo esterno</string>
			</dict>
		</dict>
		<key>parameter</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Il nome di un valore di input di una funzione, usato nella definizione della funzione. Per esempio, in `move(distance: Int)`, `distance` è il parametro che assume un valore di tipo Int.</string>
				<key>Title</key>
				<string>parametro</string>
			</dict>
		</dict>
		<key>parent view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>La vista contenitore di una o più [viste secondarie](glossary://child%20view).</string>
				<key>Title</key>
				<string>vista principale</string>
			</dict>
		</dict>
		<key>pattern</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un insieme ripetitivo di circostanze o dati.</string>
				<key>Title</key>
				<string>schema</string>
			</dict>
		</dict>
		<key>pitch</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>In musica, la tonalità di una nota indica quanto è bassa o alta, soprattutto in base alla frequenza della vibrazione. La tonalità di una nota può essere misurata in [Hertz](glossary://hertz). Una tonalità alta (~2000 Hz) è quella ad esempio di un fischio, mentre una tonalità bassa (~40 Hz) è quella ad esempio di un muggito.</string>
				<key>Title</key>
				<string>tonalità (musica)</string>
			</dict>
		</dict>
		<key>primitive</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Nel contesto di un framework di programmazione come SwiftUI, un elemento di base è un blocco costitutivo fornito dal framework per la creazione di comportamenti o [interfacce](glossary://user%20interface) di tipo più complesso.
</string>
				<key>Title</key>
				<string>elemento di base</string>
			</dict>
		</dict>
		<key>primitive view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una [vista](glossary://view) fornita dal framework di [SwiftUI](glossary://SwiftUI), come una vista `Button`, `Text` o `Image`. Le viste di base possono essere usate come blocchi costitutivi per creare [viste composte](glossary://composed%20view) più complesse nell'[interfaccia utente](glossary://user%20interface).</string>
				<key>Title</key>
				<string>vista di base</string>
			</dict>
		</dict>
		<key>private</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>La parola chiave “private” rende il codice disponibile solo all'interno di un file sorgente specifico.
- callout(Esempio):
`private class MyApp: App { }`</string>
				<key>Title</key>
				<string>private</string>
			</dict>
		</dict>
		<key>property</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una variabile (un contenitore con nome in cui è archiviato un valore) definita all'interno di un tipo.</string>
				<key>Title</key>
				<string>proprietà</string>
			</dict>
		</dict>
		<key>property wrapper</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un wrapper di proprietà costituisce un modo facile per applicare un modello di comportamento comune a una proprietà. Esso serve per annotare la proprietà definendo il modo in cui verrà archiviata o elaborata alla lettura.   Per esempio, il wrapper di proprietà `@State` indica a SwiftUI di gestire l'archivio per quel determinato valore e, ogni volta che esso cambia, chiede di aggiornare qualsiasi parte della vista che lo utilizza.</string>
				<key>Title</key>
				<string>wrapper di proprietà</string>
			</dict>
		</dict>
		<key>protocol</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un insieme di requisiti, come metodi e proprietà, che possono essere adottati (o seguiti) da un tipo, come una classe, una struttura o un'enumerazione.   Quando un tipo adotta un protocollo, esso fornisce la propria implementazione dei requisiti del protocollo e gli è conforme.</string>
				<key>Title</key>
				<string>protocollo</string>
			</dict>
		</dict>
		<key>pseudocode</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una descrizione leggibile di un algoritmo, scritta solitamente con un misto di codice e linguaggio quotidiano.</string>
				<key>Title</key>
				<string>pseudocodice</string>
			</dict>
		</dict>
		<key>public</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>La parola chiave “public” rende il codice disponibile per tutti i file del tuo progetto.
                        
- callout(Esempio): `public func decorateWithSticker(space:
                    Space) { }`
                    </string>
				<key>Title</key>
				<string>public</string>
			</dict>
		</dict>
		<key>published value</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Aggiungi il [wrapper di proprietà](glossary://property%20wrapper) `@Published` per dichiarare una proprietà che informa tutti gli [osservatori](glossary://observer) quando il valore sta per cambiare. Quando il valore cambia, SwiftUI aggiorna tutte le viste per usare tali dati.</string>
				<key>Title</key>
				<string>valore pubblicato</string>
			</dict>
		</dict>
		<key>return type</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Quando definisci una funzione, puoi definire facoltativamente un tipo di valore che la funzione restituisce come output al termine, noto come tipo restituito.</string>
				<key>Title</key>
				<string>tipo restituito</string>
			</dict>
		</dict>
		<key>reusability</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una caratteristica del codice che consente di utilizzarlo in varie situazioni all'interno di un'applicazione.</string>
				<key>Title</key>
				<string>riutilizzabilità</string>
			</dict>
		</dict>
		<key>root view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una vista in cui vengono poste tutte le altre viste, altrimenti nota anche come [vista di livello superiore](glossary://top-level%20view). Essa si trova alla sommità di una [gerarchia di viste](glossary://view%20hierarchy) e funge da [vista principale](glossary://parent%20view) per tutte le [viste secondarie](glossary://child%20view) nella gerarchia.</string>
				<key>Title</key>
				<string>vista root</string>
			</dict>
		</dict>
		<key>saturation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>L'intensità della tonalità, da un tono grigio al colore pieno. La saturazione è un Double (numero decimale) che va da `0` a `1`.</string>
				<key>Title</key>
				<string>saturazione</string>
			</dict>
		</dict>
		<key>sensor</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un sensore è un dispositivo che rileva gli eventi (come un cambiamento di calore, luce, suono o movimento) e restituisce un valore.</string>
				<key>Title</key>
				<string>sensore</string>
			</dict>
		</dict>
		<key>source of truth</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Nella progettazione delle app, è la posizione univoca in cui tutti i dati vengono modificati. Tutti gli altri richiami a tali dati sono da considerarsi unicamente a titolo di riferimento. In questo modo, si evita la duplicazione dell'informazione in altre posizioni. </string>
				<key>Title</key>
				<string>sorgente univoca</string>
			</dict>
		</dict>
		<key>speech synthesis</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Suono generato dal computer che imita la voce umana, solitamente generato da testo.</string>
				<key>Title</key>
				<string>sintesi vocale</string>
			</dict>
		</dict>
		<key>state</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Le informazioni archiviate in una variabile, un'applicazione o un sistema, in un momento dato.</string>
				<key>Title</key>
				<string>stato</string>
			</dict>
		</dict>
		<key>state object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Puoi aggiungere il [wrapper di proprietà](glossary://property%20wrapper) `@StateObject` per dichiarare uno stato di un oggetto e fornire un valore iniziale che è conforme al [protocollo](glossary://protocol) `ObservableObject`. SwiftUI gestisce l'archiviazione dell'oggetto di stato e aggiorna tutte le viste secondarie che utilizzano tale valore quando i valori pubblicati cambiano.</string>
				<key>Title</key>
				<string>oggetto di stato</string>
			</dict>
		</dict>
		<key>state value</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Aggiungi `@State` prima di una variabile per indicare a SwiftUI di gestire l'archiviazione di un valore. Quando il valore cambia, SwiftUI aggiorna qualsiasi parte della vista che lo utilizza.</string>
				<key>Title</key>
				<string>valore di stato</string>
			</dict>
		</dict>
		<key>statement</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una struttura, come un ciclo o un’istruzione `if`, che organizza il codice in un’applicazione.</string>
				<key>Title</key>
				<string>istruzione</string>
			</dict>
		</dict>
		<key>string component</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una parte (o sottostringa) di una stringa, dopo che questa è stata divisa in parti da un separatore. Ad esempio, se la stringa `"cane+gatto+pesce"` è divisa dal separatore `"+"`, i componenti risultanti sono le stringhe `"cane"`, `"gatto"` e `"pesce"`.</string>
				<key>Title</key>
				<string>componente stringa</string>
			</dict>
		</dict>
		<key>string concatenation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>L'operazione di unione delle stringhe aggiungendone una alla fine di un'altra. Ad esempio, la concatenazione di `"palla"` e `"canestro"` è `"pallacanestro"`.</string>
				<key>Title</key>
				<string>concatenazione stringa</string>
			</dict>
		</dict>
		<key>string interpolation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>L'utilizzo di costanti, variabili o espressioni di codice all'interno di una stringa più lunga, da sostituire con il valore attuale quando si valuta la stringa. Ad esempio, nella stringa `"Carla ha mangiato un \(frutto)."`, se `frutto` è una variabile con il valore `"kiwi"`, `\(frutto)` viene sostituito con `"kiwi"` quando la stringa viene valutata, dando come risultato `"Carla ha mangiato un kiwi."`</string>
				<key>Title</key>
				<string>interpolazione stringa</string>
			</dict>
		</dict>
		<key>syntax</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Le regole di scrittura del codice capite ed eseguite dai computer.</string>
				<key>Title</key>
				<string>sintassi</string>
			</dict>
		</dict>
		<key>top-level view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una vista in cui vengono poste tutte le altre viste, altrimenti nota anche come [vista root](glossary://root%20view). Essa si trova alla sommità di una [gerarchia di viste](glossary://view%20hierarchy) e funge da [vista principale](glossary://parent%20view) per tutte le [viste secondarie](glossary://child%20view) nella gerarchia.</string>
				<key>Title</key>
				<string>vista di livello superiore</string>
			</dict>
		</dict>
		<key>trailing edge</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Il bordo finale, quando usato in riferimento al contenuto di una vista, si riferisce alla posizione orizzontale dell'estremità del contenuto. La posizione del bordo finale dipende dalle tue preferenze, e, in genere, si basa sulle impostazioni relative alla zona e alla lingua.
                    Per esempio, per le lingue che si leggono da sinistra a destra come l'inglese o l'olandese, il bordo finale è a destra, mentre per le lingue che si leggono da destra a sinistra come l'arabo o l'ebraico, esso è a sinistra.</string>
				<key>Title</key>
				<string>bordo iniziale</string>
			</dict>
		</dict>
		<key>type</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un insieme con nome di proprietà (le caratteristiche) e metodi (i comportamenti) di un tipo di dati.</string>
				<key>Title</key>
				<string>tipo</string>
			</dict>
		</dict>
		<key>typography</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>L'arte e la tecnica di disporre i caratteri in modo tale da rendere il linguaggio scritto comprensibile, leggibile e piacevole alla vista quando viene mostrato.</string>
				<key>Title</key>
				<string>tipografia</string>
			</dict>
		</dict>
		<key>user input</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Informazione che un'applicazione ottiene dall'interazione con un utente, come il tocco dello schermo, l'inserimento di testo con la tastiera o la pronuncia di parole nel microfono. 
</string>
				<key>Title</key>
				<string>input utente</string>
			</dict>
		</dict>
		<key>user interface</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>I mezzi attraverso cui un utente controlla un'app. Chiamata anche UI, spesso si riferisce alla porzione visiva di un'app con cui un utente interagisce e presenta elementi come immagini, testo, pulsanti, cursori, viste di scorrimento e molto altro ancora.</string>
				<key>Title</key>
				<string>interfaccia utente</string>
			</dict>
		</dict>
		<key>variable</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un contenitore con nome in cui è archiviato un valore modificabile.</string>
				<key>Title</key>
				<string>variabile</string>
			</dict>
		</dict>
		<key>velocity</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>La velocità di un elemento in una direzione data.</string>
				<key>Title</key>
				<string>velocità</string>
			</dict>
		</dict>
		<key>view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una vista è il blocco costitutivo dell'interfaccia utente della tua app e rappresenta qualsiasi elemento visivo [conforme](glossary://conform) al [protocollo](glossary://protocol) `View`.

Alcuni esempi di viste in SwiftUI sono le viste testo, le viste immagine, i cursori, le griglie, i pulsanti e le forme.</string>
				<key>Title</key>
				<string>vista</string>
			</dict>
		</dict>
		<key>view hierarchy</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una struttura che definisce il layout delle viste rispetto alle altre viste, in riferimento a un'istanza di vista di livello superiore che si trova alla sommità della gerarchia. La vista di livello superiore può contenere un numero qualsiasi di viste secondarie, ognuna delle quali può contenere le proprie viste secondarie, e così via.</string>
				<key>Title</key>
				<string>gerarchia di viste</string>
			</dict>
		</dict>
		<key>volume</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Il volume è l'altezza del suono rilevata dal [sensore](glossary://sensor). Va da 0 a 1.</string>
				<key>Title</key>
				<string>volume</string>
			</dict>
		</dict>
		<key>while loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un blocco di codice che rimane in esecuzione per tutto il tempo per cui una condizione data è `true`. Quando la condizione diventa `false`, l'esecuzione del ciclo si interrompe.</string>
				<key>Title</key>
				<string>ciclo while</string>
			</dict>
		</dict>
		<key>wireframe</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Il contorno di un elemento, come una gemma, un interruttore o un blocco, nel mondo di un livello. Il wireframe viene usato per indicare la possibilità che l'elemento possa apparire casualmente ogni volta che viene eseguito il livello.</string>
				<key>Title</key>
				<string>wireframe</string>
			</dict>
		</dict>
	</dict>
</dict>
</plist>
