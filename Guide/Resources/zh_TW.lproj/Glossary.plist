<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Terms</key>
	<dict>
		<key>Alpha</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Alpha 或稱 *Alpha 通道*，與顏色的不透明度有關，範圍從 `0`（完全透明）到 `1`（完全不透明）。Alpha 資料是範圍從 0 到 1 的雙精度浮點數（小數）。</string>
				<key>Title</key>
				<string>Alpha</string>
			</dict>
		</dict>
		<key>Boolean</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>擁有 `true` 值或 `false` 值的類型。例如，`9 &lt; 7` 傳回布林值 `false`，因為 `9` 不小於 `7`。</string>
				<key>Title</key>
				<string>布林值</string>
			</dict>
		</dict>
		<key>Double</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>用來儲存含小數位的類型；例如 3.14。</string>
				<key>Title</key>
				<string>Double</string>
			</dict>
		</dict>
		<key>Int</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>用於儲存整數（完整數字）的類型，例如 `10` 或 `-42`。</string>
				<key>Title</key>
				<string>Int</string>
			</dict>
		</dict>
		<key>String</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>用於儲存一系列角色的類型，如 `"hello, world"` 或 `"dancing kittens"`。</string>
				<key>Title</key>
				<string>String</string>
			</dict>
		</dict>
		<key>Swift</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Apple 的程式設計語言，用於編寫 iPhone、iPad、Mac、Apple Watch 和 Apple TV 的 App。</string>
				<key>Title</key>
				<string>Swift</string>
			</dict>
		</dict>
		<key>SwiftUI</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>SwiftUI 是一種為任何 Apple 平台宣告使用者介面的現代化方式。它提供了顯示區、控制項目和佈局結構來宣告你的 App 使用介面。此架構提供的事件處理器可向 App 傳送點按、手勢和其他類型的輸入，也提供了工具可用於管理從 App 模型到使用者會看到並與其互動的顯示區和控制項目的資料流。</string>
				<key>Title</key>
				<string>SwiftUI</string>
			</dict>
		</dict>
		<key>absolute value</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>不帶符號的數字值。例如 -12 的絕對值為 12，23.4 的絕對值為 23.4。</string>
				<key>Title</key>
				<string>絕對值</string>
			</dict>
		</dict>
		<key>abstraction</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>複雜事物的簡化版本。  抽象會隱含細節，因此你可以更輕鬆地思考和組合程式碼的片段。  例如，[類型](glossary://type)是一種抽象概念，它隱含了該類型實例的設定、屬性和方法。</string>
				<key>Title</key>
				<string>抽象</string>
			</dict>
		</dict>
		<key>accelerometer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>從三個維度測量裝置加速度的感測器：上和下、前和後，以及左和右。</string>
				<key>Title</key>
				<string>加速度計</string>
			</dict>
		</dict>
		<key>adopt</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>為了採用協定，類型為符合協定的需求提供了一套自己的實作方式，如它列出的方法和屬性。</string>
				<key>Title</key>
				<string>採用</string>
			</dict>
		</dict>
		<key>algorithm</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>用於解決問題的一組循序指示或規則。例如，泡茶的一系列步驟可視為一種演算法。</string>
				<key>Title</key>
				<string>演算法</string>
			</dict>
		</dict>
		<key>append</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>加入到某物品的末端。例如，你可以將一個字串附加到另一個字串的末端，或將一個項目附加到項目陣列。
</string>
				<key>Title</key>
				<string>附加</string>
			</dict>
		</dict>
		<key>application</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>由程式碼組成的軟體，能讓你執行特定的作業。例如，你可以使用「訊息」應用程式（App）來傳送和接收訊息。</string>
				<key>Title</key>
				<string>應用程式</string>
			</dict>
		</dict>
		<key>argument</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>傳入函數以自訂其動作的輸入值。例如，在名為 `move(distance: 3)` 的函數中，數字 `3` 是用來指定移動多少空間的引數。</string>
				<key>Title</key>
				<string>引數</string>
			</dict>
		</dict>
		<key>arithmetic operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>如 `+`、`-`、`*` 或 `/` 的符號，用來依據一個或多個數字執行基本數學運算。例如 `42 / 7` 和 `17 - 5` 使用了算術運算子。</string>
				<key>Title</key>
				<string>算術運算子</string>
			</dict>
		</dict>
		<key>array</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>儲存依序排列之同類項目的集合。同一個項目可以在不同的位置出現多次。例如 `highScores = [37, 34, 29, 29, 26]` 是一個[整數](glossary://Int)陣列。</string>
				<key>Title</key>
				<string>陣列</string>
			</dict>
		</dict>
		<key>asset</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>內容是 App 使用的影像、聲音和其他項目。你可以將資源從其他 App（如「檔案」和「照片」）輸入 Swift Playgrounds。</string>
				<key>Title</key>
				<string>內容</string>
			</dict>
		</dict>
		<key>assignment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>設定變數或常數值的動作。</string>
				<key>Title</key>
				<string>指定值</string>
			</dict>
		</dict>
		<key>assignment operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`=` 符號用於設定變數的值。例如 `greeting = "hello"` 會將 `greeting` 的值設為 `"hello"`。</string>
				<key>Title</key>
				<string>指定值運算子</string>
			</dict>
		</dict>
		<key>asynchronous process</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>App 或程式的其餘部分繼續執行時可執行的程式碼區塊。同步程序會在其完成前阻止程式執行，與此相反，非同步程序則可以與 App 程式碼的其他部分同時執行。</string>
				<key>Title</key>
				<string>非同步程序</string>
			</dict>
		</dict>
		<key>binding</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>加入 `@Binding` [屬性包覆](glossary://property%20wrapper)，在儲存資料的屬性以及顯示並更改資料的顯示區之間建立雙向連結。綁定會將屬性連結到儲存在其他位置的真實來源，而不是直接儲存資料。

例如，用於切換播放和暫停的按鈕可使用 `@Binding` 屬性包覆，與其上層顯示區的屬性建立綁定關係。
</string>
				<key>Title</key>
				<string>綁定</string>
			</dict>
		</dict>
		<key>body</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[顯示區](glossary://view)的主體是你用來提供顯示區內容的位置，由至少一個 SwiftUI 所提供的[原始物件](glossary://primitive%20view)或任何你已經製作的[組合式顯示區](glossary://composed%20view)組成。</string>
				<key>Title</key>
				<string>主體</string>
			</dict>
		</dict>
		<key>bounds</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>在陣列中，陣列可以包含的索引值範圍。例如，陣列 `[17, 42, 95]` 可以包含 0 到 2 的索引值。界限檢查是驗證索引值是否位於陣列界限內的過程。</string>
				<key>Title</key>
				<string>界限</string>
			</dict>
		</dict>
		<key>brightness</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>進入相機的光線量，範圍從 `0`（無光線）到 `1`（全光線）。亮度是從 `0` 到 `1` 的[雙精度浮點數](glossary://Double)（小數）。</string>
				<key>Title</key>
				<string>亮度</string>
			</dict>
		</dict>
		<key>bug</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>程式碼中阻止應用程式按照預期執行的錯誤。 
</string>
				<key>Title</key>
				<string>程式錯誤</string>
			</dict>
		</dict>
		<key>bundle</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>代表磁碟上套件目錄中儲存的程式碼和資源。套件將其包含的資源整理到明確定義的子目錄中，套件結構因平台和套件類型而有所不同。透過使用套件物件，你不需要知道套件的結構，便可取用其中的資源。</string>
				<key>Title</key>
				<string>套件</string>
			</dict>
		</dict>
		<key>call</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>若要呼叫程式碼中的函數，就要觸發該函數以執行其中定義的動作。</string>
				<key>Title</key>
				<string>呼叫</string>
			</dict>
		</dict>
		<key>child view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>一種包含在[上層顯示區](glossary://parent%20view)中的顯示區。上層顯示區可以包含任意數量的子顯示區，每個子顯示區可包含自己的子顯示區，依此類推。顯示區及其所有下層形成了[顯示區階層](glossary://view%20hierarchy)。</string>
				<key>Title</key>
				<string>子顯示區</string>
			</dict>
		</dict>
		<key>class</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>類別是程式碼的容器，它做為藍圖用來製作多個相同類型物件的複本。就像藍圖可能定義了一個物件（例如腳踏車）的功能和動作，類別會將這些定義為[屬性](glossary://property)和[方法](glossary://method)。

當你製作類別的新複本或[實例](glossary://instance)時，該實例會包含藍圖的所有屬性和方法。然而，每一個實例的值可以個別地更改，讓你能自訂每個複本的動作。例如，一個腳踏車類別可能會包含顏色屬性，讓你能製作紅色和藍色的腳踏車。</string>
				<key>Title</key>
				<string>類別</string>
			</dict>
		</dict>
		<key>closure</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>閉包是一個在位置上執行的[函數](glossary://function)，不需要名稱。
					
```
scene.setOnStartHandler {
    // 閉包的主體
}
```
                    
閉包可以從定義它們的內容中擷取並儲存對任何常數和變數的參照。這稱為關閉這些常數和變數。</string>
				<key>Title</key>
				<string>閉包</string>
			</dict>
		</dict>
		<key>code comment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>程式碼註解提供程式設計師可記錄其程式碼的方式。  你可以開始編寫單行的註解，開頭是兩條斜線加一個空格，例如「// 這是我的註解」。  當你執行程式碼時，並不會執行程式碼的註解。</string>
				<key>Title</key>
				<string>程式碼註解</string>
			</dict>
		</dict>
		<key>code expression</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>可通過評估傳回值的一段程式碼。例如，如果 `months` 是包含 12 個項目的陣列，則程式碼表示式 `months.count - 1` 會傳回值 `11`。</string>
				<key>Title</key>
				<string>程式碼表示式</string>
			</dict>
		</dict>
		<key>coding</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>編寫指令、程式碼架構和演算法以建立應用程式的動作。</string>
				<key>Title</key>
				<string>程式設計</string>
			</dict>
		</dict>
		<key>collection</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>如同陣列或辭典的一種資料結構，用於儲存多種資料。</string>
				<key>Title</key>
				<string>集合</string>
			</dict>
		</dict>
		<key>command</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>告訴應用程式要執行特定動作的程式碼。</string>
				<key>Title</key>
				<string>指令</string>
			</dict>
		</dict>
		<key>comment out</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>可以將一行程式碼變成[程式碼註解](glossary://code%20comment)來避免執行該程式碼。你可以在任一行程式碼前面加上 `//`，例如：
                
`// level.run()`</string>
				<key>Title</key>
				<string>註解</string>
			</dict>
		</dict>
		<key>comparison operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>例如 `==`、`!=`、`&lt;`、`&gt;`、`&lt;=` 或 `&gt;=` 的符號，用於比較兩個值。比較運算子可以被用於 `if` 語句或 `while` 迴圈的條件中，傳回的布林值表示比較結果是否為 `true`。例如，`6 &gt; 8` 將 `6` 和 `8` 進行比較，並傳回 `false`。</string>
				<key>Title</key>
				<string>比較運算子</string>
			</dict>
		</dict>
		<key>compiler error</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>編譯器發生錯誤是因為有不準確的程式碼。不準確的程式碼會在左側的邊界和工具列中顯示為紅色的點。</string>
				<key>Title</key>
				<string>編譯器錯誤</string>
			</dict>
		</dict>
		<key>composed view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>一個由一或多個[原始物件](glossary://primitive%20view)或組合式顯示區結合而成的[顯示區](glossary://view)。
</string>
				<key>Title</key>
				<string>組合式顯示區</string>
			</dict>
		</dict>
		<key>composition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>這個過程會合併應用程式的各個小部分，以形成更易處理和理解的較大部分。</string>
				<key>Title</key>
				<string>組合</string>
			</dict>
		</dict>
		<key>compound assignment operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>合併指定值（設定變數的值）和另一個運算（如加法或減法）的運算子。例如，若 `a` 的現有值為 `1`，使用 `a += 3` 將在 `1` 的基礎上加 `3`，並將結果指定到 `a`，因此 `a` 現在的值為 `4`。</string>
				<key>Title</key>
				<string>複合指定值運算子</string>
			</dict>
		</dict>
		<key>computed property</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>計算屬性不是直接儲存值，而是當擷取其他相關的值時，根據目前狀態計算出的值。

在以下範例中，area 就是計算屬性，`width` 和 `height` 是儲存屬性：

```
struct RectangleCalculator { 
    var width = 10.0
    var height = 10.0
    
    var area : Double { 
        return width * height
    }
} 
```</string>
				<key>Title</key>
				<string>計算屬性</string>
			</dict>
		</dict>
		<key>conditional code</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>只有當滿足特定的條件時才會執行的程式碼。例如 `if` 語句和 `while` 迴圈包含只有在條件為 `true` 時才執行的條件碼。</string>
				<key>Title</key>
				<string>條件碼</string>
			</dict>
		</dict>
		<key>conform</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>當類型為符合協定的需求提供一套自己的實作方式時，即符合該協定。</string>
				<key>Title</key>
				<string>符合</string>
			</dict>
		</dict>
		<key>constant</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>一種已命名的容器，用於儲存不可變值。</string>
				<key>Title</key>
				<string>常數</string>
			</dict>
		</dict>
		<key>container</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>一個容器，也稱為[上層顯示區](glossary://parent%20view)，這個顯示區內部包含其他顯示區。</string>
				<key>Title</key>
				<string>容器</string>
			</dict>
		</dict>
		<key>coordinates</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>唯一決定空間中的位置的一組數字。例如 (100, -200) 是 2D 空間中一個點的座標，其中 x 座標為 100，y 座標為 -200。</string>
				<key>Title</key>
				<string>座標</string>
			</dict>
		</dict>
		<key>data</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>電腦處理或儲存的資訊，與針對其作用的程式碼不同。</string>
				<key>Title</key>
				<string>資料</string>
			</dict>
		</dict>
		<key>debug</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>找出並修正程式碼中讓應用程式無法正確執行的問題。 </string>
				<key>Title</key>
				<string>除錯</string>
			</dict>
		</dict>
		<key>declaration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>在應用程式中建立新內容的一段程式碼，如函數、變數或自訂類型。例如 `let planet = "Earth"` 宣告一個新常數 `planet`，並給它一個 `"Earth"` 的值。</string>
				<key>Title</key>
				<string>宣告</string>
			</dict>
		</dict>
		<key>decomposition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>將大問題分解成更易管理的小問題的過程。</string>
				<key>Title</key>
				<string>分解</string>
			</dict>
		</dict>
		<key>decrement</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>讓數字以整數值減少，通常以 1 遞減。</string>
				<key>Title</key>
				<string>遞減</string>
			</dict>
		</dict>
		<key>define</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>為新建立的一段程式碼（如函數、變數或自訂類型）提供確切的值或動作。例如，透過在函數內提供一組指令來指示函數應該如何執行，藉此定義函數。</string>
				<key>Title</key>
				<string>定義</string>
			</dict>
		</dict>
		<key>dot notation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>一種語法形式，用於存取實例的屬性或呼叫實例的方法。例如 `expert.toggleSwitch()` 呼叫 `expert` 實例上的 `toggleSwitch()` 方法。</string>
				<key>Title</key>
				<string>點記法</string>
			</dict>
		</dict>
		<key>efficiency</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>一段好的程式碼，評量標準是在快速執行預期目標的同時，盡可能使用愈少的資源，如記憶體或電量。</string>
				<key>Title</key>
				<string>效率</string>
			</dict>
		</dict>
		<key>else block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`if` 語句中的最後一個程式碼區塊。若 `if` 語句中的所有條件為 `false` 時，即會執行 `else` 區塊。</string>
				<key>Title</key>
				<string>else 區塊</string>
			</dict>
		</dict>
		<key>else if block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`if` 語句中的一個程式碼區塊，用於檢查未被 `if` 區塊或任何其他 `else if` 區塊檢查的條件。</string>
				<key>Title</key>
				<string>else if 區塊</string>
			</dict>
		</dict>
		<key>enumeration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>用於定義一組稱為*列舉用例*的唯一但相關的值的類型。例如 `Direction` 列舉定義了每個基本方向的用例：`north`、`south`、`east` 和 `west`。將列舉指定到變數或常數時，會總是選擇其中一個用例；例如 `let compassDirection: Direction = .north`。</string>
				<key>Title</key>
				<string>列舉</string>
			</dict>
		</dict>
		<key>environment object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>加入 `@EnvironmentObject` [屬性包覆](glossary://property%20wrapper)以聲明上層顯示區或上階顯示區提供的可觀察的物件屬性。如果將屬性聲明為環境物件，記得呼叫它的 `environmentObject(_:)` 修飾符，在上階顯示區中設定相應的模型實例。</string>
				<key>Title</key>
				<string>環境物件</string>
			</dict>
		</dict>
		<key>event</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>能被電腦應用程式偵測到的動作。輸入（例如按下按鈕或轉動螢幕）會觸發一個事件。</string>
				<key>Title</key>
				<string>事件</string>
			</dict>
		</dict>
		<key>event handler</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>在事件發生後被呼叫來處理事件的函數。</string>
				<key>Title</key>
				<string>事件處理器</string>
			</dict>
		</dict>
		<key>filtering</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>透過處理集合或資料結構中的資料，以產生一組新的資料。</string>
				<key>Title</key>
				<string>過濾</string>
			</dict>
		</dict>
		<key>font</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>特定設計樣式、粗細和大小的一組文字字元。字體的設計樣式稱為*字樣*，這種設計的各種變化則組成字樣*系列*。例如，HelveticaNeue 是一種字樣，10 點的 HelveticaNeue-Bold 是一種字體。</string>
				<key>Title</key>
				<string>字體</string>
			</dict>
		</dict>
		<key>for loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>執行一定次數的重複程式碼區塊。</string>
				<key>Title</key>
				<string>for 迴圈</string>
			</dict>
		</dict>
		<key>full function name</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>函數的完整名稱，包含其函數的名稱，並以冒號 (`:`) 分隔。例如：`move(to:duration:)`。</string>
				<key>Title</key>
				<string>完整函數名稱</string>
			</dict>
		</dict>
		<key>function</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>一組已命名的[指令](glossary://command)，需要時即可執行。</string>
				<key>Title</key>
				<string>函數</string>
			</dict>
		</dict>
		<key>function definition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>函數定義說明了函數的作用為何、函數會預期接收什麼項目，以及函數完成時會傳回什麼內容。</string>
				<key>Title</key>
				<string>函數定義</string>
			</dict>
		</dict>
		<key>global function</key>
		<dict>
			<key>FirstUse</key>
			<dict>
				<key>PageReference</key>
				<string></string>
				<key>_LOCALIZABLE_</key>
				<dict>
					<key>Title</key>
					<string></string>
				</dict>
			</dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>可在計畫案的任何檔案中取用的函數。</string>
				<key>Title</key>
				<string>通用函數</string>
			</dict>
		</dict>
		<key>global variable</key>
		<dict>
			<key>FirstUse</key>
			<dict>
				<key>PageReference</key>
				<string></string>
				<key>_LOCALIZABLE_</key>
				<dict>
					<key>Title</key>
					<string></string>
				</dict>
			</dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>可在計畫案的任何檔案中取用的變數。</string>
				<key>Title</key>
				<string>通用變數</string>
			</dict>
		</dict>
		<key>grayscale</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>從白色到黑色的灰色陰影範圍。</string>
				<key>Title</key>
				<string>灰階</string>
			</dict>
		</dict>
		<key>gyroscope</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>從三個維度測量裝置方向的感測器：由前向後傾、由左向右傾，以及繞著中心旋轉。</string>
				<key>Title</key>
				<string>陀螺儀</string>
			</dict>
		</dict>
		<key>hertz</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>赫茲（Hz）是每秒一個循環。套用到聲音震動時，1 Hz 是每秒一個聲波。人類可以聽見的聲音介於 20 Hz 和 16,000 Hz 之間。</string>
				<key>Title</key>
				<string>赫茲</string>
			</dict>
		</dict>
		<key>hue</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>顏色在色輪上的色調。範圍是從 `0` 到 `1` 的兩位數（小數）。</string>
				<key>Title</key>
				<string>色相</string>
			</dict>
		</dict>
		<key>if block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`if` 語句中的第一個程式碼區塊。若 `if` 語句中的條件為 `true` 時，即會執行 `if` 區塊。</string>
				<key>Title</key>
				<string>if 區塊</string>
			</dict>
		</dict>
		<key>if statement</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>用來依據一個或多個條件值執行程式碼的程式碼結構。`if` 語句中的第一個程式碼區塊是 `if` 區塊。`if` 語句可能還包含進行額外檢查的其他區塊，例如 `else` 區塊和 `else if` 區塊。</string>
				<key>Title</key>
				<string>if 語句</string>
			</dict>
		</dict>
		<key>increment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>讓數字以整數值增加，通常以 1 遞增。</string>
				<key>Title</key>
				<string>遞增</string>
			</dict>
		</dict>
		<key>index</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>代表[陣列](glossary://array)中項目位置的數字。</string>
				<key>Title</key>
				<string>索引</string>
			</dict>
		</dict>
		<key>index out of range error</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>嘗試使用陣列範圍外的索引存取陣列時導致的錯誤。例如，索引 `2` 在陣列 `[17, 42]` 的範圍之外。</string>
				<key>Title</key>
				<string>索引越界錯誤</string>
			</dict>
		</dict>
		<key>initialization</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>建立類型新實例的動作，包含為類型的任何屬性設定初始值。</string>
				<key>Title</key>
				<string>初始化</string>
			</dict>
		</dict>
		<key>initializer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>會呼叫初始化程式以建立新的類型[實例](glossary://instance)。初始化程式必須設定類型屬性的所有初始值，且通常會包含其他設定程式碼。</string>
				<key>Title</key>
				<string>初始化程式</string>
			</dict>
		</dict>
		<key>inner loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>嵌套在另一個（外）迴圈中的重複程式碼區塊（迴圈）。</string>
				<key>Title</key>
				<string>內迴圈</string>
			</dict>
		</dict>
		<key>instance</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>一個特定[類型](glossary://type)的值。例如，在 `let motion = MotionSensor()` 中，`motion` 是 `MotionSensor` 類型的實例。</string>
				<key>Title</key>
				<string>實例</string>
			</dict>
		</dict>
		<key>iteration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>重複某個過程的動作，如對陣列中的每個項目執行相同的動作。</string>
				<key>Title</key>
				<string>反覆運算</string>
			</dict>
		</dict>
		<key>lag</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>因處理需求、處理能力或兩者造成的 App 速度或回應速度下降。</string>
				<key>Title</key>
				<string>lag</string>
			</dict>
		</dict>
		<key>leading edge</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>說到顯示區中的內容時，前緣指的是內容開頭的水平位置。前緣的位置視你的偏好設定而定，通常是基於你的地區和語言設定。
                    例如，對於由左至右的語言（像是英文和荷蘭文），前緣位於左側。對於由右至左的語言（像是阿拉伯文或希伯來文），前緣則位於右側。</string>
				<key>Title</key>
				<string>前緣</string>
			</dict>
		</dict>
		<key>literal</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>字面值能讓你使用影像資料庫或顏色選擇器將影像和顏色直接嵌入程式碼。字面值是直接在編輯器中以原始格式表示的資料實際值。</string>
				<key>Title</key>
				<string>字面值</string>
			</dict>
		</dict>
		<key>logical AND operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>用於合併兩個布林值的符號 (`&amp;&amp;`)，兩個值必須都為真，整段程式碼才為真。例如，只有在 `a` 和 `b` 均為 `true` 時，`a &amp;&amp; b` 才為真。</string>
				<key>Title</key>
				<string>邏輯 AND 運算子</string>
			</dict>
		</dict>
		<key>logical NOT operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>用於反轉一段程式碼的布林值的符號 (`!`)。例如，如果 `a` 為 `true`，則 `!a` 為 `false`。</string>
				<key>Title</key>
				<string>邏輯 NOT 運算子</string>
			</dict>
		</dict>
		<key>logical OR operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>用於合併兩個布林值的符號 (`||`)，其中有一個值必須為真，整段程式碼才為真。例如，只有在 `a` 或 `b` 為`真`（或均為`真`）時，`a || b` 才為`真`。</string>
				<key>Title</key>
				<string>邏輯 OR 運算子</string>
			</dict>
		</dict>
		<key>logical operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>例如 `&amp;&amp;`、`||` 或 `!` 的符號，用於修改或合併布林邏輯值 `true` 和 `false`。</string>
				<key>Title</key>
				<string>邏輯運算子</string>
			</dict>
		</dict>
		<key>loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>重複執行一定次數（如 `for` 迴圈）或重複執行直至滿足條件（如 `while` 迴圈）的程式碼區塊。</string>
				<key>Title</key>
				<string>迴圈</string>
			</dict>
		</dict>
		<key>memory</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>電腦的一部分，用來儲存（臨時或永久）應用程式的程式碼及其使用的資料。</string>
				<key>Title</key>
				<string>記憶體</string>
			</dict>
		</dict>
		<key>method</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>在[類型](glossary://type)內部定義的一種函數或一組指令。</string>
				<key>Title</key>
				<string>方法</string>
			</dict>
		</dict>
		<key>modifier</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>在 SwiftUI 中，修飾符是在顯示區上呼叫的[方法](glossary://method)，用來修改其外觀或行為。為了讓修飾符更容易閱讀，每個修飾符都置於顯示區[實例](glossary://instance)下方的獨立行中。</string>
				<key>Title</key>
				<string>修飾符</string>
			</dict>
		</dict>
		<key>modulo operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>用於將一個數字除以另一個數字後，傳回餘數的符號 (`%`)。例如 `17 % 5` 傳回 `2`。</string>
				<key>Title</key>
				<string>取模運算子</string>
			</dict>
		</dict>
		<key>navigation bar</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>導覽介面可讓你在每個畫面進行選擇，直到抵達目的地。若要前往其他目的地，你必須返回步驟或從頭開始並選擇不同選項。螢幕最上方的導覽列會顯示標題，協助你記得所在位置，並提供返回按鈕，方便你回到上一個畫面。</string>
				<key>Title</key>
				<string>導覽列</string>
			</dict>
		</dict>
		<key>nest</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>在一個程式碼區塊（例如迴圈）內部放置另一個重複的程式碼區塊。</string>
				<key>Title</key>
				<string>嵌套</string>
			</dict>
		</dict>
		<key>observable object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>當類別[符合](glossary://conform) `ObservableObject` 協定時，對發佈數值進行任何更改會導致所有顯示區都使用那些值來自動更新，反映出變更。</string>
				<key>Title</key>
				<string>可觀察的物件</string>
			</dict>
		</dict>
		<key>observed object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>當類別[符合](glossary://conform) `ObservableObject` 協定時，更改它的其中一個發佈數值會導致所有顯示區都使用該值來自動更新，反映出變更。</string>
				<key>Title</key>
				<string>可觀察的物件</string>
			</dict>
		</dict>
		<key>observer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>觀測器與[可觀察的物件](glossary://observable%20object)有關，它是使用可觀察物件資料的任何顯示區或物件。當可觀察的物件資料更改時，SwiftUI 會識別到更新，然後告訴觀測器進行更新。</string>
				<key>Title</key>
				<string>觀測器</string>
			</dict>
		</dict>
		<key>operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>如 `+`、`-` 或 `&amp;&amp;` 的符號，代表在一個或多個值上的操作。例如，在 `1 + 2` 中，加法運算子 (`+`) 將數字 `1` 和 `2` 相加。</string>
				<key>Title</key>
				<string>運算子</string>
			</dict>
		</dict>
		<key>outer loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>包含另一個（內）迴圈的重複程式碼區塊（迴圈）。</string>
				<key>Title</key>
				<string>外迴圈</string>
			</dict>
		</dict>
		<key>parameter</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>函數輸入值的名稱，用於函數的定義中。例如，在 `move(distance: Int)` 中，`distance` 是一個參數，其值為 Int 類型。</string>
				<key>Title</key>
				<string>參數</string>
			</dict>
		</dict>
		<key>parent view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>一或多個[子顯示區](glossary://child%20view)的容器顯示區。</string>
				<key>Title</key>
				<string>上層顯示區</string>
			</dict>
		</dict>
		<key>pattern</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>一組重複的情況或資料。</string>
				<key>Title</key>
				<string>模式</string>
			</dict>
		</dict>
		<key>pitch</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>在音樂中，音符的音高代表音符的高音和低音，主要依據的是震動的頻率。音符的音高可以用[赫茲](glossary://hertz)來測量。高的音高（~2000 Hz）聽起來可能像是口哨聲，而低的音高（~40 Hz）聽起來可能像是牛叫聲。</string>
				<key>Title</key>
				<string>音高</string>
			</dict>
		</dict>
		<key>primitive</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>與 SwiftUI 等程式設計架構相關，基本是指架構提供的建構區塊，用於組成更複雜的行為或[介面](glossary://user%20interface)。
</string>
				<key>Title</key>
				<string>原始</string>
			</dict>
		</dict>
		<key>primitive view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>一個由 [SwiftUI](glossary://SwiftUI) 架構，如 `Button`、`Text` 或 `Image` 顯示區提供的[顯示區](glossary://view)。原始顯示區是用來在你的[使用者介面](glossary://user%20interface)中製作更複雜[組合式顯示區](glossary://composed%20view)的建構基礎。</string>
				<key>Title</key>
				<string>原始顯示區</string>
			</dict>
		</dict>
		<key>private</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>關鍵字 private 會使程式碼只能在特定的來源檔案中使用。
- callout(範例):
`private class MyApp: App { }`</string>
				<key>Title</key>
				<string>private</string>
			</dict>
		</dict>
		<key>property</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>在類型內部定義的一種變數（用於儲存值的已命名的容器）。</string>
				<key>Title</key>
				<string>屬性</string>
			</dict>
		</dict>
		<key>property wrapper</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>屬性包覆是一種將常用的行為模式應用到屬性的簡單方法。這個包覆是一種對屬性的註解方式，定義了讀取時屬性會如何被儲存或計算。   例如，`@State` 屬性包覆告訴 SwiftUI 管理值的儲存空間，並在值發生改變時，更新顯示區中任何使用了這個值的部分。</string>
				<key>Title</key>
				<string>屬性包覆</string>
			</dict>
		</dict>
		<key>protocol</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>一組可被類型（如類別、結構或列舉）採用（或遵循）的需求，如方法和屬性。  當類型採用一個協定時，它為符合協定的需求提供了自己的實作方式，即符合這個協定。</string>
				<key>Title</key>
				<string>協定</string>
			</dict>
		</dict>
		<key>pseudocode</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>簡單易讀的演算法描述，通常混合日常用語和程式碼一起編寫。</string>
				<key>Title</key>
				<string>虛擬碼</string>
			</dict>
		</dict>
		<key>public</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>關鍵字 public 會使程式碼可在計畫案的任何檔案中使用。
                        
- callout(範例):
`public func decorateWithSticker(space: Space) { }`
                    </string>
				<key>Title</key>
				<string>public</string>
			</dict>
		</dict>
		<key>published value</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>加入 `@Published` [屬性包覆](glossary://property%20wrapper)以聲明一個在屬性值即將更改時通知所有[觀測器](glossary://observer)的屬性。當值更改時，SwiftUI 會更新所有使用其資料的顯示區。</string>
				<key>Title</key>
				<string>發佈數值</string>
			</dict>
		</dict>
		<key>return type</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>當你定義函數時，你可以選擇定義一個數值的類型，讓函數完成時傳回做為輸出，稱之為它的傳回類型。</string>
				<key>Title</key>
				<string>傳回類型</string>
			</dict>
		</dict>
		<key>reusability</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>程式碼的一種特性，允許在應用程式中的不同情況下使用程式碼。</string>
				<key>Title</key>
				<string>可重用性</string>
			</dict>
		</dict>
		<key>root view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>此顯示區包含其他所有顯示區。也稱為[最上層顯示區](glossary://top-level%20view)，此顯示區位於[顯示區階層](glossary://view%20hierarchy)最上方，是階層中所有[子顯示區](glossary://child%20view)的[上層顯示區](glossary://parent%20view)。</string>
				<key>Title</key>
				<string>根顯示區</string>
			</dict>
		</dict>
		<key>saturation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>色相的強度，從灰色調到完全的顏色。飽和度是範圍從 `0` 到 `1` 的兩位數（小數）。</string>
				<key>Title</key>
				<string>飽和度</string>
			</dict>
		</dict>
		<key>sensor</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>感測器是用來偵測事件（例如熱度、光線、聲音或動作的更動）的裝置，並且會傳回值。</string>
				<key>Title</key>
				<string>感測器</string>
			</dict>
		</dict>
		<key>source of truth</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>一個在 App 建構中修改所有資料的位置。與這個資料的所有其他關聯僅供參考，這可避免其資訊在其他位置出現重覆。</string>
				<key>Title</key>
				<string>真實來源</string>
			</dict>
		</dict>
		<key>speech synthesis</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>由電腦產生，類似人類說話的語音，通常從文字產生。</string>
				<key>Title</key>
				<string>語音合成</string>
			</dict>
		</dict>
		<key>state</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>一定時間內變數、應用程式或系統所儲存的資訊。</string>
				<key>Title</key>
				<string>狀態</string>
			</dict>
		</dict>
		<key>state object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>加入 `@StateObject` [屬性包覆](glossary://property%20wrapper)以聲明狀態物件，並提供一個符合 `ObservableObject` [協定](glossary://protocol)的初始值。SwiftUI 會管理狀態物件的儲存，並在其發佈數值改變時更新所有使用該數值的子顯示區。</string>
				<key>Title</key>
				<string>狀態物件</string>
			</dict>
		</dict>
		<key>state value</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>在變數前面加入 `@State` 來告訴 SwiftUI 管理數值的儲存內容。當數值改變時，SwiftUI 會更新使用該數值的顯示區的任意部分。</string>
				<key>Title</key>
				<string>狀態值</string>
			</dict>
		</dict>
		<key>statement</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>如迴圈或 `if` 語句的結構，用於組織應用程式中的程式碼。</string>
				<key>Title</key>
				<string>語句</string>
			</dict>
		</dict>
		<key>string component</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>字串的一部分或子字串，在字串被分隔符號分隔成幾個部分後形成。比方說，如果字串 `"dog+cat+fish"` 被分隔符號 `"+"` 分隔，則會產生字串 `"dog"`、`"cat"` 和 `"fish"` 這幾個部分。</string>
				<key>Title</key>
				<string>字串組件</string>
			</dict>
		</dict>
		<key>string concatenation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>透過將一個字串加到另一個字串的結尾來結合字串的操作。例如 `"foot"` 和 `"ball"` 連接後變成 `"football"`。</string>
				<key>Title</key>
				<string>字串聯接</string>
			</dict>
		</dict>
		<key>string interpolation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>在較長字串中使用常數、變數或程式碼表示式，讓它們替換為其目前的值以計算字串的值。例如，在字串 `"Katy ate a \(fruit)."` 中，如果 `fruit` 是帶有值 `"peach"` 的變數，那麼在計算字串的值時，`\(fruit)` 會被 `"peach"` 替換，變成 `"Katy ate a peach."`。</string>
				<key>Title</key>
				<string>字串插值</string>
			</dict>
		</dict>
		<key>syntax</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>編寫電腦可以理解並執行之程式碼的規則。</string>
				<key>Title</key>
				<string>語法</string>
			</dict>
		</dict>
		<key>top-level view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>此顯示區包含其他所有顯示區。也稱為[根顯示區](glossary://root%20view)，此顯示區位於[顯示區階層](glossary://view%20hierarchy)最上方，是階層中所有[子顯示區](glossary://child%20view)的[上層顯示區](glossary://parent%20view)。</string>
				<key>Title</key>
				<string>最上層顯示區</string>
			</dict>
		</dict>
		<key>trailing edge</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>說到顯示區中的內容時，後緣指的是內容結尾的水平位置。後緣的位置視你的偏好設定而定，通常是基於你的地區和語言設定。
                    例如，對於由左至右的語言（像是英文和荷蘭文），後緣位於右側。對於由右至左的語言（像是阿拉伯文或希伯來文），後緣則位於左側。</string>
				<key>Title</key>
				<string>前緣</string>
			</dict>
		</dict>
		<key>type</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>某種資料的屬性（特徵）和方法（動作）所構成的命名群組。</string>
				<key>Title</key>
				<string>類型</string>
			</dict>
		</dict>
		<key>typography</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>排列類型使書寫的語言在顯示時更為清楚易讀、更具吸引力的藝術和技巧。</string>
				<key>Title</key>
				<string>排版</string>
			</dict>
		</dict>
		<key>user input</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>應用程式從與使用者的互動中所得到的資訊，例如使用者觸碰螢幕、使用鍵盤輸入文字，或使用麥克風說話。
</string>
				<key>Title</key>
				<string>使用者輸入</string>
			</dict>
		</dict>
		<key>user interface</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>使用者控制 App 的工具。也稱為「UI」，這個詞通常是指使用者互動的 App 視覺部分，其中的元件包含影像、文字、按鈕、滑桿、捲動顯示區等等。</string>
				<key>Title</key>
				<string>使用者介面</string>
			</dict>
		</dict>
		<key>variable</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>一種已命名的容器，用於儲存可變值。</string>
				<key>Title</key>
				<string>變數</string>
			</dict>
		</dict>
		<key>velocity</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>指定方向上的物件速度。</string>
				<key>Title</key>
				<string>速度</string>
			</dict>
		</dict>
		<key>view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>顯示區是 App 使用者介面的建構區塊，代表[符合](glossary://conform) `View` [協定](glossary://protocol)的任何視覺元件。

一些 SwiftUI 中的顯示區範例有文字顯示區、影像顯示區、滑桿、網格、按鈕和形狀。</string>
				<key>Title</key>
				<string>顯示區</string>
			</dict>
		</dict>
		<key>view hierarchy</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>此結構定義了相對於其他顯示區的顯示區佈局，並參照階層最上方的最上層顯示區實例。最上層顯示區可包含任何數量的子顯示區，而每個子顯示區都可以包含自己的子顯示區，依此類推。</string>
				<key>Title</key>
				<string>顯示區階層</string>
			</dict>
		</dict>
		<key>volume</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>「音量」是[感測器](glossary://sensor)偵測到的聲音響度。範圍介於 0 和 1 之間。</string>
				<key>Title</key>
				<string>音量</string>
			</dict>
		</dict>
		<key>while loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>指定條件為 `true` 時執行的一個程式碼區塊。當條件更改為 `false` 時，迴圈即停止執行。</string>
				<key>Title</key>
				<string>while 迴圈</string>
			</dict>
		</dict>
		<key>wireframe</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>關卡世界中項目（如寶石、開關或磚塊）的外框。線框用於指示每次關卡執行時可能隨機出現的項目。</string>
				<key>Title</key>
				<string>線框</string>
			</dict>
		</dict>
	</dict>
</dict>
</plist>
